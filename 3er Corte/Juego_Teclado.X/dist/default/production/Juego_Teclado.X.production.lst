

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 01 20:10:14 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 2.05
    53                           ; Generated 20/12/2018 GMT
    54                           ; 
    55                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F452 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataCOMRAM
    88  001688                     __pidataCOMRAM:
    89                           	opt callstack 0
    90                           
    91                           ;initializer for _randx
    92  001688  0001               	dw	1
    93  00168A  0000               	dw	0
    94                           
    95                           ;initializer for _attempt
    96  00168C  01                 	db	1
    97                           
    98                           ;initializer for _first_exec
    99  00168D  01                 	db	1
   100                           
   101                           	psect	idataBANK0
   102  00168E                     __pidataBANK0:
   103                           	opt callstack 0
   104                           
   105                           ;initializer for _lvl_n
   106  00168E  0004               	dw	4
   107  001690  0006               	dw	6
   108  001692  000A               	dw	10
   109                           
   110                           	psect	smallconst
   111  000600                     __psmallconst:
   112                           	opt callstack 0
   113  000600  00                 	db	0
   114  000601                     _dpowers:
   115                           	opt callstack 0
   116  000601  0001               	dw	1
   117  000603  000A               	dw	10
   118  000605  0064               	dw	100
   119  000607  03E8               	dw	1000
   120  000609  2710               	dw	10000
   121  00060B                     __end_of_dpowers:
   122                           	opt callstack 0
   123  0000                     _INTCONbits	set	4082
   124  0000                     _RCSTA	set	4011
   125  0000                     _TXSTA	set	4012
   126  0000                     _IPR1	set	3999
   127  0000                     _PIR1	set	3998
   128  0000                     _PIE1	set	3997
   129  0000                     _SPBRG	set	4015
   130  0000                     _RCONbits	set	4048
   131  0000                     _INTCON2	set	4081
   132  0000                     _INTCON	set	4082
   133  0000                     _PORTD	set	3971
   134  0000                     _PORTC	set	3970
   135  0000                     _PORTB	set	3969
   136  0000                     _LATD	set	3980
   137  0000                     _LATC	set	3979
   138  0000                     _TRISD	set	3989
   139  0000                     _TRISC	set	3988
   140  0000                     _TRISB	set	3987
   141  0000                     _LATB	set	3978
   142  0000                     _LC4	set	31836
   143  0000                     _LC3	set	31835
   144  00060B                     STR_1:
   145  00060B  44                 	db	68	;'D'
   146  00060C  49                 	db	73	;'I'
   147  00060D  45                 	db	69	;'E'
   148  00060E  47                 	db	71	;'G'
   149  00060F  4F                 	db	79	;'O'
   150  000610  20                 	db	32
   151  000611  53                 	db	83	;'S'
   152  000612  41                 	db	65	;'A'
   153  000613  52                 	db	82	;'R'
   154  000614  41                 	db	65	;'A'
   155  000615  56                 	db	86	;'V'
   156  000616  49                 	db	73	;'I'
   157  000617  41                 	db	65	;'A'
   158  000618  00                 	db	0
   159  000619                     STR_4:
   160  000619  49                 	db	73	;'I'
   161  00061A  6E                 	db	110	;'n'
   162  00061B  69                 	db	105	;'i'
   163  00061C  63                 	db	99	;'c'
   164  00061D  69                 	db	105	;'i'
   165  00061E  61                 	db	97	;'a'
   166  00061F  6E                 	db	110	;'n'
   167  000620  64                 	db	100	;'d'
   168  000621  6F                 	db	111	;'o'
   169  000622  2E                 	db	46
   170  000623  2E                 	db	46
   171  000624  2E                 	db	46
   172  000625  00                 	db	0
   173  000626                     STR_9:
   174  000626  4F                 	db	79	;'O'
   175  000627  74                 	db	116	;'t'
   176  000628  72                 	db	114	;'r'
   177  000629  61                 	db	97	;'a'
   178  00062A  20                 	db	32
   179  00062B  76                 	db	118	;'v'
   180  00062C  65                 	db	101	;'e'
   181  00062D  7A                 	db	122	;'z'
   182  00062E  2E                 	db	46
   183  00062F  2E                 	db	46
   184  000630  2E                 	db	46
   185  000631  00                 	db	0
   186  000632                     STR_3:
   187  000632  43                 	db	67	;'C'
   188  000633  4F                 	db	79	;'O'
   189  000634  4E                 	db	78	;'N'
   190  000635  43                 	db	67	;'C'
   191  000636  45                 	db	69	;'E'
   192  000637  4E                 	db	78	;'N'
   193  000638  54                 	db	84	;'T'
   194  000639  52                 	db	82	;'R'
   195  00063A  45                 	db	69	;'E'
   196  00063B  53                 	db	83	;'S'
   197  00063C  45                 	db	69	;'E'
   198  00063D  00                 	db	0
   199  00063E                     STR_18:
   200  00063E  52                 	db	82	;'R'
   201  00063F  65                 	db	101	;'e'
   202  000640  69                 	db	105	;'i'
   203  000641  6E                 	db	110	;'n'
   204  000642  69                 	db	105	;'i'
   205  000643  63                 	db	99	;'c'
   206  000644  69                 	db	105	;'i'
   207  000645  61                 	db	97	;'a'
   208  000646  6E                 	db	110	;'n'
   209  000647  64                 	db	100	;'d'
   210  000648  6F                 	db	111	;'o'
   211  000649  00                 	db	0
   212  00064A                     STR_10:
   213  00064A  53                 	db	83	;'S'
   214  00064B  69                 	db	105	;'i'
   215  00064C  67                 	db	103	;'g'
   216  00064D  2E                 	db	46
   217  00064E  20                 	db	32
   218  00064F  6E                 	db	110	;'n'
   219  000650  69                 	db	105	;'i'
   220  000651  76                 	db	118	;'v'
   221  000652  65                 	db	101	;'e'
   222  000653  6C                 	db	108	;'l'
   223  000654  00                 	db	0
   224  000655                     STR_5:
   225  000655  45                 	db	69	;'E'
   226  000656  73                 	db	115	;'s'
   227  000657  63                 	db	99	;'c'
   228  000658  72                 	db	114	;'r'
   229  000659  69                 	db	105	;'i'
   230  00065A  62                 	db	98	;'b'
   231  00065B  65                 	db	101	;'e'
   232  00065C  3A                 	db	58	;':'
   233  00065D  20                 	db	32
   234  00065E  00                 	db	0
   235  00065F                     STR_14:
   236  00065F  54                 	db	84	;'T'
   237  000660  65                 	db	101	;'e'
   238  000661  72                 	db	114	;'r'
   239  000662  6D                 	db	109	;'m'
   240  000663  69                 	db	105	;'i'
   241  000664  6E                 	db	110	;'n'
   242  000665  61                 	db	97	;'a'
   243  000666  64                 	db	100	;'d'
   244  000667  6F                 	db	111	;'o'
   245  000668  00                 	db	0
   246  000669                     STR_15:
   247  000669  49                 	db	73	;'I'
   248  00066A  6E                 	db	110	;'n'
   249  00066B  69                 	db	105	;'i'
   250  00066C  63                 	db	99	;'c'
   251  00066D  69                 	db	105	;'i'
   252  00066E  61                 	db	97	;'a'
   253  00066F  6E                 	db	110	;'n'
   254  000670  64                 	db	100	;'d'
   255  000671  6F                 	db	111	;'o'
   256  000672  00                 	db	0
   257  000673                     STR_12:
   258  000673  47                 	db	71	;'G'
   259  000674  61                 	db	97	;'a'
   260  000675  6E                 	db	110	;'n'
   261  000676  61                 	db	97	;'a'
   262  000677  64                 	db	100	;'d'
   263  000678  6F                 	db	111	;'o'
   264  000679  21                 	db	33
   265  00067A  21                 	db	33
   266  00067B  00                 	db	0
   267  00067C                     STR_17:
   268  00067C  50                 	db	80	;'P'
   269  00067D  65                 	db	101	;'e'
   270  00067E  72                 	db	114	;'r'
   271  00067F  64                 	db	100	;'d'
   272  000680  69                 	db	105	;'i'
   273  000681  73                 	db	115	;'s'
   274  000682  74                 	db	116	;'t'
   275  000683  65                 	db	101	;'e'
   276  000684  00                 	db	0
   277  000685                     STR_16:
   278  000685  64                 	db	100	;'d'
   279  000686  65                 	db	101	;'e'
   280  000687  20                 	db	32
   281  000688  6E                 	db	110	;'n'
   282  000689  75                 	db	117	;'u'
   283  00068A  65                 	db	101	;'e'
   284  00068B  76                 	db	118	;'v'
   285  00068C  6F                 	db	111	;'o'
   286  00068D  00                 	db	0
   287  00068E                     STR_8:
   288  00068E  47                 	db	71	;'G'
   289  00068F  61                 	db	97	;'a'
   290  000690  6E                 	db	110	;'n'
   291  000691  61                 	db	97	;'a'
   292  000692  73                 	db	115	;'s'
   293  000693  74                 	db	116	;'t'
   294  000694  65                 	db	101	;'e'
   295  000695  00                 	db	0
   296  000696                     STR_2:
   297  000696  38                 	db	56	;'8'
   298  000697  34                 	db	52	;'4'
   299  000698  30                 	db	48	;'0'
   300  000699  31                 	db	49	;'1'
   301  00069A  30                 	db	48	;'0'
   302  00069B  00                 	db	0
   303  00069C                     STR_13:
   304  00069C  4A                 	db	74	;'J'
   305  00069D  75                 	db	117	;'u'
   306  00069E  65                 	db	101	;'e'
   307  00069F  67                 	db	103	;'g'
   308  0006A0  6F                 	db	111	;'o'
   309  0006A1  00                 	db	0
   310  0006A2                     STR_11:
   311  0006A2  A1                 	db	-95
   312  0006A3  A1                 	db	-95
   313  0006A4  48                 	db	72	;'H'
   314  0006A5  61                 	db	97	;'a'
   315  0006A6  73                 	db	115	;'s'
   316  0006A7  00                 	db	0
   317  0006A8                     STR_6:
   318  0006A8  25                 	db	37
   319  0006A9  63                 	db	99	;'c'
   320  0006AA  00                 	db	0
   321  0006AB                     STR_7:
   322  0006AB  25                 	db	37
   323  0006AC  69                 	db	105	;'i'
   324  0006AD  00                 	db	0
   325  0000                     
   326                           ; #config settings
   327  0006AE  00                 	db	0	; dummy byte at the end
   328  0000                     
   329                           	psect	cinit
   330  001236                     __pcinit:
   331                           	opt callstack 0
   332  001236                     start_initialization:
   333                           	opt callstack 0
   334  001236                     __initialization:
   335                           	opt callstack 0
   336                           
   337                           ; Initialize objects allocated to BANK0 (6 bytes)
   338                           ; load TBLPTR registers with __pidataBANK0
   339  001236  0E8E               	movlw	low __pidataBANK0
   340  001238  6EF6               	movwf	tblptrl,c
   341  00123A  0E16               	movlw	high __pidataBANK0
   342  00123C  6EF7               	movwf	tblptrh,c
   343  00123E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   344  001240  6EF8               	movwf	tblptru,c
   345  001242  EE00  F0B9         	lfsr	0,__pdataBANK0
   346  001246  EE10 F006          	lfsr	1,6
   347  00124A                     copy_data0:
   348  00124A  0009               	tblrd		*+
   349  00124C  CFF5 FFEE          	movff	tablat,postinc0
   350  001250  50E5               	movf	postdec1,w,c
   351  001252  50E1               	movf	fsr1l,w,c
   352  001254  E1FA               	bnz	copy_data0
   353                           
   354                           ; Initialize objects allocated to COMRAM (6 bytes)
   355                           ; load TBLPTR registers with __pidataCOMRAM
   356  001256  0E88               	movlw	low __pidataCOMRAM
   357  001258  6EF6               	movwf	tblptrl,c
   358  00125A  0E16               	movlw	high __pidataCOMRAM
   359  00125C  6EF7               	movwf	tblptrh,c
   360  00125E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   361  001260  6EF8               	movwf	tblptru,c
   362  001262  EE00  F040         	lfsr	0,__pdataCOMRAM
   363  001266  EE10 F006          	lfsr	1,6
   364  00126A                     copy_data1:
   365  00126A  0009               	tblrd		*+
   366  00126C  CFF5 FFEE          	movff	tablat,postinc0
   367  001270  50E5               	movf	postdec1,w,c
   368  001272  50E1               	movf	fsr1l,w,c
   369  001274  E1FA               	bnz	copy_data1
   370                           
   371                           ; Clear objects allocated to BANK0 (23 bytes)
   372  001276  EE00  F0A2         	lfsr	0,__pbssBANK0
   373  00127A  0E17               	movlw	23
   374  00127C                     clear_0:
   375  00127C  6AEE               	clrf	postinc0,c
   376  00127E  06E8               	decf	wreg,f,c
   377  001280  E1FD               	bnz	clear_0
   378                           
   379                           ; Clear objects allocated to COMRAM (1 bytes)
   380  001282  6A46               	clrf	__pbssCOMRAM& (0+255),c
   381  001284                     end_of_initialization:
   382                           	opt callstack 0
   383  001284                     __end_of__initialization:
   384                           	opt callstack 0
   385  001284  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   386  001286  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   387  001288  0E00               	movlw	low (__Lmediumconst shr (0+16))
   388  00128A  6EF8               	movwf	tblptru,c
   389  00128C  0100               	movlb	0
   390  00128E  EF58  F003         	goto	_main	;jump to C main() function
   391                           
   392                           	psect	bssCOMRAM
   393  000046                     __pbssCOMRAM:
   394                           	opt callstack 0
   395  000046                     _counting_down:
   396                           	opt callstack 0
   397  000046                     	ds	1
   398                           
   399                           	psect	dataCOMRAM
   400  000040                     __pdataCOMRAM:
   401                           	opt callstack 0
   402  000040                     _randx:
   403                           	opt callstack 0
   404  000040                     	ds	4
   405  000044                     _attempt:
   406                           	opt callstack 0
   407  000044                     	ds	1
   408  000045                     _first_exec:
   409                           	opt callstack 0
   410  000045                     	ds	1
   411                           
   412                           	psect	bssBANK0
   413  0000A2                     __pbssBANK0:
   414                           	opt callstack 0
   415  0000A2                     _d_pressed:
   416                           	opt callstack 0
   417  0000A2                     	ds	1
   418  0000A3                     _typing:
   419                           	opt callstack 0
   420  0000A3                     	ds	1
   421  0000A4                     _lvl:
   422                           	opt callstack 0
   423  0000A4                     	ds	1
   424  0000A5                     _ans:
   425                           	opt callstack 0
   426  0000A5                     	ds	10
   427  0000AF                     _nums:
   428                           	opt callstack 0
   429  0000AF                     	ds	10
   430                           
   431                           	psect	dataBANK0
   432  0000B9                     __pdataBANK0:
   433                           	opt callstack 0
   434  0000B9                     _lvl_n:
   435                           	opt callstack 0
   436  0000B9                     	ds	6
   437                           
   438                           	psect	cstackBANK0
   439  000080                     __pcstackBANK0:
   440                           	opt callstack 0
   441  000080                     ?___lwmod:
   442                           	opt callstack 0
   443  000080                     ?___lmul:
   444                           	opt callstack 0
   445  000080                     compare_nums@lim:
   446                           	opt callstack 0
   447  000080                     print_message_onLCD@message:
   448                           	opt callstack 0
   449  000080                     ___lwmod@dividend:
   450                           	opt callstack 0
   451  000080                     ___lmul@multiplier:
   452                           	opt callstack 0
   453                           
   454                           ; 4 bytes @ 0x0
   455  000080                     	ds	1
   456  000081                     compare_nums@i:
   457                           	opt callstack 0
   458                           
   459                           ; 1 bytes @ 0x1
   460  000081                     	ds	1
   461  000082                     print_message_onLCD@place:
   462                           	opt callstack 0
   463  000082                     ___lwmod@divisor:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x2
   467  000082                     	ds	1
   468  000083                     print_message_onLCD@space_bt:
   469                           	opt callstack 0
   470                           
   471                           ; 1 bytes @ 0x3
   472  000083                     	ds	1
   473  000084                     ??_loss_protocol:
   474  000084                     ??_game_won:
   475  000084                     ___lwmod@counter:
   476                           	opt callstack 0
   477  000084                     ___lmul@multiplicand:
   478                           	opt callstack 0
   479                           
   480                           ; 4 bytes @ 0x4
   481  000084                     	ds	1
   482  000085                     ?_sprintf:
   483                           	opt callstack 0
   484  000085                     sprintf@sp:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x5
   488  000085                     	ds	1
   489  000086                     ??_win_protocol:
   490                           
   491                           ; 1 bytes @ 0x6
   492  000086                     	ds	1
   493  000087                     sprintf@f:
   494                           	opt callstack 0
   495                           
   496                           ; 2 bytes @ 0x7
   497  000087                     	ds	1
   498  000088                     ?___awmod:
   499                           	opt callstack 0
   500  000088                     ___awmod@dividend:
   501                           	opt callstack 0
   502                           
   503                           ; 2 bytes @ 0x8
   504  000088                     	ds	2
   505  00008A                     ___awmod@divisor:
   506                           	opt callstack 0
   507                           
   508                           ; 2 bytes @ 0xA
   509  00008A                     	ds	1
   510  00008B                     ??_sprintf:
   511                           
   512                           ; 1 bytes @ 0xB
   513  00008B                     	ds	1
   514  00008C                     sprintf@flag:
   515                           	opt callstack 0
   516  00008C                     ___awmod@counter:
   517                           	opt callstack 0
   518                           
   519                           ; 1 bytes @ 0xC
   520  00008C                     	ds	1
   521  00008D                     sprintf@prec:
   522                           	opt callstack 0
   523  00008D                     ___awmod@sign:
   524                           	opt callstack 0
   525                           
   526                           ; 1 bytes @ 0xD
   527  00008D                     	ds	1
   528  00008E                     sprintf@ap:
   529                           	opt callstack 0
   530                           
   531                           ; 2 bytes @ 0xE
   532  00008E                     	ds	2
   533  000090                     sprintf@val:
   534                           	opt callstack 0
   535                           
   536                           ; 2 bytes @ 0x10
   537  000090                     	ds	2
   538  000092                     sprintf@c:
   539                           	opt callstack 0
   540                           
   541                           ; 1 bytes @ 0x12
   542  000092                     	ds	1
   543  000093                     get_rand_num@to:
   544                           	opt callstack 0
   545                           
   546                           ; 1 bytes @ 0x13
   547  000093                     	ds	1
   548  000094                     ??_get_rand_num:
   549                           
   550                           ; 1 bytes @ 0x14
   551  000094                     	ds	2
   552  000096                     get_rand_num@num:
   553                           	opt callstack 0
   554                           
   555                           ; 2 bytes @ 0x16
   556  000096                     	ds	2
   557  000098                     get_rand_num@from:
   558                           	opt callstack 0
   559                           
   560                           ; 1 bytes @ 0x18
   561  000098                     	ds	1
   562  000099                     get_rand_num@r:
   563                           	opt callstack 0
   564                           
   565                           ; 1 bytes @ 0x19
   566  000099                     	ds	1
   567  00009A                     ??_main:
   568                           
   569                           ; 1 bytes @ 0x1A
   570  00009A                     	ds	5
   571  00009F                     main@spc:
   572                           	opt callstack 0
   573                           
   574                           ; 1 bytes @ 0x1F
   575  00009F                     	ds	1
   576  0000A0                     main@i_279:
   577                           	opt callstack 0
   578                           
   579                           ; 1 bytes @ 0x20
   580  0000A0                     	ds	1
   581  0000A1                     main@i:
   582                           	opt callstack 0
   583                           
   584                           ; 1 bytes @ 0x21
   585  0000A1                     	ds	1
   586                           
   587                           	psect	cstackCOMRAM
   588  000001                     __pcstackCOMRAM:
   589                           	opt callstack 0
   590  000001                     ?i2___lwdiv:
   591                           	opt callstack 0
   592  000001                     ?i2_strlen:
   593                           	opt callstack 0
   594  000001                     get_letter@code:
   595                           	opt callstack 0
   596  000001                     i2R_I@dato:
   597                           	opt callstack 0
   598  000001                     i2R_D@dato:
   599                           	opt callstack 0
   600  000001                     i2___lwdiv@dividend:
   601                           	opt callstack 0
   602  000001                     i2strlen@s:
   603                           	opt callstack 0
   604                           
   605                           ; 2 bytes @ 0x0
   606  000001                     	ds	2
   607  000003                     i2___lwdiv@divisor:
   608                           	opt callstack 0
   609  000003                     i2strlen@cp:
   610                           	opt callstack 0
   611                           
   612                           ; 2 bytes @ 0x2
   613  000003                     	ds	2
   614  000005                     i2print_message_onLCD@message:
   615                           	opt callstack 0
   616  000005                     i2___lwdiv@quotient:
   617                           	opt callstack 0
   618                           
   619                           ; 2 bytes @ 0x4
   620  000005                     	ds	2
   621  000007                     i2print_message_onLCD@place:
   622                           	opt callstack 0
   623  000007                     i2___lwdiv@counter:
   624                           	opt callstack 0
   625                           
   626                           ; 1 bytes @ 0x6
   627  000007                     	ds	1
   628  000008                     ?i2___lwmod:
   629                           	opt callstack 0
   630  000008                     i2print_message_onLCD@space_bt:
   631                           	opt callstack 0
   632  000008                     i2___lwmod@dividend:
   633                           	opt callstack 0
   634                           
   635                           ; 2 bytes @ 0x7
   636  000008                     	ds	1
   637  000009                     ??i2_print_message_onLCD:
   638                           
   639                           ; 1 bytes @ 0x8
   640  000009                     	ds	1
   641  00000A                     i2___lwmod@divisor:
   642                           	opt callstack 0
   643                           
   644                           ; 2 bytes @ 0x9
   645  00000A                     	ds	1
   646  00000B                     i2print_message_onLCD@i:
   647                           	opt callstack 0
   648                           
   649                           ; 1 bytes @ 0xA
   650  00000B                     	ds	1
   651  00000C                     i2___lwmod@counter:
   652                           	opt callstack 0
   653                           
   654                           ; 1 bytes @ 0xB
   655  00000C                     	ds	1
   656  00000D                     ?i2_sprintf:
   657                           	opt callstack 0
   658  00000D                     i2sprintf@sp:
   659                           	opt callstack 0
   660                           
   661                           ; 2 bytes @ 0xC
   662  00000D                     	ds	2
   663  00000F                     i2sprintf@f:
   664                           	opt callstack 0
   665                           
   666                           ; 2 bytes @ 0xE
   667  00000F                     	ds	4
   668  000013                     ??i2_sprintf:
   669                           
   670                           ; 1 bytes @ 0x12
   671  000013                     	ds	1
   672  000014                     i2sprintf@flag:
   673                           	opt callstack 0
   674                           
   675                           ; 1 bytes @ 0x13
   676  000014                     	ds	1
   677  000015                     i2sprintf@prec:
   678                           	opt callstack 0
   679                           
   680                           ; 1 bytes @ 0x14
   681  000015                     	ds	1
   682  000016                     i2sprintf@ap:
   683                           	opt callstack 0
   684                           
   685                           ; 2 bytes @ 0x15
   686  000016                     	ds	2
   687  000018                     i2sprintf@val:
   688                           	opt callstack 0
   689                           
   690                           ; 2 bytes @ 0x17
   691  000018                     	ds	2
   692  00001A                     i2sprintf@c:
   693                           	opt callstack 0
   694                           
   695                           ; 1 bytes @ 0x19
   696  00001A                     	ds	1
   697  00001B                     ??_capture:
   698                           
   699                           ; 1 bytes @ 0x1A
   700  00001B                     	ds	11
   701  000026                     capture@m:
   702                           	opt callstack 0
   703                           
   704                           ; 16 bytes @ 0x25
   705  000026                     	ds	16
   706  000036                     capture@p:
   707                           	opt callstack 0
   708                           
   709                           ; 1 bytes @ 0x35
   710  000036                     	ds	1
   711  000037                     capture@pos:
   712                           	opt callstack 0
   713                           
   714                           ; 1 bytes @ 0x36
   715  000037                     	ds	1
   716  000038                     capture@ans_len:
   717                           	opt callstack 0
   718                           
   719                           ; 1 bytes @ 0x37
   720  000038                     	ds	1
   721  000039                     ?_strlen:
   722                           	opt callstack 0
   723  000039                     ?___lwdiv:
   724                           	opt callstack 0
   725  000039                     R_I@dato:
   726                           	opt callstack 0
   727  000039                     R_D@dato:
   728                           	opt callstack 0
   729  000039                     clear_vec@vec:
   730                           	opt callstack 0
   731  000039                     compare_nums@nums:
   732                           	opt callstack 0
   733  000039                     ___lwdiv@dividend:
   734                           	opt callstack 0
   735  000039                     srand@x:
   736                           	opt callstack 0
   737  000039                     strlen@s:
   738                           	opt callstack 0
   739  000039                     ___lmul@product:
   740                           	opt callstack 0
   741                           
   742                           ; 4 bytes @ 0x38
   743  000039                     	ds	1
   744  00003A                     ??_init_lcd:
   745  00003A                     ??_clean_screen:
   746                           
   747                           ; 1 bytes @ 0x39
   748  00003A                     	ds	1
   749  00003B                     ??_clear_vec:
   750  00003B                     compare_nums@r:
   751                           	opt callstack 0
   752  00003B                     ___lwdiv@divisor:
   753                           	opt callstack 0
   754  00003B                     strlen@cp:
   755                           	opt callstack 0
   756                           
   757                           ; 2 bytes @ 0x3A
   758  00003B                     	ds	2
   759  00003D                     ??_print_message_onLCD:
   760  00003D                     ?_rand:
   761                           	opt callstack 0
   762  00003D                     clear_vec@lim:
   763                           	opt callstack 0
   764  00003D                     ___lwdiv@quotient:
   765                           	opt callstack 0
   766                           
   767                           ; 2 bytes @ 0x3C
   768  00003D                     	ds	1
   769  00003E                     clear_vec@i:
   770                           	opt callstack 0
   771                           
   772                           ; 1 bytes @ 0x3D
   773  00003E                     	ds	1
   774  00003F                     print_message_onLCD@i:
   775                           	opt callstack 0
   776  00003F                     ___lwdiv@counter:
   777                           	opt callstack 0
   778                           
   779                           ; 1 bytes @ 0x3E
   780  00003F                     	ds	1
   781  000040                     
   782                           ; 1 bytes @ 0x3F
   783 ;;
   784 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   785 ;;
   786 ;; *************** function _main *****************
   787 ;; Defined at:
   788 ;;		line 52 in file "main.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  i               1   32[BANK0 ] unsigned char 
   793 ;;  spc             1   31[BANK0 ] unsigned char 
   794 ;;  i               1   33[BANK0 ] unsigned char 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   804 ;;      Params:         0       0       0       0       0       0       0
   805 ;;      Locals:         0       3       0       0       0       0       0
   806 ;;      Temps:          0       5       0       0       0       0       0
   807 ;;      Totals:         0       8       0       0       0       0       0
   808 ;;Total ram usage:        8 bytes
   809 ;; Hardware stack levels required when called:    8
   810 ;; This function calls:
   811 ;;		_R_I
   812 ;;		_clean_screen
   813 ;;		_compare_nums
   814 ;;		_get_rand_num
   815 ;;		_init_lcd
   816 ;;		_init_serial_com
   817 ;;		_initial_config
   818 ;;		_loss_protocol
   819 ;;		_print_message_onLCD
   820 ;;		_srand
   821 ;;		_win_protocol
   822 ;; This function is called by:
   823 ;;		Startup code after reset
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text0
   828  0006B0                     __ptext0:
   829                           	opt callstack 0
   830  0006B0                     _main:
   831                           	opt callstack 0
   832  0006B0  FFFF               	dw	65535	; assembler added errata NOP
   833                           
   834                           ;main.c: 53: initial_config();
   835                           
   836                           ;incstack = 0
   837  0006B2  ECE1  F00A         	call	_initial_config	;wreg free
   838                           
   839                           ;main.c: 54: init_lcd();
   840  0006B6  EC76  F009         	call	_init_lcd	;wreg free
   841                           
   842                           ;main.c: 55: init_serial_com();
   843  0006BA  ECCD  F00A         	call	_init_serial_com	;wreg free
   844                           
   845                           ;main.c: 57: print_message_onLCD("DIEGO SARAVIA", 128, 0);
   846  0006BE  0E0B               	movlw	low STR_1
   847  0006C0  0100               	movlb	0	; () banked
   848  0006C2  6F80               	movwf	print_message_onLCD@message& (0+255),b
   849  0006C4  0E06               	movlw	high STR_1
   850  0006C6  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
   851  0006C8  0E80               	movlw	128
   852  0006CA  6F82               	movwf	print_message_onLCD@place& (0+255),b
   853  0006CC  0E00               	movlw	0
   854  0006CE  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
   855  0006D0  EC93  F007         	call	_print_message_onLCD	;wreg free
   856                           
   857                           ;main.c: 58: print_message_onLCD("84010", 192, 0);
   858  0006D4  0E96               	movlw	low STR_2
   859  0006D6  0100               	movlb	0	; () banked
   860  0006D8  6F80               	movwf	print_message_onLCD@message& (0+255),b
   861  0006DA  0E06               	movlw	high STR_2
   862  0006DC  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
   863  0006DE  0EC0               	movlw	192
   864  0006E0  6F82               	movwf	print_message_onLCD@place& (0+255),b
   865  0006E2  0E00               	movlw	0
   866  0006E4  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
   867  0006E6  EC93  F007         	call	_print_message_onLCD	;wreg free
   868                           
   869                           ;main.c: 59: _delay((unsigned long)((2000)*(4000000/4000.0)));
   870  0006EA  0E08               	movlw	8
   871  0006EC  0100               	movlb	0	; () banked
   872  0006EE  6F9B               	movwf	(??_main+1)& (0+255),b
   873  0006F0  0E9E               	movlw	158
   874  0006F2  6F9A               	movwf	??_main& (0+255),b
   875  0006F4  0E4B               	movlw	75
   876  0006F6                     u1657:
   877  0006F6  FFFF               	dw	65535	; errata NOP
   878  0006F8  2EE8               	decfsz	wreg,f,c
   879  0006FA  D7FD               	bra	u1657
   880  0006FC  2F9A               	decfsz	??_main& (0+255),f,b
   881  0006FE  D7FB               	bra	u1657
   882  000700  2F9B               	decfsz	(??_main+1)& (0+255),f,b
   883  000702  D7F9               	bra	u1657
   884  000704  D000               	nop2	
   885  000706  F000               	nop	
   886                           
   887                           ;main.c: 60: clean_screen();
   888  000708  ECF4  F00A         	call	_clean_screen	;wreg free
   889                           
   890                           ;main.c: 62: print_message_onLCD("CONCENTRESE", 128, 0);
   891  00070C  0E32               	movlw	low STR_3
   892  00070E  0100               	movlb	0	; () banked
   893  000710  6F80               	movwf	print_message_onLCD@message& (0+255),b
   894  000712  0E06               	movlw	high STR_3
   895  000714  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
   896  000716  0E80               	movlw	128
   897  000718  6F82               	movwf	print_message_onLCD@place& (0+255),b
   898  00071A  0E00               	movlw	0
   899  00071C  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
   900  00071E  EC93  F007         	call	_print_message_onLCD	;wreg free
   901                           
   902                           ;main.c: 63: print_message_onLCD("Iniciando...", 192, 0);
   903  000722  0E19               	movlw	low STR_4
   904  000724  0100               	movlb	0	; () banked
   905  000726  6F80               	movwf	print_message_onLCD@message& (0+255),b
   906  000728  0E06               	movlw	high STR_4
   907  00072A  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
   908  00072C  0EC0               	movlw	192
   909  00072E  6F82               	movwf	print_message_onLCD@place& (0+255),b
   910  000730  0E00               	movlw	0
   911  000732  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
   912  000734  EC93  F007         	call	_print_message_onLCD	;wreg free
   913                           
   914                           ;main.c: 64: _delay((unsigned long)((2000)*(4000000/4000.0)));
   915  000738  0E08               	movlw	8
   916  00073A  0100               	movlb	0	; () banked
   917  00073C  6F9B               	movwf	(??_main+1)& (0+255),b
   918  00073E  0E9E               	movlw	158
   919  000740  6F9A               	movwf	??_main& (0+255),b
   920  000742  0E4B               	movlw	75
   921  000744                     u1667:
   922  000744  FFFF               	dw	65535	; errata NOP
   923  000746  2EE8               	decfsz	wreg,f,c
   924  000748  D7FD               	bra	u1667
   925  00074A  2F9A               	decfsz	??_main& (0+255),f,b
   926  00074C  D7FB               	bra	u1667
   927  00074E  2F9B               	decfsz	(??_main+1)& (0+255),f,b
   928  000750  D7F9               	bra	u1667
   929  000752  D000               	nop2	
   930  000754  F000               	nop	
   931                           
   932                           ;main.c: 65: clean_screen();
   933  000756  ECF4  F00A         	call	_clean_screen	;wreg free
   934                           
   935                           ;main.c: 67: srand(13);
   936  00075A  0E00               	movlw	0
   937  00075C  6E3A               	movwf	srand@x+1,c
   938  00075E  0E0D               	movlw	13
   939  000760  6E39               	movwf	srand@x,c
   940  000762  EC3B  F00B         	call	_srand	;wreg free
   941                           
   942                           ;main.c: 68: R_I(128);
   943  000766  0E80               	movlw	128
   944  000768  EC11  F00B         	call	_R_I
   945  00076C                     l2602:
   946  00076C  FFFF               	dw	65535	; assembler added errata NOP
   947                           
   948                           ;main.c: 71: for (char i = 0; i < 4; i++) {
   949  00076E  0E00               	movlw	0
   950  000770  0100               	movlb	0	; () banked
   951  000772  6FA1               	movwf	main@i& (0+255),b
   952  000774                     l2604:
   953  000774  FFFF               	dw	65535	; assembler added errata NOP
   954                           
   955                           ; BSR set to: 0
   956  000776  0E03               	movlw	3
   957  000778  65A1               	cpfsgt	main@i& (0+255),b
   958  00077A  D001               	goto	l2608
   959  00077C  D019               	goto	l2614
   960  00077E                     l2608:
   961  00077E  FFFF               	dw	65535	; assembler added errata NOP
   962                           
   963                           ; BSR set to: 0
   964                           ;main.c: 72: LATB = ~(1<<i);
   965  000780  C0A1  F09A         	movff	main@i,??_main
   966  000784  0E01               	movlw	1
   967  000786  6F9B               	movwf	(??_main+1)& (0+255),b
   968  000788  2B9A               	incf	??_main& (0+255),f,b
   969  00078A  D003               	goto	u1584
   970  00078C                     u1585:
   971  00078C  FFFF               	dw	65535	; assembler added errata NOP
   972  00078E  90D8               	bcf	status,0,c
   973  000790  379B               	rlcf	(??_main+1)& (0+255),f,b
   974  000792                     u1584:
   975  000792  FFFF               	dw	65535	; assembler added errata NOP
   976  000794  2F9A               	decfsz	??_main& (0+255),f,b
   977  000796  D7FA               	goto	u1585
   978  000798  0100               	movlb	0	; () banked
   979  00079A  519B               	movf	(??_main+1)& (0+255),w,b
   980  00079C  0AFF               	xorlw	255
   981  00079E  6E8A               	movwf	3978,c	;volatile
   982                           
   983                           ; BSR set to: 0
   984                           ;main.c: 73: _delay((unsigned long)((10)*(4000000/4000000.0)));
   985  0007A0  0E02               	movlw	2
   986  0007A2                     u1677:
   987  0007A2  FFFF               	dw	65535	; errata NOP
   988  0007A4  2EE8               	decfsz	wreg,f,c
   989  0007A6  D7FD               	bra	u1677
   990  0007A8  D000               	nop2	
   991  0007AA  0100               	movlb	0	; () banked
   992  0007AC  2BA1               	incf	main@i& (0+255),f,b
   993  0007AE  D7E2               	goto	l2604
   994  0007B0                     l2614:
   995  0007B0  FFFF               	dw	65535	; assembler added errata NOP
   996                           
   997                           ; BSR set to: 0
   998                           ;main.c: 74: };main.c: 76: if (!typing) {
   999  0007B2  51A3               	movf	_typing& (0+255),w,b
  1000  0007B4  A4D8               	btfss	status,2,c
  1001  0007B6  D062               	goto	l2640
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;main.c: 77: for (char i = 0; i < lvl_n[lvl]; i++) {
  1005  0007B8  0E00               	movlw	0
  1006  0007BA  6FA0               	movwf	main@i_279& (0+255),b
  1007  0007BC  D011               	goto	l2622
  1008  0007BE                     l2618:
  1009  0007BE  FFFF               	dw	65535	; assembler added errata NOP
  1010                           
  1011                           ; BSR set to: 0
  1012                           ;main.c: 78: nums[i] = get_rand_num(0, 10);
  1013  0007C0  0E0A               	movlw	10
  1014  0007C2  6F93               	movwf	get_rand_num@to& (0+255),b
  1015  0007C4  0E00               	movlw	0
  1016  0007C6  EC59  F008         	call	_get_rand_num
  1017  0007CA  0100               	movlb	0	; () banked
  1018  0007CC  6F9A               	movwf	??_main& (0+255),b
  1019  0007CE  0EAF               	movlw	low _nums
  1020  0007D0  25A0               	addwf	main@i_279& (0+255),w,b
  1021  0007D2  6ED9               	movwf	fsr2l,c
  1022  0007D4  6ADA               	clrf	fsr2h,c
  1023  0007D6  0E00               	movlw	high _nums
  1024  0007D8  22DA               	addwfc	fsr2h,f,c
  1025  0007DA  C09A  FFDF         	movff	??_main,indf2
  1026                           
  1027                           ; BSR set to: 0
  1028  0007DE  2BA0               	incf	main@i_279& (0+255),f,b
  1029  0007E0                     l2622:
  1030  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  1031                           
  1032                           ; BSR set to: 0
  1033  0007E2  51A4               	movf	_lvl& (0+255),w,b
  1034  0007E4  0D02               	mullw	2
  1035  0007E6  0EB9               	movlw	low _lvl_n
  1036  0007E8  24F3               	addwf	prodl,w,c
  1037  0007EA  6ED9               	movwf	fsr2l,c
  1038  0007EC  0E00               	movlw	high _lvl_n
  1039  0007EE  20F4               	addwfc	prodh,w,c
  1040  0007F0  6EDA               	movwf	fsr2h,c
  1041  0007F2  51A0               	movf	main@i_279& (0+255),w,b
  1042  0007F4  6F9C               	movwf	(??_main+2)& (0+255),b
  1043  0007F6  6B9D               	clrf	(??_main+3)& (0+255),b
  1044  0007F8  50DE               	movf	postinc2,w,c
  1045  0007FA  5D9C               	subwf	(??_main+2)& (0+255),w,b
  1046  0007FC  519D               	movf	(??_main+3)& (0+255),w,b
  1047  0007FE  0A80               	xorlw	128
  1048  000800  6F9E               	movwf	(??_main+4)& (0+255),b
  1049  000802  50DE               	movf	postinc2,w,c
  1050  000804  0A80               	xorlw	128
  1051  000806  599E               	subwfb	(??_main+4)& (0+255),w,b
  1052  000808  A0D8               	btfss	status,0,c
  1053  00080A  D7D9               	goto	l2618
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;main.c: 79: };main.c: 80: char spc = lvl == 2 ? 0 : 1;
  1057  00080C  0E02               	movlw	2
  1058  00080E  19A4               	xorwf	_lvl& (0+255),w,b
  1059  000810  B4D8               	btfsc	status,2,c
  1060  000812  D002               	goto	u1610
  1061  000814  0E01               	movlw	1
  1062  000816  D002               	goto	u1620
  1063  000818                     u1610:
  1064  000818  FFFF               	dw	65535	; assembler added errata NOP
  1065  00081A  0E00               	movlw	0
  1066  00081C                     u1620:
  1067  00081C  FFFF               	dw	65535	; assembler added errata NOP
  1068  00081E  6F9F               	movwf	main@spc& (0+255),b
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;main.c: 81: print_message_onLCD(nums, 128, spc);
  1072  000820  0EAF               	movlw	low _nums
  1073  000822  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1074  000824  0E00               	movlw	high _nums
  1075  000826  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1076  000828  0E80               	movlw	128
  1077  00082A  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1078  00082C  C09F  F083         	movff	main@spc,print_message_onLCD@space_bt
  1079  000830  EC93  F007         	call	_print_message_onLCD	;wreg free
  1080                           
  1081                           ;main.c: 82: _delay((unsigned long)((3000)*(4000000/4000.0)));
  1082  000834  0E0C               	movlw	12
  1083  000836  0100               	movlb	0	; () banked
  1084  000838  6F9B               	movwf	(??_main+1)& (0+255),b
  1085  00083A  0E6C               	movlw	108
  1086  00083C  6F9A               	movwf	??_main& (0+255),b
  1087  00083E  0EF2               	movlw	242
  1088  000840                     u1687:
  1089  000840  FFFF               	dw	65535	; errata NOP
  1090  000842  2EE8               	decfsz	wreg,f,c
  1091  000844  D7FD               	bra	u1687
  1092  000846  2F9A               	decfsz	??_main& (0+255),f,b
  1093  000848  D7FB               	bra	u1687
  1094  00084A  2F9B               	decfsz	(??_main+1)& (0+255),f,b
  1095  00084C  D7F9               	bra	u1687
  1096  00084E  D000               	nop2	
  1097  000850  F000               	nop	
  1098                           
  1099                           ;main.c: 83: clean_screen();
  1100  000852  ECF4  F00A         	call	_clean_screen	;wreg free
  1101                           
  1102                           ;main.c: 84: print_message_onLCD("Escribe: ", 128, 0);
  1103  000856  0E55               	movlw	low STR_5
  1104  000858  0100               	movlb	0	; () banked
  1105  00085A  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1106  00085C  0E06               	movlw	high STR_5
  1107  00085E  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1108  000860  0E80               	movlw	128
  1109  000862  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1110  000864  0E00               	movlw	0
  1111  000866  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1112  000868  EC93  F007         	call	_print_message_onLCD	;wreg free
  1113                           
  1114                           ;main.c: 85: R_I(192);
  1115  00086C  0EC0               	movlw	192
  1116  00086E  EC11  F00B         	call	_R_I
  1117                           
  1118                           ;main.c: 86: counting_down = 0;
  1119  000872  0E00               	movlw	0
  1120  000874  6E46               	movwf	_counting_down,c
  1121                           
  1122                           ;main.c: 87: typing = 1;
  1123  000876  0E01               	movlw	1
  1124  000878  0100               	movlb	0	; () banked
  1125  00087A  6FA3               	movwf	_typing& (0+255),b
  1126  00087C                     l2640:
  1127  00087C  FFFF               	dw	65535	; assembler added errata NOP
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;main.c: 88: };main.c: 90: if (d_pressed) {
  1131  00087E  51A2               	movf	_d_pressed& (0+255),w,b
  1132  000880  B4D8               	btfsc	status,2,c
  1133  000882  D01E               	goto	l2656
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;main.c: 91: clean_screen();
  1137  000884  ECF4  F00A         	call	_clean_screen	;wreg free
  1138                           
  1139                           ;main.c: 92: typing = 0;
  1140  000888  0E00               	movlw	0
  1141  00088A  0100               	movlb	0	; () banked
  1142  00088C  6FA3               	movwf	_typing& (0+255),b
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;main.c: 93: counting_down = 1;
  1146  00088E  0E01               	movlw	1
  1147  000890  6E46               	movwf	_counting_down,c
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;main.c: 94: if (compare_nums(nums, ans)) {
  1151  000892  0EAF               	movlw	low _nums
  1152  000894  6E39               	movwf	compare_nums@nums,c
  1153  000896  0E00               	movlw	high _nums
  1154  000898  6E3A               	movwf	compare_nums@nums+1,c
  1155  00089A  0EA5               	movlw	low _ans
  1156  00089C  6E3B               	movwf	compare_nums@r,c
  1157  00089E  0E00               	movlw	high _ans
  1158  0008A0  6E3C               	movwf	compare_nums@r+1,c
  1159  0008A2  EC49  F009         	call	_compare_nums	;wreg free
  1160  0008A6  0900               	iorlw	0
  1161  0008A8  B4D8               	btfsc	status,2,c
  1162  0008AA  D003               	goto	l2652
  1163                           
  1164                           ;main.c: 95: win_protocol();
  1165  0008AC  ECE2  F006         	call	_win_protocol	;wreg free
  1166                           
  1167                           ;main.c: 96: } else {
  1168  0008B0  D003               	goto	l2654
  1169  0008B2                     l2652:
  1170  0008B2  FFFF               	dw	65535	; assembler added errata NOP
  1171                           
  1172                           ;main.c: 97: loss_protocol();
  1173  0008B4  EC74  F006         	call	_loss_protocol	;wreg free
  1174  0008B8                     l2654:
  1175  0008B8  FFFF               	dw	65535	; assembler added errata NOP
  1176                           
  1177                           ;main.c: 98: };main.c: 99: d_pressed = 0;
  1178  0008BA  0E00               	movlw	0
  1179  0008BC  0100               	movlb	0	; () banked
  1180  0008BE  6FA2               	movwf	_d_pressed& (0+255),b
  1181  0008C0                     l2656:
  1182  0008C0  FFFF               	dw	65535	; assembler added errata NOP
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;main.c: 100: };main.c: 102: first_exec = 0;
  1186  0008C2  0E00               	movlw	0
  1187  0008C4  6E45               	movwf	_first_exec,c
  1188  0008C6  D752               	goto	l2602
  1189  0008C8                     __end_of_main:
  1190                           	opt callstack 0
  1191                           
  1192 ;; *************** function _win_protocol *****************
  1193 ;; Defined at:
  1194 ;;		line 261 in file "main.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1208 ;;      Params:         0       0       0       0       0       0       0
  1209 ;;      Locals:         0       0       0       0       0       0       0
  1210 ;;      Temps:          0       2       0       0       0       0       0
  1211 ;;      Totals:         0       2       0       0       0       0       0
  1212 ;;Total ram usage:        2 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    7
  1215 ;; This function calls:
  1216 ;;		_clean_screen
  1217 ;;		_clear_vec
  1218 ;;		_game_won
  1219 ;;		_print_message_onLCD
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text1
  1226  000DC4                     __ptext1:
  1227                           	opt callstack 0
  1228  000DC4                     _win_protocol:
  1229                           	opt callstack 0
  1230  000DC4  FFFF               	dw	65535	; assembler added errata NOP
  1231                           
  1232                           ;main.c: 262: print_message_onLCD("Ganaste", 128, 0);
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;incstack = 0
  1236  000DC6  0E8E               	movlw	low STR_8
  1237  000DC8  0100               	movlb	0	; () banked
  1238  000DCA  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1239  000DCC  0E06               	movlw	high STR_8
  1240  000DCE  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1241  000DD0  0E80               	movlw	128
  1242  000DD2  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1243  000DD4  0E00               	movlw	0
  1244  000DD6  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1245  000DD8  EC93  F007         	call	_print_message_onLCD	;wreg free
  1246                           
  1247                           ;main.c: 263: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1248  000DDC  0E08               	movlw	8
  1249  000DDE  0100               	movlb	0	; () banked
  1250  000DE0  6F87               	movwf	(??_win_protocol+1)& (0+255),b
  1251  000DE2  0E9E               	movlw	158
  1252  000DE4  6F86               	movwf	??_win_protocol& (0+255),b
  1253  000DE6  0E4B               	movlw	75
  1254  000DE8                     u1697:
  1255  000DE8  FFFF               	dw	65535	; errata NOP
  1256  000DEA  2EE8               	decfsz	wreg,f,c
  1257  000DEC  D7FD               	bra	u1697
  1258  000DEE  2F86               	decfsz	??_win_protocol& (0+255),f,b
  1259  000DF0  D7FB               	bra	u1697
  1260  000DF2  2F87               	decfsz	(??_win_protocol+1)& (0+255),f,b
  1261  000DF4  D7F9               	bra	u1697
  1262  000DF6  D000               	nop2	
  1263  000DF8  F000               	nop	
  1264                           
  1265                           ;main.c: 264: if (attempt < 3) {
  1266  000DFA  0E03               	movlw	3
  1267  000DFC  6044               	cpfslt	_attempt,c
  1268  000DFE  D00D               	goto	l2542
  1269                           
  1270                           ;main.c: 265: print_message_onLCD("Otra vez...", 128, 0);
  1271  000E00  0E26               	movlw	low STR_9
  1272  000E02  0100               	movlb	0	; () banked
  1273  000E04  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1274  000E06  0E06               	movlw	high STR_9
  1275  000E08  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1276  000E0A  0E80               	movlw	128
  1277  000E0C  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1278  000E0E  0E00               	movlw	0
  1279  000E10  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1280  000E12  EC93  F007         	call	_print_message_onLCD	;wreg free
  1281                           
  1282                           ;main.c: 266: attempt++;
  1283  000E16  2A44               	incf	_attempt,f,c
  1284                           
  1285                           ;main.c: 267: } else {
  1286  000E18  D017               	goto	l2556
  1287  000E1A                     l2542:
  1288  000E1A  FFFF               	dw	65535	; assembler added errata NOP
  1289                           
  1290                           ;main.c: 268: attempt = 1;
  1291  000E1C  0E01               	movlw	1
  1292  000E1E  6E44               	movwf	_attempt,c
  1293                           
  1294                           ;main.c: 269: lvl++;
  1295  000E20  0100               	movlb	0	; () banked
  1296  000E22  2BA4               	incf	_lvl& (0+255),f,b
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 270: if (lvl == 3) {
  1300  000E24  0E03               	movlw	3
  1301  000E26  19A4               	xorwf	_lvl& (0+255),w,b
  1302  000E28  A4D8               	btfss	status,2,c
  1303  000E2A  D003               	goto	l2554
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;main.c: 271: game_won();
  1307  000E2C  ECF8  F005         	call	_game_won	;wreg free
  1308  000E30  D023               	goto	l196
  1309  000E32                     l2554:
  1310  000E32  FFFF               	dw	65535	; assembler added errata NOP
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 274: print_message_onLCD("Sig. nivel", 128, 0);
  1314  000E34  0E4A               	movlw	low STR_10
  1315  000E36  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1316  000E38  0E06               	movlw	high STR_10
  1317  000E3A  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1318  000E3C  0E80               	movlw	128
  1319  000E3E  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1320  000E40  0E00               	movlw	0
  1321  000E42  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1322  000E44  EC93  F007         	call	_print_message_onLCD	;wreg free
  1323  000E48                     l2556:
  1324  000E48  FFFF               	dw	65535	; assembler added errata NOP
  1325                           
  1326                           ;main.c: 275: };main.c: 276: };main.c: 277: clear_vec(&ans);
  1327  000E4A  0EA5               	movlw	low _ans
  1328  000E4C  6E39               	movwf	clear_vec@vec,c
  1329  000E4E  0E00               	movlw	high _ans
  1330  000E50  6E3A               	movwf	clear_vec@vec+1,c
  1331  000E52  ECCE  F009         	call	_clear_vec	;wreg free
  1332                           
  1333                           ;main.c: 278: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1334  000E56  0E08               	movlw	8
  1335  000E58  0100               	movlb	0	; () banked
  1336  000E5A  6F87               	movwf	(??_win_protocol+1)& (0+255),b
  1337  000E5C  0E9E               	movlw	158
  1338  000E5E  6F86               	movwf	??_win_protocol& (0+255),b
  1339  000E60  0E4B               	movlw	75
  1340  000E62                     u1707:
  1341  000E62  FFFF               	dw	65535	; errata NOP
  1342  000E64  2EE8               	decfsz	wreg,f,c
  1343  000E66  D7FD               	bra	u1707
  1344  000E68  2F86               	decfsz	??_win_protocol& (0+255),f,b
  1345  000E6A  D7FB               	bra	u1707
  1346  000E6C  2F87               	decfsz	(??_win_protocol+1)& (0+255),f,b
  1347  000E6E  D7F9               	bra	u1707
  1348  000E70  D000               	nop2	
  1349  000E72  F000               	nop	
  1350                           
  1351                           ;main.c: 279: clean_screen();
  1352  000E74  ECF4  F00A         	call	_clean_screen	;wreg free
  1353  000E78                     l196:
  1354  000E78  FFFF               	dw	65535	; assembler added errata NOP
  1355  000E7A  0012               	return		;funcret
  1356  000E7C  FFFF               	dw	65535	; errata NOP
  1357  000E7E                     __end_of_win_protocol:
  1358                           	opt callstack 0
  1359                           
  1360 ;; *************** function _game_won *****************
  1361 ;; Defined at:
  1362 ;;		line 282 in file "main.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;		None
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;		None
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1376 ;;      Params:         0       0       0       0       0       0       0
  1377 ;;      Locals:         0       0       0       0       0       0       0
  1378 ;;      Temps:          0       2       0       0       0       0       0
  1379 ;;      Totals:         0       2       0       0       0       0       0
  1380 ;;Total ram usage:        2 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; Hardware stack levels required when called:    6
  1383 ;; This function calls:
  1384 ;;		_clean_screen
  1385 ;;		_print_message_onLCD
  1386 ;;		_reset_game
  1387 ;; This function is called by:
  1388 ;;		_win_protocol
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           	psect	text2
  1393  000BF0                     __ptext2:
  1394                           	opt callstack 0
  1395  000BF0                     _game_won:
  1396                           	opt callstack 0
  1397  000BF0  FFFF               	dw	65535	; assembler added errata NOP
  1398                           
  1399                           ;main.c: 283: clean_screen();
  1400                           
  1401                           ;incstack = 0
  1402  000BF2  ECF4  F00A         	call	_clean_screen	;wreg free
  1403                           
  1404                           ;main.c: 284: print_message_onLCD("¡¡Has", 128, 0);
  1405  000BF6  0EA2               	movlw	low STR_11
  1406  000BF8  0100               	movlb	0	; () banked
  1407  000BFA  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1408  000BFC  0E06               	movlw	high STR_11
  1409  000BFE  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1410  000C00  0E80               	movlw	128
  1411  000C02  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1412  000C04  0E00               	movlw	0
  1413  000C06  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1414  000C08  EC93  F007         	call	_print_message_onLCD	;wreg free
  1415                           
  1416                           ;main.c: 285: print_message_onLCD("Ganado!!", 192, 0);
  1417  000C0C  0E73               	movlw	low STR_12
  1418  000C0E  0100               	movlb	0	; () banked
  1419  000C10  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1420  000C12  0E06               	movlw	high STR_12
  1421  000C14  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1422  000C16  0EC0               	movlw	192
  1423  000C18  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1424  000C1A  0E00               	movlw	0
  1425  000C1C  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1426  000C1E  EC93  F007         	call	_print_message_onLCD	;wreg free
  1427                           
  1428                           ;main.c: 286: reset_game();
  1429  000C22  ECB9  F00A         	call	_reset_game	;wreg free
  1430                           
  1431                           ;main.c: 287: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1432  000C26  0E08               	movlw	8
  1433  000C28  0100               	movlb	0	; () banked
  1434  000C2A  6F85               	movwf	(??_game_won+1)& (0+255),b
  1435  000C2C  0E9E               	movlw	158
  1436  000C2E  6F84               	movwf	??_game_won& (0+255),b
  1437  000C30  0E4B               	movlw	75
  1438  000C32                     u1717:
  1439  000C32  FFFF               	dw	65535	; errata NOP
  1440  000C34  2EE8               	decfsz	wreg,f,c
  1441  000C36  D7FD               	bra	u1717
  1442  000C38  2F84               	decfsz	??_game_won& (0+255),f,b
  1443  000C3A  D7FB               	bra	u1717
  1444  000C3C  2F85               	decfsz	(??_game_won+1)& (0+255),f,b
  1445  000C3E  D7F9               	bra	u1717
  1446  000C40  D000               	nop2	
  1447  000C42  F000               	nop	
  1448                           
  1449                           ;main.c: 288: clean_screen();
  1450  000C44  ECF4  F00A         	call	_clean_screen	;wreg free
  1451                           
  1452                           ;main.c: 289: print_message_onLCD("Juego", 128, 0);
  1453  000C48  0E9C               	movlw	low STR_13
  1454  000C4A  0100               	movlb	0	; () banked
  1455  000C4C  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1456  000C4E  0E06               	movlw	high STR_13
  1457  000C50  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1458  000C52  0E80               	movlw	128
  1459  000C54  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1460  000C56  0E00               	movlw	0
  1461  000C58  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1462  000C5A  EC93  F007         	call	_print_message_onLCD	;wreg free
  1463                           
  1464                           ;main.c: 290: print_message_onLCD("Terminado", 192, 0);
  1465  000C5E  0E5F               	movlw	low STR_14
  1466  000C60  0100               	movlb	0	; () banked
  1467  000C62  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1468  000C64  0E06               	movlw	high STR_14
  1469  000C66  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1470  000C68  0EC0               	movlw	192
  1471  000C6A  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1472  000C6C  0E00               	movlw	0
  1473  000C6E  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1474  000C70  EC93  F007         	call	_print_message_onLCD	;wreg free
  1475                           
  1476                           ;main.c: 291: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1477  000C74  0E08               	movlw	8
  1478  000C76  0100               	movlb	0	; () banked
  1479  000C78  6F85               	movwf	(??_game_won+1)& (0+255),b
  1480  000C7A  0E9E               	movlw	158
  1481  000C7C  6F84               	movwf	??_game_won& (0+255),b
  1482  000C7E  0E4B               	movlw	75
  1483  000C80                     u1727:
  1484  000C80  FFFF               	dw	65535	; errata NOP
  1485  000C82  2EE8               	decfsz	wreg,f,c
  1486  000C84  D7FD               	bra	u1727
  1487  000C86  2F84               	decfsz	??_game_won& (0+255),f,b
  1488  000C88  D7FB               	bra	u1727
  1489  000C8A  2F85               	decfsz	(??_game_won+1)& (0+255),f,b
  1490  000C8C  D7F9               	bra	u1727
  1491  000C8E  D000               	nop2	
  1492  000C90  F000               	nop	
  1493                           
  1494                           ;main.c: 292: clean_screen();
  1495  000C92  ECF4  F00A         	call	_clean_screen	;wreg free
  1496                           
  1497                           ;main.c: 293: print_message_onLCD("Iniciando", 128, 0);
  1498  000C96  0E69               	movlw	low STR_15
  1499  000C98  0100               	movlb	0	; () banked
  1500  000C9A  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1501  000C9C  0E06               	movlw	high STR_15
  1502  000C9E  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1503  000CA0  0E80               	movlw	128
  1504  000CA2  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1505  000CA4  0E00               	movlw	0
  1506  000CA6  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1507  000CA8  EC93  F007         	call	_print_message_onLCD	;wreg free
  1508                           
  1509                           ;main.c: 294: print_message_onLCD("de nuevo", 192, 0);
  1510  000CAC  0E85               	movlw	low STR_16
  1511  000CAE  0100               	movlb	0	; () banked
  1512  000CB0  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1513  000CB2  0E06               	movlw	high STR_16
  1514  000CB4  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1515  000CB6  0EC0               	movlw	192
  1516  000CB8  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1517  000CBA  0E00               	movlw	0
  1518  000CBC  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1519  000CBE  EC93  F007         	call	_print_message_onLCD	;wreg free
  1520                           
  1521                           ;main.c: 295: _delay((unsigned long)((5000)*(4000000/4000.0)));
  1522  000CC2  0E14               	movlw	20
  1523  000CC4  0100               	movlb	0	; () banked
  1524  000CC6  6F85               	movwf	(??_game_won+1)& (0+255),b
  1525  000CC8  0E0A               	movlw	10
  1526  000CCA  6F84               	movwf	??_game_won& (0+255),b
  1527  000CCC  0E3F               	movlw	63
  1528  000CCE                     u1737:
  1529  000CCE  FFFF               	dw	65535	; errata NOP
  1530  000CD0  2EE8               	decfsz	wreg,f,c
  1531  000CD2  D7FD               	bra	u1737
  1532  000CD4  2F84               	decfsz	??_game_won& (0+255),f,b
  1533  000CD6  D7FB               	bra	u1737
  1534  000CD8  2F85               	decfsz	(??_game_won+1)& (0+255),f,b
  1535  000CDA  D7F9               	bra	u1737
  1536  000CDC  D000               	nop2	
  1537  000CDE  F000               	nop	
  1538                           
  1539                           ;main.c: 296: clean_screen();
  1540  000CE0  ECF4  F00A         	call	_clean_screen	;wreg free
  1541  000CE4  0012               	return		;funcret
  1542  000CE6  FFFF               	dw	65535	; errata NOP
  1543  000CE8                     __end_of_game_won:
  1544                           	opt callstack 0
  1545                           
  1546 ;; *************** function _srand *****************
  1547 ;; Defined at:
  1548 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  x               2   56[COMRAM] unsigned int 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		status,2
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1562 ;;      Params:         2       0       0       0       0       0       0
  1563 ;;      Locals:         0       0       0       0       0       0       0
  1564 ;;      Temps:          0       0       0       0       0       0       0
  1565 ;;      Totals:         2       0       0       0       0       0       0
  1566 ;;Total ram usage:        2 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    4
  1569 ;; This function calls:
  1570 ;;		Nothing
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text3
  1577  001676                     __ptext3:
  1578                           	opt callstack 0
  1579  001676                     _srand:
  1580                           	opt callstack 0
  1581  001676  FFFF               	dw	65535	; assembler added errata NOP
  1582                           
  1583                           ;incstack = 0
  1584  001678  C039  F040         	movff	srand@x,_randx
  1585  00167C  C03A  F041         	movff	srand@x+1,_randx+1
  1586  001680  6A42               	clrf	_randx+2,c
  1587  001682  6A43               	clrf	_randx+3,c
  1588  001684  0012               	return		;funcret
  1589  001686  FFFF               	dw	65535	; errata NOP
  1590  001688                     __end_of_srand:
  1591                           	opt callstack 0
  1592                           
  1593 ;; *************** function _loss_protocol *****************
  1594 ;; Defined at:
  1595 ;;		line 299 in file "main.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1609 ;;      Params:         0       0       0       0       0       0       0
  1610 ;;      Locals:         0       0       0       0       0       0       0
  1611 ;;      Temps:          0       2       0       0       0       0       0
  1612 ;;      Totals:         0       2       0       0       0       0       0
  1613 ;;Total ram usage:        2 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    6
  1616 ;; This function calls:
  1617 ;;		_clean_screen
  1618 ;;		_print_message_onLCD
  1619 ;;		_reset_game
  1620 ;; This function is called by:
  1621 ;;		_main
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text4
  1626  000CE8                     __ptext4:
  1627                           	opt callstack 0
  1628  000CE8                     _loss_protocol:
  1629                           	opt callstack 0
  1630  000CE8  FFFF               	dw	65535	; assembler added errata NOP
  1631                           
  1632                           ;main.c: 300: print_message_onLCD("Perdiste", 128, 0);
  1633                           
  1634                           ;incstack = 0
  1635  000CEA  0E7C               	movlw	low STR_17
  1636  000CEC  0100               	movlb	0	; () banked
  1637  000CEE  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1638  000CF0  0E06               	movlw	high STR_17
  1639  000CF2  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1640  000CF4  0E80               	movlw	128
  1641  000CF6  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1642  000CF8  0E00               	movlw	0
  1643  000CFA  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1644  000CFC  EC93  F007         	call	_print_message_onLCD	;wreg free
  1645                           
  1646                           ;main.c: 301: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1647  000D00  0E04               	movlw	4
  1648  000D02  0100               	movlb	0	; () banked
  1649  000D04  6F85               	movwf	(??_loss_protocol+1)& (0+255),b
  1650  000D06  0ECF               	movlw	207
  1651  000D08  6F84               	movwf	??_loss_protocol& (0+255),b
  1652  000D0A  0EA5               	movlw	165
  1653  000D0C                     u1747:
  1654  000D0C  FFFF               	dw	65535	; errata NOP
  1655  000D0E  2EE8               	decfsz	wreg,f,c
  1656  000D10  D7FD               	bra	u1747
  1657  000D12  2F84               	decfsz	??_loss_protocol& (0+255),f,b
  1658  000D14  D7FB               	bra	u1747
  1659  000D16  2F85               	decfsz	(??_loss_protocol+1)& (0+255),f,b
  1660  000D18  D7F9               	bra	u1747
  1661  000D1A  F000               	nop	
  1662                           
  1663                           ;main.c: 302: clean_screen();
  1664  000D1C  ECF4  F00A         	call	_clean_screen	;wreg free
  1665                           
  1666                           ;main.c: 304: print_message_onLCD(nums, 128, 0);
  1667  000D20  0EAF               	movlw	low _nums
  1668  000D22  0100               	movlb	0	; () banked
  1669  000D24  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1670  000D26  0E00               	movlw	high _nums
  1671  000D28  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1672  000D2A  0E80               	movlw	128
  1673  000D2C  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1674  000D2E  0E00               	movlw	0
  1675  000D30  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1676  000D32  EC93  F007         	call	_print_message_onLCD	;wreg free
  1677                           
  1678                           ;main.c: 305: print_message_onLCD(ans, 192, 0);
  1679  000D36  0EA5               	movlw	low _ans
  1680  000D38  0100               	movlb	0	; () banked
  1681  000D3A  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1682  000D3C  0E00               	movlw	high _ans
  1683  000D3E  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1684  000D40  0EC0               	movlw	192
  1685  000D42  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1686  000D44  0E00               	movlw	0
  1687  000D46  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1688  000D48  EC93  F007         	call	_print_message_onLCD	;wreg free
  1689                           
  1690                           ;main.c: 306: _delay((unsigned long)((3000)*(4000000/4000.0)));
  1691  000D4C  0E0C               	movlw	12
  1692  000D4E  0100               	movlb	0	; () banked
  1693  000D50  6F85               	movwf	(??_loss_protocol+1)& (0+255),b
  1694  000D52  0E6C               	movlw	108
  1695  000D54  6F84               	movwf	??_loss_protocol& (0+255),b
  1696  000D56  0EF2               	movlw	242
  1697  000D58                     u1757:
  1698  000D58  FFFF               	dw	65535	; errata NOP
  1699  000D5A  2EE8               	decfsz	wreg,f,c
  1700  000D5C  D7FD               	bra	u1757
  1701  000D5E  2F84               	decfsz	??_loss_protocol& (0+255),f,b
  1702  000D60  D7FB               	bra	u1757
  1703  000D62  2F85               	decfsz	(??_loss_protocol+1)& (0+255),f,b
  1704  000D64  D7F9               	bra	u1757
  1705  000D66  D000               	nop2	
  1706  000D68  F000               	nop	
  1707                           
  1708                           ;main.c: 307: clean_screen();
  1709  000D6A  ECF4  F00A         	call	_clean_screen	;wreg free
  1710                           
  1711                           ;main.c: 309: print_message_onLCD("Reiniciando", 128, 0);
  1712  000D6E  0E3E               	movlw	low STR_18
  1713  000D70  0100               	movlb	0	; () banked
  1714  000D72  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1715  000D74  0E06               	movlw	high STR_18
  1716  000D76  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1717  000D78  0E80               	movlw	128
  1718  000D7A  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1719  000D7C  0E00               	movlw	0
  1720  000D7E  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1721  000D80  EC93  F007         	call	_print_message_onLCD	;wreg free
  1722                           
  1723                           ;main.c: 310: print_message_onLCD("Juego", 192, 0);
  1724  000D84  0E9C               	movlw	low STR_13
  1725  000D86  0100               	movlb	0	; () banked
  1726  000D88  6F80               	movwf	print_message_onLCD@message& (0+255),b
  1727  000D8A  0E06               	movlw	high STR_13
  1728  000D8C  6F81               	movwf	(print_message_onLCD@message+1)& (0+255),b
  1729  000D8E  0EC0               	movlw	192
  1730  000D90  6F82               	movwf	print_message_onLCD@place& (0+255),b
  1731  000D92  0E00               	movlw	0
  1732  000D94  6F83               	movwf	print_message_onLCD@space_bt& (0+255),b
  1733  000D96  EC93  F007         	call	_print_message_onLCD	;wreg free
  1734                           
  1735                           ;main.c: 311: _delay((unsigned long)((3000)*(4000000/4000.0)));
  1736  000D9A  0E0C               	movlw	12
  1737  000D9C  0100               	movlb	0	; () banked
  1738  000D9E  6F85               	movwf	(??_loss_protocol+1)& (0+255),b
  1739  000DA0  0E6C               	movlw	108
  1740  000DA2  6F84               	movwf	??_loss_protocol& (0+255),b
  1741  000DA4  0EF2               	movlw	242
  1742  000DA6                     u1767:
  1743  000DA6  FFFF               	dw	65535	; errata NOP
  1744  000DA8  2EE8               	decfsz	wreg,f,c
  1745  000DAA  D7FD               	bra	u1767
  1746  000DAC  2F84               	decfsz	??_loss_protocol& (0+255),f,b
  1747  000DAE  D7FB               	bra	u1767
  1748  000DB0  2F85               	decfsz	(??_loss_protocol+1)& (0+255),f,b
  1749  000DB2  D7F9               	bra	u1767
  1750  000DB4  D000               	nop2	
  1751  000DB6  F000               	nop	
  1752                           
  1753                           ;main.c: 313: reset_game();
  1754  000DB8  ECB9  F00A         	call	_reset_game	;wreg free
  1755                           
  1756                           ;main.c: 314: clean_screen();
  1757  000DBC  ECF4  F00A         	call	_clean_screen	;wreg free
  1758  000DC0  0012               	return		;funcret
  1759  000DC2  FFFF               	dw	65535	; errata NOP
  1760  000DC4                     __end_of_loss_protocol:
  1761                           	opt callstack 0
  1762                           
  1763 ;; *************** function _reset_game *****************
  1764 ;; Defined at:
  1765 ;;		line 237 in file "main.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      unsigned char 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1779 ;;      Params:         0       0       0       0       0       0       0
  1780 ;;      Locals:         0       0       0       0       0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0
  1782 ;;      Totals:         0       0       0       0       0       0       0
  1783 ;;Total ram usage:        0 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    5
  1786 ;; This function calls:
  1787 ;;		_clear_vec
  1788 ;; This function is called by:
  1789 ;;		_game_won
  1790 ;;		_loss_protocol
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text5
  1795  001572                     __ptext5:
  1796                           	opt callstack 0
  1797  001572                     _reset_game:
  1798                           	opt callstack 0
  1799  001572  FFFF               	dw	65535	; assembler added errata NOP
  1800                           
  1801                           ;main.c: 238: attempt = 1;
  1802                           
  1803                           ;incstack = 0
  1804  001574  0E01               	movlw	1
  1805  001576  6E44               	movwf	_attempt,c
  1806                           
  1807                           ;main.c: 239: lvl = 0;
  1808  001578  0E00               	movlw	0
  1809  00157A  0100               	movlb	0	; () banked
  1810  00157C  6FA4               	movwf	_lvl& (0+255),b
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;main.c: 240: clear_vec(&ans);
  1814  00157E  0EA5               	movlw	low _ans
  1815  001580  6E39               	movwf	clear_vec@vec,c
  1816  001582  0E00               	movlw	high _ans
  1817  001584  6E3A               	movwf	clear_vec@vec+1,c
  1818  001586  ECCE  F009         	call	_clear_vec	;wreg free
  1819                           
  1820                           ;main.c: 241: clear_vec(&nums);
  1821  00158A  0EAF               	movlw	low _nums
  1822  00158C  6E39               	movwf	clear_vec@vec,c
  1823  00158E  0E00               	movlw	high _nums
  1824  001590  6E3A               	movwf	clear_vec@vec+1,c
  1825  001592  ECCE  F009         	call	_clear_vec	;wreg free
  1826  001596  0012               	return		;funcret
  1827  001598  FFFF               	dw	65535	; errata NOP
  1828  00159A                     __end_of_reset_game:
  1829                           	opt callstack 0
  1830                           
  1831 ;; *************** function _clear_vec *****************
  1832 ;; Defined at:
  1833 ;;		line 244 in file "main.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  vec             2   56[COMRAM] PTR PTR int 
  1836 ;;		 -> ans(10), nums(10), 
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;  i               1   61[COMRAM] unsigned char 
  1839 ;;  lim             1   60[COMRAM] unsigned char 
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      void 
  1842 ;; Registers used:
  1843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1849 ;;      Params:         2       0       0       0       0       0       0
  1850 ;;      Locals:         2       0       0       0       0       0       0
  1851 ;;      Temps:          2       0       0       0       0       0       0
  1852 ;;      Totals:         6       0       0       0       0       0       0
  1853 ;;Total ram usage:        6 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    4
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_reset_game
  1860 ;;		_win_protocol
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text6
  1865  00139C                     __ptext6:
  1866                           	opt callstack 0
  1867  00139C                     _clear_vec:
  1868                           	opt callstack 0
  1869  00139C  FFFF               	dw	65535	; assembler added errata NOP
  1870                           
  1871                           ;main.c: 245: char lim = lvl_n[lvl];
  1872                           
  1873                           ;incstack = 0
  1874  00139E  0100               	movlb	0	; () banked
  1875  0013A0  51A4               	movf	_lvl& (0+255),w,b
  1876  0013A2  0D02               	mullw	2
  1877  0013A4  0EB9               	movlw	low _lvl_n
  1878  0013A6  24F3               	addwf	prodl,w,c
  1879  0013A8  6ED9               	movwf	fsr2l,c
  1880  0013AA  0E00               	movlw	high _lvl_n
  1881  0013AC  20F4               	addwfc	prodh,w,c
  1882  0013AE  6EDA               	movwf	fsr2h,c
  1883  0013B0  50DF               	movf	indf2,w,c
  1884  0013B2  6E3D               	movwf	clear_vec@lim,c
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 246: for (char i = 0; i < lim; i++) {
  1888  0013B4  0E00               	movlw	0
  1889  0013B6  6E3E               	movwf	clear_vec@i,c
  1890  0013B8  D012               	goto	l1718
  1891  0013BA                     l1714:
  1892  0013BA  FFFF               	dw	65535	; assembler added errata NOP
  1893                           
  1894                           ;main.c: 247: vec[i] = '\0';
  1895  0013BC  503E               	movf	clear_vec@i,w,c
  1896  0013BE  0D02               	mullw	2
  1897  0013C0  CFF3 F03B          	movff	prodl,??_clear_vec
  1898  0013C4  CFF4 F03C          	movff	prodh,??_clear_vec+1
  1899  0013C8  503B               	movf	??_clear_vec,w,c
  1900  0013CA  2439               	addwf	clear_vec@vec,w,c
  1901  0013CC  6ED9               	movwf	fsr2l,c
  1902  0013CE  503C               	movf	??_clear_vec+1,w,c
  1903  0013D0  203A               	addwfc	clear_vec@vec+1,w,c
  1904  0013D2  6EDA               	movwf	fsr2h,c
  1905  0013D4  0E00               	movlw	0
  1906  0013D6  6EDE               	movwf	postinc2,c
  1907  0013D8  0E00               	movlw	0
  1908  0013DA  6EDD               	movwf	postdec2,c
  1909  0013DC  2A3E               	incf	clear_vec@i,f,c
  1910  0013DE                     l1718:
  1911  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  1912  0013E0  503D               	movf	clear_vec@lim,w,c
  1913  0013E2  5C3E               	subwf	clear_vec@i,w,c
  1914  0013E4  B0D8               	btfsc	status,0,c
  1915  0013E6  0012               	return		;funcret
  1916  0013E8  FFFF               	dw	65535	; assembler added errata NOP
  1917  0013EA  D7E7               	goto	l1714
  1918  0013EC  FFFF               	dw	65535	; errata NOP
  1919  0013EE                     __end_of_clear_vec:
  1920                           	opt callstack 0
  1921                           
  1922 ;; *************** function _print_message_onLCD *****************
  1923 ;; Defined at:
  1924 ;;		line 162 in file "main.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  message         2    0[BANK0 ] PTR unsigned char 
  1927 ;;		 -> STR_20(2), STR_19(6), STR_18(12), STR_17(9), 
  1928 ;;		 -> STR_16(9), STR_15(10), STR_14(10), STR_13(6), 
  1929 ;;		 -> STR_12(9), STR_11(6), STR_10(11), STR_9(12), 
  1930 ;;		 -> STR_8(8), capture@m(16), ans(10), STR_5(10), 
  1931 ;;		 -> nums(10), STR_4(13), STR_3(12), STR_2(6), 
  1932 ;;		 -> STR_1(14), 
  1933 ;;  place           1    2[BANK0 ] unsigned char 
  1934 ;;  space_bt        1    3[BANK0 ] unsigned char 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  i               1   62[COMRAM] unsigned char 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1946 ;;      Params:         0       4       0       0       0       0       0
  1947 ;;      Locals:         1       0       0       0       0       0       0
  1948 ;;      Temps:          2       0       0       0       0       0       0
  1949 ;;      Totals:         3       4       0       0       0       0       0
  1950 ;;Total ram usage:        7 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    5
  1953 ;; This function calls:
  1954 ;;		_R_D
  1955 ;;		_R_I
  1956 ;;		_strlen
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;;		_win_protocol
  1960 ;;		_game_won
  1961 ;;		_loss_protocol
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text7
  1966  000F26                     __ptext7:
  1967                           	opt callstack 0
  1968  000F26                     _print_message_onLCD:
  1969                           	opt callstack 0
  1970  000F26  FFFF               	dw	65535	; assembler added errata NOP
  1971                           
  1972                           ;main.c: 163: if (place > 0) {
  1973                           
  1974                           ;incstack = 0
  1975  000F28  0100               	movlb	0	; () banked
  1976  000F2A  5182               	movf	print_message_onLCD@place& (0+255),w,b
  1977  000F2C  B4D8               	btfsc	status,2,c
  1978  000F2E  D003               	goto	l2364
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;main.c: 164: R_I(place);
  1982  000F30  5182               	movf	print_message_onLCD@place& (0+255),w,b
  1983  000F32  EC11  F00B         	call	_R_I
  1984  000F36                     l2364:
  1985  000F36  FFFF               	dw	65535	; assembler added errata NOP
  1986                           
  1987                           ;main.c: 165: };main.c: 166: for (char i = 0; i < strlen(message); i++) {
  1988  000F38  0E00               	movlw	0
  1989  000F3A  6E3F               	movwf	print_message_onLCD@i,c
  1990  000F3C  D024               	goto	l2374
  1991  000F3E                     l2366:
  1992  000F3E  FFFF               	dw	65535	; assembler added errata NOP
  1993                           
  1994                           ;main.c: 167: R_D(message[i]);
  1995  000F40  503F               	movf	print_message_onLCD@i,w,c
  1996  000F42  0100               	movlb	0	; () banked
  1997  000F44  2580               	addwf	print_message_onLCD@message& (0+255),w,b
  1998  000F46  6E3D               	movwf	??_print_message_onLCD& (0+255),c
  1999  000F48  0E00               	movlw	0
  2000  000F4A  2181               	addwfc	(print_message_onLCD@message+1)& (0+255),w,b
  2001  000F4C  6E3E               	movwf	(??_print_message_onLCD+1)& (0+255),c
  2002  000F4E  C03D  FFF6         	movff	??_print_message_onLCD,tblptrl
  2003  000F52  C03E  FFF7         	movff	??_print_message_onLCD+1,tblptrh
  2004  000F56  6AF8               	clrf	tblptru,c
  2005  000F58  0E05               	movlw	(high __ramtop+-1)
  2006  000F5A  64F7               	cpfsgt	tblptrh,c
  2007  000F5C  D004               	bra	u1387
  2008  000F5E  0008               	tblrd		*
  2009  000F60  FFFF               	dw	65535	; errata NOP
  2010  000F62  50F5               	movf	tablat,w,c
  2011  000F64  D005               	bra	u1380
  2012  000F66                     u1387:
  2013  000F66  CFF6 FFE9          	movff	tblptrl,fsr0l
  2014  000F6A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2015  000F6E  50EF               	movf	indf0,w,c
  2016  000F70                     u1380:
  2017  000F70  EC03  F00B         	call	_R_D
  2018                           
  2019                           ;main.c: 168: if (space_bt) {
  2020  000F74  0100               	movlb	0	; () banked
  2021  000F76  5183               	movf	print_message_onLCD@space_bt& (0+255),w,b
  2022  000F78  B4D8               	btfsc	status,2,c
  2023  000F7A  D003               	goto	l2372
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;main.c: 169: R_D(' ');
  2027  000F7C  0E20               	movlw	32
  2028  000F7E  EC03  F00B         	call	_R_D
  2029  000F82                     l2372:
  2030  000F82  FFFF               	dw	65535	; assembler added errata NOP
  2031  000F84  2A3F               	incf	print_message_onLCD@i,f,c
  2032  000F86                     l2374:
  2033  000F86  FFFF               	dw	65535	; assembler added errata NOP
  2034  000F88  C080  F039         	movff	print_message_onLCD@message,strlen@s
  2035  000F8C  C081  F03A         	movff	print_message_onLCD@message+1,strlen@s+1
  2036  000F90  EC48  F00A         	call	_strlen	;wreg free
  2037  000F94  503F               	movf	print_message_onLCD@i,w,c
  2038  000F96  6E3D               	movwf	??_print_message_onLCD& (0+255),c
  2039  000F98  6A3E               	clrf	(??_print_message_onLCD+1)& (0+255),c
  2040  000F9A  5039               	movf	?_strlen,w,c
  2041  000F9C  5C3D               	subwf	??_print_message_onLCD,w,c
  2042  000F9E  503A               	movf	?_strlen+1,w,c
  2043  000FA0  583E               	subwfb	??_print_message_onLCD+1,w,c
  2044  000FA2  B0D8               	btfsc	status,0,c
  2045  000FA4  0012               	return		;funcret
  2046  000FA6  FFFF               	dw	65535	; assembler added errata NOP
  2047  000FA8  D7CA               	goto	l2366
  2048  000FAA  FFFF               	dw	65535	; errata NOP
  2049  000FAC                     __end_of_print_message_onLCD:
  2050                           	opt callstack 0
  2051                           
  2052 ;; *************** function _strlen *****************
  2053 ;; Defined at:
  2054 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strlen.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  s               2   56[COMRAM] PTR const unsigned char 
  2057 ;;		 -> STR_20(2), STR_19(6), STR_18(12), STR_17(9), 
  2058 ;;		 -> STR_16(9), STR_15(10), STR_14(10), STR_13(6), 
  2059 ;;		 -> STR_12(9), STR_11(6), STR_10(11), STR_9(12), 
  2060 ;;		 -> STR_8(8), capture@m(16), ans(10), STR_5(10), 
  2061 ;;		 -> nums(10), STR_4(13), STR_3(12), STR_2(6), 
  2062 ;;		 -> STR_1(14), 
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;  cp              2   58[COMRAM] PTR const unsigned char 
  2065 ;;		 -> STR_20(2), STR_19(6), STR_18(12), STR_17(9), 
  2066 ;;		 -> STR_16(9), STR_15(10), STR_14(10), STR_13(6), 
  2067 ;;		 -> STR_12(9), STR_11(6), STR_10(11), STR_9(12), 
  2068 ;;		 -> STR_8(8), capture@m(16), ans(10), STR_5(10), 
  2069 ;;		 -> nums(10), STR_4(13), STR_3(12), STR_2(6), 
  2070 ;;		 -> STR_1(14), 
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  2   56[COMRAM] unsigned int 
  2073 ;; Registers used:
  2074 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2080 ;;      Params:         2       0       0       0       0       0       0
  2081 ;;      Locals:         2       0       0       0       0       0       0
  2082 ;;      Temps:          0       0       0       0       0       0       0
  2083 ;;      Totals:         4       0       0       0       0       0       0
  2084 ;;Total ram usage:        4 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    4
  2087 ;; This function calls:
  2088 ;;		Nothing
  2089 ;; This function is called by:
  2090 ;;		_print_message_onLCD
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text8
  2095  001490                     __ptext8:
  2096                           	opt callstack 0
  2097  001490                     _strlen:
  2098                           	opt callstack 0
  2099  001490  FFFF               	dw	65535	; assembler added errata NOP
  2100                           
  2101                           ;incstack = 0
  2102  001492  C039  F03B         	movff	strlen@s,strlen@cp
  2103  001496  C03A  F03C         	movff	strlen@s+1,strlen@cp+1
  2104  00149A  D003               	goto	l1704
  2105  00149C                     l1702:
  2106  00149C  FFFF               	dw	65535	; assembler added errata NOP
  2107  00149E  4A3B               	infsnz	strlen@cp,f,c
  2108  0014A0  2A3C               	incf	strlen@cp+1,f,c
  2109  0014A2                     l1704:
  2110  0014A2  FFFF               	dw	65535	; assembler added errata NOP
  2111  0014A4  C03B  FFF6         	movff	strlen@cp,tblptrl
  2112  0014A8  C03C  FFF7         	movff	strlen@cp+1,tblptrh
  2113  0014AC  6AF8               	clrf	tblptru,c
  2114  0014AE  0E05               	movlw	(high __ramtop+-1)
  2115  0014B0  64F7               	cpfsgt	tblptrh,c
  2116  0014B2  D004               	bra	u697
  2117  0014B4  0008               	tblrd		*
  2118  0014B6  FFFF               	dw	65535	; errata NOP
  2119  0014B8  50F5               	movf	tablat,w,c
  2120  0014BA  D005               	bra	u690
  2121  0014BC                     u697:
  2122  0014BC  CFF6 FFE9          	movff	tblptrl,fsr0l
  2123  0014C0  CFF7 FFEA          	movff	tblptrh,fsr0h
  2124  0014C4  50EF               	movf	indf0,w,c
  2125  0014C6                     u690:
  2126  0014C6  0900               	iorlw	0
  2127  0014C8  A4D8               	btfss	status,2,c
  2128  0014CA  D7E8               	goto	l1702
  2129  0014CC  5039               	movf	strlen@s,w,c
  2130  0014CE  5C3B               	subwf	strlen@cp,w,c
  2131  0014D0  6E39               	movwf	?_strlen,c
  2132  0014D2  503A               	movf	strlen@s+1,w,c
  2133  0014D4  583C               	subwfb	strlen@cp+1,w,c
  2134  0014D6  6E3A               	movwf	?_strlen+1,c
  2135  0014D8  0012               	return		;funcret
  2136  0014DA  FFFF               	dw	65535	; errata NOP
  2137  0014DC                     __end_of_strlen:
  2138                           	opt callstack 0
  2139                           
  2140 ;; *************** function _R_D *****************
  2141 ;; Defined at:
  2142 ;;		line 153 in file "main.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  dato            1    wreg     unsigned char 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  dato            1   56[COMRAM] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2156 ;;      Params:         0       0       0       0       0       0       0
  2157 ;;      Locals:         1       0       0       0       0       0       0
  2158 ;;      Temps:          0       0       0       0       0       0       0
  2159 ;;      Totals:         1       0       0       0       0       0       0
  2160 ;;Total ram usage:        1 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    4
  2163 ;; This function calls:
  2164 ;;		Nothing
  2165 ;; This function is called by:
  2166 ;;		_print_message_onLCD
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           	psect	text9
  2171  001606                     __ptext9:
  2172                           	opt callstack 0
  2173  001606                     _R_D:
  2174                           	opt callstack 0
  2175  001606  FFFF               	dw	65535	; assembler added errata NOP
  2176                           
  2177                           ;incstack = 0
  2178                           ;R_D@dato stored from wreg
  2179  001608  6E39               	movwf	R_D@dato,c
  2180                           
  2181                           ;main.c: 154: LC3 = 0;
  2182  00160A  968B               	bcf	3979,3,c	;volatile
  2183                           
  2184                           ;main.c: 155: LC4 = 1;
  2185  00160C  888B               	bsf	3979,4,c	;volatile
  2186                           
  2187                           ;main.c: 156: LATD = dato;
  2188  00160E  C039  FF8C         	movff	R_D@dato,3980	;volatile
  2189                           
  2190                           ;main.c: 157: LC3 = 1;
  2191  001612  868B               	bsf	3979,3,c	;volatile
  2192                           
  2193                           ;main.c: 158: _delay((unsigned long)((100)*(4000000/4000000.0)));
  2194  001614  0E19               	movlw	25
  2195  001616                     u1777:
  2196  001616  FFFF               	dw	65535	; errata NOP
  2197  001618  2EE8               	decfsz	wreg,f,c
  2198  00161A  D7FD               	bra	u1777
  2199                           
  2200                           ;main.c: 159: LC3 = 0;
  2201  00161C  968B               	bcf	3979,3,c	;volatile
  2202  00161E  0012               	return		;funcret
  2203  001620  FFFF               	dw	65535	; errata NOP
  2204  001622                     __end_of_R_D:
  2205                           	opt callstack 0
  2206                           
  2207 ;; *************** function _clean_screen *****************
  2208 ;; Defined at:
  2209 ;;		line 323 in file "main.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;		None
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;		None
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, status,2, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2223 ;;      Params:         0       0       0       0       0       0       0
  2224 ;;      Locals:         0       0       0       0       0       0       0
  2225 ;;      Temps:          1       0       0       0       0       0       0
  2226 ;;      Totals:         1       0       0       0       0       0       0
  2227 ;;Total ram usage:        1 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    5
  2230 ;; This function calls:
  2231 ;;		_R_I
  2232 ;; This function is called by:
  2233 ;;		_main
  2234 ;;		_win_protocol
  2235 ;;		_game_won
  2236 ;;		_loss_protocol
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text10
  2241  0015E8                     __ptext10:
  2242                           	opt callstack 0
  2243  0015E8                     _clean_screen:
  2244                           	opt callstack 0
  2245  0015E8  FFFF               	dw	65535	; assembler added errata NOP
  2246                           
  2247                           ;main.c: 324: R_I(0X01);
  2248                           
  2249                           ;incstack = 0
  2250  0015EA  0E01               	movlw	1
  2251  0015EC  EC11  F00B         	call	_R_I
  2252                           
  2253                           ;main.c: 325: _delay((unsigned long)((100)*(4000000/4000.0)));
  2254  0015F0  0E62               	movlw	98
  2255  0015F2  6E3A               	movwf	??_clean_screen& (0+255),c
  2256  0015F4  0E76               	movlw	118
  2257  0015F6                     u1787:
  2258  0015F6  FFFF               	dw	65535	; errata NOP
  2259  0015F8  2EE8               	decfsz	wreg,f,c
  2260  0015FA  D7FD               	bra	u1787
  2261  0015FC  2E3A               	decfsz	??_clean_screen& (0+255),f,c
  2262  0015FE  D7FB               	bra	u1787
  2263  001600  D000               	nop2	
  2264  001602  0012               	return		;funcret
  2265  001604  FFFF               	dw	65535	; errata NOP
  2266  001606                     __end_of_clean_screen:
  2267                           	opt callstack 0
  2268                           
  2269 ;; *************** function _initial_config *****************
  2270 ;; Defined at:
  2271 ;;		line 107 in file "main.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;		None
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;		None
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  1    wreg      void 
  2278 ;; Registers used:
  2279 ;;		wreg, status,2
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2285 ;;      Params:         0       0       0       0       0       0       0
  2286 ;;      Locals:         0       0       0       0       0       0       0
  2287 ;;      Temps:          0       0       0       0       0       0       0
  2288 ;;      Totals:         0       0       0       0       0       0       0
  2289 ;;Total ram usage:        0 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    4
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_main
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           	psect	text11
  2300  0015C2                     __ptext11:
  2301                           	opt callstack 0
  2302  0015C2                     _initial_config:
  2303                           	opt callstack 0
  2304  0015C2  FFFF               	dw	65535	; assembler added errata NOP
  2305                           
  2306                           ;main.c: 108: TRISB = 0B11110000;
  2307                           
  2308                           ;incstack = 0
  2309  0015C4  0EF0               	movlw	240
  2310  0015C6  6E93               	movwf	3987,c	;volatile
  2311                           
  2312                           ;main.c: 109: TRISC = 0B10000000;
  2313  0015C8  0E80               	movlw	128
  2314  0015CA  6E94               	movwf	3988,c	;volatile
  2315                           
  2316                           ;main.c: 110: TRISD = 0X00;
  2317  0015CC  0E00               	movlw	0
  2318  0015CE  6E95               	movwf	3989,c	;volatile
  2319                           
  2320                           ;main.c: 113: LATB = 0XFF;
  2321  0015D0  688A               	setf	3978,c	;volatile
  2322                           
  2323                           ;main.c: 114: LATC = 0;
  2324  0015D2  0E00               	movlw	0
  2325  0015D4  6E8B               	movwf	3979,c	;volatile
  2326                           
  2327                           ;main.c: 115: LATD = 0;
  2328  0015D6  0E00               	movlw	0
  2329  0015D8  6E8C               	movwf	3980,c	;volatile
  2330                           
  2331                           ;main.c: 116: PORTB = 0XFF;
  2332  0015DA  6881               	setf	3969,c	;volatile
  2333                           
  2334                           ;main.c: 117: PORTC = 0;
  2335  0015DC  0E00               	movlw	0
  2336  0015DE  6E82               	movwf	3970,c	;volatile
  2337                           
  2338                           ;main.c: 118: PORTD = 0;
  2339  0015E0  0E00               	movlw	0
  2340  0015E2  6E83               	movwf	3971,c	;volatile
  2341  0015E4  0012               	return		;funcret
  2342  0015E6  FFFF               	dw	65535	; errata NOP
  2343  0015E8                     __end_of_initial_config:
  2344                           	opt callstack 0
  2345                           
  2346 ;; *************** function _init_serial_com *****************
  2347 ;; Defined at:
  2348 ;;		line 132 in file "main.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, status,2
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2362 ;;      Params:         0       0       0       0       0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0
  2365 ;;      Totals:         0       0       0       0       0       0       0
  2366 ;;Total ram usage:        0 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    4
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text12
  2377  00159A                     __ptext12:
  2378                           	opt callstack 0
  2379  00159A                     _init_serial_com:
  2380                           	opt callstack 0
  2381  00159A  FFFF               	dw	65535	; assembler added errata NOP
  2382                           
  2383                           ;main.c: 133: INTCON = 0B11001000;
  2384                           
  2385                           ;incstack = 0
  2386  00159C  0EC8               	movlw	200
  2387  00159E  6EF2               	movwf	4082,c	;volatile
  2388                           
  2389                           ;main.c: 134: INTCON2 = 0B00000001;
  2390  0015A0  0E01               	movlw	1
  2391  0015A2  6EF1               	movwf	4081,c	;volatile
  2392                           
  2393                           ;main.c: 135: RCONbits.IPEN = 0;
  2394  0015A4  9ED0               	bcf	4048,7,c	;volatile
  2395                           
  2396                           ;main.c: 136: SPBRG = 25;
  2397  0015A6  0E19               	movlw	25
  2398  0015A8  6EAF               	movwf	4015,c	;volatile
  2399                           
  2400                           ;main.c: 137: PIE1 = 0B00100000;
  2401  0015AA  0E20               	movlw	32
  2402  0015AC  6E9D               	movwf	3997,c	;volatile
  2403                           
  2404                           ;main.c: 138: PIR1 = 0B00010000;
  2405  0015AE  0E10               	movlw	16
  2406  0015B0  6E9E               	movwf	3998,c	;volatile
  2407                           
  2408                           ;main.c: 139: IPR1 = 0B00100000;
  2409  0015B2  0E20               	movlw	32
  2410  0015B4  6E9F               	movwf	3999,c	;volatile
  2411                           
  2412                           ;main.c: 140: TXSTA = 0B00100110;
  2413  0015B6  0E26               	movlw	38
  2414  0015B8  6EAC               	movwf	4012,c	;volatile
  2415                           
  2416                           ;main.c: 141: RCSTA = 0B10010000;
  2417  0015BA  0E90               	movlw	144
  2418  0015BC  6EAB               	movwf	4011,c	;volatile
  2419  0015BE  0012               	return		;funcret
  2420  0015C0  FFFF               	dw	65535	; errata NOP
  2421  0015C2                     __end_of_init_serial_com:
  2422                           	opt callstack 0
  2423                           
  2424 ;; *************** function _init_lcd *****************
  2425 ;; Defined at:
  2426 ;;		line 121 in file "main.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;		None
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;		None
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		wreg, status,2, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2440 ;;      Params:         0       0       0       0       0       0       0
  2441 ;;      Locals:         0       0       0       0       0       0       0
  2442 ;;      Temps:          1       0       0       0       0       0       0
  2443 ;;      Totals:         1       0       0       0       0       0       0
  2444 ;;Total ram usage:        1 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    5
  2447 ;; This function calls:
  2448 ;;		_R_I
  2449 ;; This function is called by:
  2450 ;;		_main
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           	psect	text13
  2455  0012EC                     __ptext13:
  2456                           	opt callstack 0
  2457  0012EC                     _init_lcd:
  2458                           	opt callstack 0
  2459  0012EC  FFFF               	dw	65535	; assembler added errata NOP
  2460                           
  2461                           ;main.c: 122: _delay((unsigned long)((20)*(4000000/4000.0)));
  2462                           
  2463                           ;incstack = 0
  2464  0012EE  0E14               	movlw	20
  2465  0012F0  6E3A               	movwf	??_init_lcd& (0+255),c
  2466  0012F2  0E7D               	movlw	125
  2467  0012F4                     u1797:
  2468  0012F4  FFFF               	dw	65535	; errata NOP
  2469  0012F6  2EE8               	decfsz	wreg,f,c
  2470  0012F8  D7FD               	bra	u1797
  2471  0012FA  2E3A               	decfsz	??_init_lcd& (0+255),f,c
  2472  0012FC  D7FB               	bra	u1797
  2473  0012FE  D000               	nop2	
  2474                           
  2475                           ;main.c: 123: R_I(0X30);
  2476  001300  0E30               	movlw	48
  2477  001302  EC11  F00B         	call	_R_I
  2478                           
  2479                           ;main.c: 124: _delay((unsigned long)((5)*(4000000/4000.0)));
  2480  001306  0E05               	movlw	5
  2481  001308  6E3A               	movwf	??_init_lcd& (0+255),c
  2482  00130A  0EDF               	movlw	223
  2483  00130C                     u1807:
  2484  00130C  FFFF               	dw	65535	; errata NOP
  2485  00130E  2EE8               	decfsz	wreg,f,c
  2486  001310  D7FD               	bra	u1807
  2487  001312  2E3A               	decfsz	??_init_lcd& (0+255),f,c
  2488  001314  D7FB               	bra	u1807
  2489                           
  2490                           ;main.c: 125: R_I(0X30);
  2491  001316  0E30               	movlw	48
  2492  001318  EC11  F00B         	call	_R_I
  2493                           
  2494                           ;main.c: 126: R_I(0X3C);
  2495  00131C  0E3C               	movlw	60
  2496  00131E  EC11  F00B         	call	_R_I
  2497                           
  2498                           ;main.c: 127: R_I(0X0C);
  2499  001322  0E0C               	movlw	12
  2500  001324  EC11  F00B         	call	_R_I
  2501                           
  2502                           ;main.c: 128: R_I(0X01);
  2503  001328  0E01               	movlw	1
  2504  00132A  EC11  F00B         	call	_R_I
  2505                           
  2506                           ;main.c: 129: _delay((unsigned long)((20)*(4000000/4000.0)));
  2507  00132E  0E14               	movlw	20
  2508  001330  6E3A               	movwf	??_init_lcd& (0+255),c
  2509  001332  0E7D               	movlw	125
  2510  001334                     u1817:
  2511  001334  FFFF               	dw	65535	; errata NOP
  2512  001336  2EE8               	decfsz	wreg,f,c
  2513  001338  D7FD               	bra	u1817
  2514  00133A  2E3A               	decfsz	??_init_lcd& (0+255),f,c
  2515  00133C  D7FB               	bra	u1817
  2516  00133E  D000               	nop2	
  2517  001340  0012               	return		;funcret
  2518  001342  FFFF               	dw	65535	; errata NOP
  2519  001344                     __end_of_init_lcd:
  2520                           	opt callstack 0
  2521                           
  2522 ;; *************** function _R_I *****************
  2523 ;; Defined at:
  2524 ;;		line 144 in file "main.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  dato            1    wreg     unsigned char 
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  dato            1   56[COMRAM] unsigned char 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2538 ;;      Params:         0       0       0       0       0       0       0
  2539 ;;      Locals:         1       0       0       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0       0       0
  2541 ;;      Totals:         1       0       0       0       0       0       0
  2542 ;;Total ram usage:        1 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    4
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_main
  2549 ;;		_init_lcd
  2550 ;;		_print_message_onLCD
  2551 ;;		_clean_screen
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text14
  2556  001622                     __ptext14:
  2557                           	opt callstack 0
  2558  001622                     _R_I:
  2559                           	opt callstack 0
  2560  001622  FFFF               	dw	65535	; assembler added errata NOP
  2561                           
  2562                           ;incstack = 0
  2563                           ;R_I@dato stored from wreg
  2564  001624  6E39               	movwf	R_I@dato,c
  2565                           
  2566                           ;main.c: 145: LC3 = 0;
  2567  001626  968B               	bcf	3979,3,c	;volatile
  2568                           
  2569                           ;main.c: 146: LC4 = 0;
  2570  001628  988B               	bcf	3979,4,c	;volatile
  2571                           
  2572                           ;main.c: 147: LATD = dato;
  2573  00162A  C039  FF8C         	movff	R_I@dato,3980	;volatile
  2574                           
  2575                           ;main.c: 148: LC3 = 1;
  2576  00162E  868B               	bsf	3979,3,c	;volatile
  2577                           
  2578                           ;main.c: 149: _delay((unsigned long)((100)*(4000000/4000000.0)));
  2579  001630  0E19               	movlw	25
  2580  001632                     u1827:
  2581  001632  FFFF               	dw	65535	; errata NOP
  2582  001634  2EE8               	decfsz	wreg,f,c
  2583  001636  D7FD               	bra	u1827
  2584                           
  2585                           ;main.c: 150: LC3 = 0;
  2586  001638  968B               	bcf	3979,3,c	;volatile
  2587  00163A  0012               	return		;funcret
  2588  00163C  FFFF               	dw	65535	; errata NOP
  2589  00163E                     __end_of_R_I:
  2590                           	opt callstack 0
  2591                           
  2592 ;; *************** function _get_rand_num *****************
  2593 ;; Defined at:
  2594 ;;		line 230 in file "main.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  from            1    wreg     unsigned char 
  2597 ;;  to              1   19[BANK0 ] unsigned char 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  from            1   24[BANK0 ] unsigned char 
  2600 ;;  num             2   22[BANK0 ] int 
  2601 ;;  r               1   25[BANK0 ] unsigned char [1]
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      unsigned char 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2611 ;;      Params:         0       1       0       0       0       0       0
  2612 ;;      Locals:         0       4       0       0       0       0       0
  2613 ;;      Temps:          0       2       0       0       0       0       0
  2614 ;;      Totals:         0       7       0       0       0       0       0
  2615 ;;Total ram usage:        7 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    6
  2618 ;; This function calls:
  2619 ;;		___awmod
  2620 ;;		_rand
  2621 ;;		_sprintf
  2622 ;; This function is called by:
  2623 ;;		_main
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text15
  2628  0010B2                     __ptext15:
  2629                           	opt callstack 0
  2630  0010B2                     _get_rand_num:
  2631                           	opt callstack 0
  2632  0010B2  FFFF               	dw	65535	; assembler added errata NOP
  2633                           
  2634                           ;incstack = 0
  2635                           ;get_rand_num@from stored from wreg
  2636  0010B4  0100               	movlb	0	; () banked
  2637  0010B6  6F98               	movwf	get_rand_num@from& (0+255),b
  2638                           
  2639                           ;main.c: 231: int num = rand() % (to-from+1) + from;
  2640  0010B8  ECA2  F009         	call	_rand	;wreg free
  2641  0010BC  C03D  F088         	movff	?_rand,___awmod@dividend
  2642  0010C0  C03E  F089         	movff	?_rand+1,___awmod@dividend+1
  2643  0010C4  0100               	movlb	0	; () banked
  2644  0010C6  5198               	movf	get_rand_num@from& (0+255),w,b
  2645  0010C8  C093  F094         	movff	get_rand_num@to,??_get_rand_num
  2646  0010CC  6B95               	clrf	(??_get_rand_num+1)& (0+255),b
  2647  0010CE  5F94               	subwf	??_get_rand_num& (0+255),f,b
  2648  0010D0  0E00               	movlw	0
  2649  0010D2  5B95               	subwfb	(??_get_rand_num+1)& (0+255),f,b
  2650  0010D4  0E01               	movlw	1
  2651  0010D6  2594               	addwf	??_get_rand_num& (0+255),w,b
  2652  0010D8  6F8A               	movwf	___awmod@divisor& (0+255),b
  2653  0010DA  0E00               	movlw	0
  2654  0010DC  2195               	addwfc	(??_get_rand_num+1)& (0+255),w,b
  2655  0010DE  6F8B               	movwf	(___awmod@divisor+1)& (0+255),b
  2656  0010E0  ECD6  F007         	call	___awmod	;wreg free
  2657  0010E4  0100               	movlb	0	; () banked
  2658  0010E6  5198               	movf	get_rand_num@from& (0+255),w,b
  2659  0010E8  2588               	addwf	?___awmod& (0+255),w,b
  2660  0010EA  6F96               	movwf	get_rand_num@num& (0+255),b
  2661  0010EC  0E00               	movlw	0
  2662  0010EE  2189               	addwfc	(?___awmod+1)& (0+255),w,b
  2663  0010F0  6F97               	movwf	(get_rand_num@num+1)& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 232: char r[1];;main.c: 233: sprintf(r, "%i", num);
  2667  0010F2  0E99               	movlw	low get_rand_num@r
  2668  0010F4  6F85               	movwf	sprintf@sp& (0+255),b
  2669  0010F6  0E00               	movlw	high get_rand_num@r
  2670  0010F8  6F86               	movwf	(sprintf@sp+1)& (0+255),b
  2671  0010FA  0EAB               	movlw	low STR_7
  2672  0010FC  6F87               	movwf	sprintf@f& (0+255),b
  2673  0010FE  0E06               	movlw	high STR_7
  2674  001100  6F88               	movwf	(sprintf@f+1)& (0+255),b
  2675  001102  C096  F089         	movff	get_rand_num@num,?_sprintf+4
  2676  001106  C097  F08A         	movff	get_rand_num@num+1,?_sprintf+5
  2677  00110A  EC64  F004         	call	_sprintf	;wreg free
  2678                           
  2679                           ;main.c: 234: return r[0];
  2680  00110E  0100               	movlb	0	; () banked
  2681  001110  5199               	movf	get_rand_num@r& (0+255),w,b
  2682                           
  2683                           ; BSR set to: 0
  2684  001112  0012               	return		;funcret
  2685  001114  FFFF               	dw	65535	; errata NOP
  2686  001116                     __end_of_get_rand_num:
  2687                           	opt callstack 0
  2688                           
  2689 ;; *************** function _sprintf *****************
  2690 ;; Defined at:
  2691 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;  sp              2    5[BANK0 ] PTR unsigned char 
  2694 ;;		 -> get_rand_num@r(1), capture@m(16), 
  2695 ;;  f               2    7[BANK0 ] PTR const unsigned char 
  2696 ;;		 -> STR_7(3), STR_6(3), 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  tmpval          4    0        struct .
  2699 ;;  cp              3    0        PTR const unsigned char 
  2700 ;;  val             2   16[BANK0 ] unsigned int 
  2701 ;;  ap              2   14[BANK0 ] PTR void [1]
  2702 ;;		 -> ?_sprintf(2), 
  2703 ;;  len             2    0        unsigned int 
  2704 ;;  c               1   18[BANK0 ] unsigned char 
  2705 ;;  prec            1   13[BANK0 ] char 
  2706 ;;  flag            1   12[BANK0 ] unsigned char 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  2    5[BANK0 ] int 
  2709 ;; Registers used:
  2710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2716 ;;      Params:         0       6       0       0       0       0       0
  2717 ;;      Locals:         0       7       0       0       0       0       0
  2718 ;;      Temps:          0       1       0       0       0       0       0
  2719 ;;      Totals:         0      14       0       0       0       0       0
  2720 ;;Total ram usage:       14 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    5
  2723 ;; This function calls:
  2724 ;;		___lwdiv
  2725 ;;		___lwmod
  2726 ;; This function is called by:
  2727 ;;		_get_rand_num
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text16
  2732  0008C8                     __ptext16:
  2733                           	opt callstack 0
  2734  0008C8                     _sprintf:
  2735                           	opt callstack 0
  2736  0008C8  FFFF               	dw	65535	; assembler added errata NOP
  2737                           
  2738                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;incstack = 0
  2742  0008CA  0E89               	movlw	low (?_sprintf+4)
  2743  0008CC  0100               	movlb	0	; () banked
  2744  0008CE  6F8E               	movwf	sprintf@ap& (0+255),b
  2745  0008D0  0E00               	movlw	high (?_sprintf+4)
  2746  0008D2  6F8F               	movwf	(sprintf@ap+1)& (0+255),b
  2747                           
  2748                           ;doprnt.c: 548: while((c = *f++)) {
  2749  0008D4  D0AD               	goto	u1510
  2750  0008D6                     l2404:
  2751  0008D6  FFFF               	dw	65535	; assembler added errata NOP
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;doprnt.c: 550: if(c != '%')
  2755  0008D8  0E25               	movlw	37
  2756  0008DA  1992               	xorwf	sprintf@c& (0+255),w,b
  2757  0008DC  B4D8               	btfsc	status,2,c
  2758  0008DE  D00A               	goto	l2410
  2759  0008E0                     u1460:
  2760  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  2764  0008E2  C085  FFD9         	movff	sprintf@sp,fsr2l
  2765  0008E6  C086  FFDA         	movff	sprintf@sp+1,fsr2h
  2766  0008EA  C092  FFDF         	movff	sprintf@c,indf2
  2767                           
  2768                           ; BSR set to: 0
  2769  0008EE  4B85               	infsnz	sprintf@sp& (0+255),f,b
  2770  0008F0  2B86               	incf	(sprintf@sp+1)& (0+255),f,b
  2771                           
  2772                           ;doprnt.c: 554: continue;
  2773  0008F2  D09E               	goto	u1510
  2774  0008F4                     l2410:
  2775  0008F4  FFFF               	dw	65535	; assembler added errata NOP
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  2779  0008F6  0E00               	movlw	0
  2780  0008F8  6F8C               	movwf	sprintf@flag& (0+255),b
  2781                           
  2782                           ;doprnt.c: 654: switch(c = *f++) {
  2783  0008FA  D00C               	goto	l2422
  2784  0008FC                     l2412:
  2785  0008FC  FFFF               	dw	65535	; assembler added errata NOP
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;doprnt.c: 818: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2789  0008FE  C08E  FFD9         	movff	sprintf@ap,fsr2l
  2790  000902  C08F  FFDA         	movff	sprintf@ap+1,fsr2h
  2791  000906  50DF               	movf	indf2,w,c
  2792  000908  6F92               	movwf	sprintf@c& (0+255),b
  2793                           
  2794                           ; BSR set to: 0
  2795  00090A  0E02               	movlw	2
  2796  00090C  278E               	addwf	sprintf@ap& (0+255),f,b
  2797  00090E  0E00               	movlw	0
  2798  000910  238F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2799  000912  D7E6               	goto	u1460
  2800  000914                     l2422:
  2801  000914  FFFF               	dw	65535	; assembler added errata NOP
  2802                           
  2803                           ; BSR set to: 0
  2804  000916  C087  FFF6         	movff	sprintf@f,tblptrl
  2805  00091A  C088  FFF7         	movff	sprintf@f+1,tblptrh
  2806  00091E  4B87               	infsnz	sprintf@f& (0+255),f,b
  2807  000920  2B88               	incf	(sprintf@f+1)& (0+255),f,b
  2808  000922                     	if	0	;tblptru may be non-zero
  2809  000922                     	endif
  2810  000922                     	if	0	;tblptru may be non-zero
  2811  000922                     	endif
  2812  000922  0008               	tblrd		*
  2813  000924  FFFF               	dw	65535	; errata NOP
  2814  000926  CFF5 F092          	movff	tablat,sprintf@c
  2815  00092A  5192               	movf	sprintf@c& (0+255),w,b
  2816                           
  2817                           ; Switch size 1, requested type "simple"
  2818                           ; Number of cases is 4, Range of values is 0 to 105
  2819                           ; switch strategies available:
  2820                           ; Name         Instructions Cycles
  2821                           ; simple_byte           13     7 (average)
  2822                           ;	Chosen strategy is simple_byte
  2823  00092C  0A00               	xorlw	0	; case 0
  2824  00092E  B4D8               	btfsc	status,2,c
  2825  000930  D08D               	goto	u1520
  2826  000932  0A63               	xorlw	99	; case 99
  2827  000934  B4D8               	btfsc	status,2,c
  2828  000936  D7E2               	goto	l2412
  2829  000938  0A07               	xorlw	7	; case 100
  2830  00093A  B4D8               	btfsc	status,2,c
  2831  00093C  D003               	goto	l2424
  2832  00093E  0A0D               	xorlw	13	; case 105
  2833  000940  A4D8               	btfss	status,2,c
  2834  000942  D7CE               	goto	u1460
  2835  000944                     l2424:
  2836  000944  FFFF               	dw	65535	; assembler added errata NOP
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2840  000946  C08E  FFD9         	movff	sprintf@ap,fsr2l
  2841  00094A  C08F  FFDA         	movff	sprintf@ap+1,fsr2h
  2842  00094E  CFDE F090          	movff	postinc2,sprintf@val
  2843  000952  CFDD F091          	movff	postdec2,sprintf@val+1
  2844                           
  2845                           ; BSR set to: 0
  2846  000956  0E02               	movlw	2
  2847  000958  278E               	addwf	sprintf@ap& (0+255),f,b
  2848  00095A  0E00               	movlw	0
  2849  00095C  238F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;doprnt.c: 1280: if((int)val < 0) {
  2853  00095E  AF91               	btfss	(sprintf@val+1)& (0+255),7,b
  2854  000960  D006               	goto	l2434
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;doprnt.c: 1281: flag |= 0x03;
  2858  000962  0E03               	movlw	3
  2859  000964  138C               	iorwf	sprintf@flag& (0+255),f,b
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;doprnt.c: 1282: val = -val;
  2863  000966  6D90               	negf	sprintf@val& (0+255),b
  2864  000968  1F91               	comf	(sprintf@val+1)& (0+255),f,b
  2865  00096A  B0D8               	btfsc	status,0,c
  2866  00096C  2B91               	incf	(sprintf@val+1)& (0+255),f,b
  2867  00096E                     l2434:
  2868  00096E  FFFF               	dw	65535	; assembler added errata NOP
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  2872  000970  0E01               	movlw	1
  2873  000972  6F92               	movwf	sprintf@c& (0+255),b
  2874  000974                     l2440:
  2875  000974  FFFF               	dw	65535	; assembler added errata NOP
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;doprnt.c: 1325: if(val < dpowers[c])
  2879  000976  5192               	movf	sprintf@c& (0+255),w,b
  2880  000978  0D02               	mullw	2
  2881  00097A  0E01               	movlw	low _dpowers
  2882  00097C  24F3               	addwf	prodl,w,c
  2883  00097E  6EF6               	movwf	tblptrl,c
  2884  000980  0E06               	movlw	high _dpowers
  2885  000982  20F4               	addwfc	prodh,w,c
  2886  000984  6EF7               	movwf	tblptrh,c
  2887  000986                     	if	0	;There are less than 3 active tblptr bytes
  2888  000986                     	endif
  2889  000986  0009               	tblrd		*+
  2890  000988  FFFF               	dw	65535	; errata NOP
  2891  00098A  50F5               	movf	tablat,w,c
  2892  00098C  5D90               	subwf	sprintf@val& (0+255),w,b
  2893  00098E  0009               	tblrd		*+
  2894  000990  FFFF               	dw	65535	; errata NOP
  2895  000992  50F5               	movf	tablat,w,c
  2896  000994  5991               	subwfb	(sprintf@val+1)& (0+255),w,b
  2897  000996  A0D8               	btfss	status,0,c
  2898  000998  D005               	goto	u1490
  2899                           
  2900                           ; BSR set to: 0
  2901  00099A  2B92               	incf	sprintf@c& (0+255),f,b
  2902                           
  2903                           ; BSR set to: 0
  2904  00099C  0E05               	movlw	5
  2905  00099E  1992               	xorwf	sprintf@c& (0+255),w,b
  2906  0009A0  A4D8               	btfss	status,2,c
  2907  0009A2  D7E8               	goto	l2440
  2908  0009A4                     u1490:
  2909  0009A4  FFFF               	dw	65535	; assembler added errata NOP
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  2913  0009A6  C08C  F08B         	movff	sprintf@flag,??_sprintf
  2914  0009AA  0E03               	movlw	3
  2915  0009AC  178B               	andwf	??_sprintf& (0+255),f,b
  2916  0009AE  B4D8               	btfsc	status,2,c
  2917  0009B0  D008               	goto	l2454
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  2921  0009B2  C085  FFD9         	movff	sprintf@sp,fsr2l
  2922  0009B6  C086  FFDA         	movff	sprintf@sp+1,fsr2h
  2923  0009BA  0E2D               	movlw	45
  2924  0009BC  6EDF               	movwf	indf2,c
  2925                           
  2926                           ; BSR set to: 0
  2927  0009BE  4B85               	infsnz	sprintf@sp& (0+255),f,b
  2928  0009C0  2B86               	incf	(sprintf@sp+1)& (0+255),f,b
  2929  0009C2                     l2454:
  2930  0009C2  FFFF               	dw	65535	; assembler added errata NOP
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  2934  0009C4  C092  F08D         	movff	sprintf@c,sprintf@prec
  2935                           
  2936                           ;doprnt.c: 1493: while(prec--) {
  2937  0009C8  D02E               	goto	l2462
  2938  0009CA                     l2456:
  2939  0009CA  FFFF               	dw	65535	; assembler added errata NOP
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  2943  0009CC  518D               	movf	sprintf@prec& (0+255),w,b
  2944  0009CE  0D02               	mullw	2
  2945  0009D0  0E01               	movlw	low _dpowers
  2946  0009D2  24F3               	addwf	prodl,w,c
  2947  0009D4  6EF6               	movwf	tblptrl,c
  2948  0009D6  0E06               	movlw	high _dpowers
  2949  0009D8  20F4               	addwfc	prodh,w,c
  2950  0009DA  6EF7               	movwf	tblptrh,c
  2951  0009DC                     	if	0	;There are less than 3 active tblptr bytes
  2952  0009DC                     	endif
  2953  0009DC  0009               	tblrd		*+
  2954  0009DE  FFFF               	dw	65535	; errata NOP
  2955  0009E0  CFF5 F03B          	movff	tablat,___lwdiv@divisor
  2956  0009E4  000A               	tblrd		*-
  2957  0009E6  FFFF               	dw	65535	; errata NOP
  2958  0009E8  CFF5 F03C          	movff	tablat,___lwdiv@divisor+1
  2959  0009EC  C090  F039         	movff	sprintf@val,___lwdiv@dividend
  2960  0009F0  C091  F03A         	movff	sprintf@val+1,___lwdiv@dividend+1
  2961  0009F4  EC8B  F008         	call	___lwdiv	;wreg free
  2962  0009F8  C039  F080         	movff	?___lwdiv,___lwmod@dividend
  2963  0009FC  C03A  F081         	movff	?___lwdiv+1,___lwmod@dividend+1
  2964  000A00  0E00               	movlw	0
  2965  000A02  0100               	movlb	0	; () banked
  2966  000A04  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  2967  000A06  0E0A               	movlw	10
  2968  000A08  6F82               	movwf	___lwmod@divisor& (0+255),b
  2969  000A0A  ECF7  F009         	call	___lwmod	;wreg free
  2970  000A0E  0100               	movlb	0	; () banked
  2971  000A10  5180               	movf	?___lwmod& (0+255),w,b
  2972  000A12  0F30               	addlw	48
  2973  000A14  6F92               	movwf	sprintf@c& (0+255),b
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  2977  000A16  C085  FFD9         	movff	sprintf@sp,fsr2l
  2978  000A1A  C086  FFDA         	movff	sprintf@sp+1,fsr2h
  2979  000A1E  C092  FFDF         	movff	sprintf@c,indf2
  2980                           
  2981                           ; BSR set to: 0
  2982  000A22  4B85               	infsnz	sprintf@sp& (0+255),f,b
  2983  000A24  2B86               	incf	(sprintf@sp+1)& (0+255),f,b
  2984  000A26                     l2462:
  2985  000A26  FFFF               	dw	65535	; assembler added errata NOP
  2986                           
  2987                           ; BSR set to: 0
  2988  000A28  078D               	decf	sprintf@prec& (0+255),f,b
  2989  000A2A  298D               	incf	sprintf@prec& (0+255),w,b
  2990  000A2C  A4D8               	btfss	status,2,c
  2991  000A2E  D7CD               	goto	l2456
  2992  000A30                     u1510:
  2993  000A30  FFFF               	dw	65535	; assembler added errata NOP
  2994                           
  2995                           ; BSR set to: 0
  2996  000A32  C087  FFF6         	movff	sprintf@f,tblptrl
  2997  000A36  C088  FFF7         	movff	sprintf@f+1,tblptrh
  2998  000A3A  4B87               	infsnz	sprintf@f& (0+255),f,b
  2999  000A3C  2B88               	incf	(sprintf@f+1)& (0+255),f,b
  3000  000A3E                     	if	0	;tblptru may be non-zero
  3001  000A3E                     	endif
  3002  000A3E                     	if	0	;tblptru may be non-zero
  3003  000A3E                     	endif
  3004  000A3E  0008               	tblrd		*
  3005  000A40  FFFF               	dw	65535	; errata NOP
  3006  000A42  CFF5 F092          	movff	tablat,sprintf@c
  3007  000A46  5192               	movf	sprintf@c& (0+255),w,b
  3008  000A48  A4D8               	btfss	status,2,c
  3009  000A4A  D745               	goto	l2404
  3010  000A4C                     u1520:
  3011  000A4C  FFFF               	dw	65535	; assembler added errata NOP
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;doprnt.c: 1557: *sp = 0;
  3015  000A4E  C085  FFD9         	movff	sprintf@sp,fsr2l
  3016  000A52  C086  FFDA         	movff	sprintf@sp+1,fsr2h
  3017  000A56  0E00               	movlw	0
  3018  000A58  6EDF               	movwf	indf2,c
  3019                           
  3020                           ; BSR set to: 0
  3021  000A5A  0012               	return		;funcret
  3022  000A5C  FFFF               	dw	65535	; errata NOP
  3023  000A5E                     __end_of_sprintf:
  3024                           	opt callstack 0
  3025                           
  3026 ;; *************** function ___lwmod *****************
  3027 ;; Defined at:
  3028 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;  dividend        2    0[BANK0 ] unsigned int 
  3031 ;;  divisor         2    2[BANK0 ] unsigned int 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  counter         1    4[BANK0 ] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  2    0[BANK0 ] unsigned int 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3043 ;;      Params:         0       4       0       0       0       0       0
  3044 ;;      Locals:         0       1       0       0       0       0       0
  3045 ;;      Temps:          0       0       0       0       0       0       0
  3046 ;;      Totals:         0       5       0       0       0       0       0
  3047 ;;Total ram usage:        5 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    4
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_sprintf
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text17
  3058  0013EE                     __ptext17:
  3059                           	opt callstack 0
  3060  0013EE                     ___lwmod:
  3061                           	opt callstack 0
  3062  0013EE  FFFF               	dw	65535	; assembler added errata NOP
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;incstack = 0
  3066  0013F0  0100               	movlb	0	; () banked
  3067  0013F2  5182               	movf	___lwmod@divisor& (0+255),w,b
  3068  0013F4  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3069  0013F6  B4D8               	btfsc	status,2,c
  3070  0013F8  D01C               	goto	l730
  3071                           
  3072                           ; BSR set to: 0
  3073  0013FA  0E01               	movlw	1
  3074  0013FC  6F84               	movwf	___lwmod@counter& (0+255),b
  3075  0013FE  D005               	goto	l2392
  3076  001400                     l2390:
  3077  001400  FFFF               	dw	65535	; assembler added errata NOP
  3078                           
  3079                           ; BSR set to: 0
  3080  001402  90D8               	bcf	status,0,c
  3081  001404  3782               	rlcf	___lwmod@divisor& (0+255),f,b
  3082  001406  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3083  001408  2B84               	incf	___lwmod@counter& (0+255),f,b
  3084  00140A                     l2392:
  3085  00140A  FFFF               	dw	65535	; assembler added errata NOP
  3086                           
  3087                           ; BSR set to: 0
  3088  00140C  AF83               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3089  00140E  D7F8               	goto	l2390
  3090  001410                     u1440:
  3091  001410  FFFF               	dw	65535	; assembler added errata NOP
  3092                           
  3093                           ; BSR set to: 0
  3094  001412  5182               	movf	___lwmod@divisor& (0+255),w,b
  3095  001414  5D80               	subwf	___lwmod@dividend& (0+255),w,b
  3096  001416  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3097  001418  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3098  00141A  A0D8               	btfss	status,0,c
  3099  00141C  D004               	goto	l2398
  3100                           
  3101                           ; BSR set to: 0
  3102  00141E  5182               	movf	___lwmod@divisor& (0+255),w,b
  3103  001420  5F80               	subwf	___lwmod@dividend& (0+255),f,b
  3104  001422  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3105  001424  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3106  001426                     l2398:
  3107  001426  FFFF               	dw	65535	; assembler added errata NOP
  3108                           
  3109                           ; BSR set to: 0
  3110  001428  90D8               	bcf	status,0,c
  3111  00142A  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3112  00142C  3382               	rrcf	___lwmod@divisor& (0+255),f,b
  3113                           
  3114                           ; BSR set to: 0
  3115  00142E  2F84               	decfsz	___lwmod@counter& (0+255),f,b
  3116  001430  D7EF               	goto	u1440
  3117  001432                     l730:
  3118  001432  FFFF               	dw	65535	; assembler added errata NOP
  3119                           
  3120                           ; BSR set to: 0
  3121  001434  C080  F080         	movff	___lwmod@dividend,?___lwmod
  3122  001438  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
  3123                           
  3124                           ; BSR set to: 0
  3125  00143C  0012               	return		;funcret
  3126  00143E  FFFF               	dw	65535	; errata NOP
  3127  001440                     __end_of___lwmod:
  3128                           	opt callstack 0
  3129                           
  3130 ;; *************** function ___lwdiv *****************
  3131 ;; Defined at:
  3132 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  dividend        2   56[COMRAM] unsigned int 
  3135 ;;  divisor         2   58[COMRAM] unsigned int 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  quotient        2   60[COMRAM] unsigned int 
  3138 ;;  counter         1   62[COMRAM] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  2   56[COMRAM] unsigned int 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3148 ;;      Params:         4       0       0       0       0       0       0
  3149 ;;      Locals:         3       0       0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0
  3151 ;;      Totals:         7       0       0       0       0       0       0
  3152 ;;Total ram usage:        7 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    4
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_sprintf
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text18
  3163  001116                     __ptext18:
  3164                           	opt callstack 0
  3165  001116                     ___lwdiv:
  3166                           	opt callstack 0
  3167  001116  FFFF               	dw	65535	; assembler added errata NOP
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;incstack = 0
  3171  001118  0E00               	movlw	0
  3172  00111A  6E3E               	movwf	___lwdiv@quotient+1,c
  3173  00111C  0E00               	movlw	0
  3174  00111E  6E3D               	movwf	___lwdiv@quotient,c
  3175  001120  503B               	movf	___lwdiv@divisor,w,c
  3176  001122  103C               	iorwf	___lwdiv@divisor+1,w,c
  3177  001124  B4D8               	btfsc	status,2,c
  3178  001126  D020               	goto	l720
  3179  001128  0E01               	movlw	1
  3180  00112A  6E3F               	movwf	___lwdiv@counter,c
  3181  00112C  D005               	goto	l1764
  3182  00112E                     l1762:
  3183  00112E  FFFF               	dw	65535	; assembler added errata NOP
  3184  001130  90D8               	bcf	status,0,c
  3185  001132  363B               	rlcf	___lwdiv@divisor,f,c
  3186  001134  363C               	rlcf	___lwdiv@divisor+1,f,c
  3187  001136  2A3F               	incf	___lwdiv@counter,f,c
  3188  001138                     l1764:
  3189  001138  FFFF               	dw	65535	; assembler added errata NOP
  3190  00113A  AE3C               	btfss	___lwdiv@divisor+1,7,c
  3191  00113C  D7F8               	goto	l1762
  3192  00113E                     u790:
  3193  00113E  FFFF               	dw	65535	; assembler added errata NOP
  3194  001140  90D8               	bcf	status,0,c
  3195  001142  363D               	rlcf	___lwdiv@quotient,f,c
  3196  001144  363E               	rlcf	___lwdiv@quotient+1,f,c
  3197  001146  503B               	movf	___lwdiv@divisor,w,c
  3198  001148  5C39               	subwf	___lwdiv@dividend,w,c
  3199  00114A  503C               	movf	___lwdiv@divisor+1,w,c
  3200  00114C  583A               	subwfb	___lwdiv@dividend+1,w,c
  3201  00114E  A0D8               	btfss	status,0,c
  3202  001150  D005               	goto	l1774
  3203  001152  503B               	movf	___lwdiv@divisor,w,c
  3204  001154  5E39               	subwf	___lwdiv@dividend,f,c
  3205  001156  503C               	movf	___lwdiv@divisor+1,w,c
  3206  001158  5A3A               	subwfb	___lwdiv@dividend+1,f,c
  3207  00115A  803D               	bsf	___lwdiv@quotient,0,c
  3208  00115C                     l1774:
  3209  00115C  FFFF               	dw	65535	; assembler added errata NOP
  3210  00115E  90D8               	bcf	status,0,c
  3211  001160  323C               	rrcf	___lwdiv@divisor+1,f,c
  3212  001162  323B               	rrcf	___lwdiv@divisor,f,c
  3213  001164  2E3F               	decfsz	___lwdiv@counter,f,c
  3214  001166  D7EB               	goto	u790
  3215  001168                     l720:
  3216  001168  FFFF               	dw	65535	; assembler added errata NOP
  3217  00116A  C03D  F039         	movff	___lwdiv@quotient,?___lwdiv
  3218  00116E  C03E  F03A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3219  001172  0012               	return		;funcret
  3220  001174  FFFF               	dw	65535	; errata NOP
  3221  001176                     __end_of___lwdiv:
  3222                           	opt callstack 0
  3223                           
  3224 ;; *************** function _rand *****************
  3225 ;; Defined at:
  3226 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  2   60[COMRAM] int 
  3233 ;; Registers used:
  3234 ;;		wreg, status,2, status,0, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3240 ;;      Params:         2       0       0       0       0       0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0
  3242 ;;      Temps:          0       0       0       0       0       0       0
  3243 ;;      Totals:         2       0       0       0       0       0       0
  3244 ;;Total ram usage:        2 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    5
  3247 ;; This function calls:
  3248 ;;		___lmul
  3249 ;; This function is called by:
  3250 ;;		_get_rand_num
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text19
  3255  001344                     __ptext19:
  3256                           	opt callstack 0
  3257  001344                     _rand:
  3258                           	opt callstack 0
  3259  001344  FFFF               	dw	65535	; assembler added errata NOP
  3260                           
  3261                           ;incstack = 0
  3262  001346  C040  F080         	movff	_randx,___lmul@multiplier
  3263  00134A  C041  F081         	movff	_randx+1,___lmul@multiplier+1
  3264  00134E  C042  F082         	movff	_randx+2,___lmul@multiplier+2
  3265  001352  C043  F083         	movff	_randx+3,___lmul@multiplier+3
  3266  001356  0E6D               	movlw	109
  3267  001358  0100               	movlb	0	; () banked
  3268  00135A  6F84               	movwf	___lmul@multiplicand& (0+255),b
  3269  00135C  0E4E               	movlw	78
  3270  00135E  6F85               	movwf	(___lmul@multiplicand+1)& (0+255),b
  3271  001360  0EC6               	movlw	198
  3272  001362  6F86               	movwf	(___lmul@multiplicand+2)& (0+255),b
  3273  001364  0E41               	movlw	65
  3274  001366  6F87               	movwf	(___lmul@multiplicand+3)& (0+255),b
  3275  001368  ECBB  F008         	call	___lmul	;wreg free
  3276  00136C  C080  F040         	movff	?___lmul,_randx
  3277  001370  C081  F041         	movff	?___lmul+1,_randx+1
  3278  001374  C082  F042         	movff	?___lmul+2,_randx+2
  3279  001378  C083  F043         	movff	?___lmul+3,_randx+3
  3280  00137C  0E39               	movlw	57
  3281  00137E  2640               	addwf	_randx,f,c
  3282  001380  0E30               	movlw	48
  3283  001382  2241               	addwfc	_randx+1,f,c
  3284  001384  0E00               	movlw	0
  3285  001386  2242               	addwfc	_randx+2,f,c
  3286  001388  0E00               	movlw	0
  3287  00138A  2243               	addwfc	_randx+3,f,c
  3288  00138C  0EFF               	movlw	255
  3289  00138E  1442               	andwf	_randx+2,w,c
  3290  001390  6E3D               	movwf	?_rand,c
  3291  001392  0E7F               	movlw	127
  3292  001394  1443               	andwf	_randx+3,w,c
  3293  001396  6E3E               	movwf	?_rand+1,c
  3294  001398  0012               	return		;funcret
  3295  00139A  FFFF               	dw	65535	; errata NOP
  3296  00139C                     __end_of_rand:
  3297                           	opt callstack 0
  3298                           
  3299 ;; *************** function ___lmul *****************
  3300 ;; Defined at:
  3301 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3304 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  product         4   56[COMRAM] unsigned long 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  4    0[BANK0 ] unsigned long 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3316 ;;      Params:         0       8       0       0       0       0       0
  3317 ;;      Locals:         4       0       0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0       0       0
  3319 ;;      Totals:         4       8       0       0       0       0       0
  3320 ;;Total ram usage:       12 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    4
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_rand
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text20
  3331  001176                     __ptext20:
  3332                           	opt callstack 0
  3333  001176                     ___lmul:
  3334                           	opt callstack 0
  3335  001176  FFFF               	dw	65535	; assembler added errata NOP
  3336                           
  3337                           ;incstack = 0
  3338  001178  0E00               	movlw	0
  3339  00117A  6E39               	movwf	___lmul@product,c
  3340  00117C  0E00               	movlw	0
  3341  00117E  6E3A               	movwf	___lmul@product+1,c
  3342  001180  0E00               	movlw	0
  3343  001182  6E3B               	movwf	___lmul@product+2,c
  3344  001184  0E00               	movlw	0
  3345  001186  6E3C               	movwf	___lmul@product+3,c
  3346  001188                     l2378:
  3347  001188  FFFF               	dw	65535	; assembler added errata NOP
  3348  00118A  0100               	movlb	0	; () banked
  3349  00118C  A180               	btfss	___lmul@multiplier& (0+255),0,b
  3350  00118E  D008               	goto	l2382
  3351                           
  3352                           ; BSR set to: 0
  3353  001190  5184               	movf	___lmul@multiplicand& (0+255),w,b
  3354  001192  2639               	addwf	___lmul@product,f,c
  3355  001194  5185               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  3356  001196  223A               	addwfc	___lmul@product+1,f,c
  3357  001198  5186               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  3358  00119A  223B               	addwfc	___lmul@product+2,f,c
  3359  00119C  5187               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  3360  00119E  223C               	addwfc	___lmul@product+3,f,c
  3361  0011A0                     l2382:
  3362  0011A0  FFFF               	dw	65535	; assembler added errata NOP
  3363                           
  3364                           ; BSR set to: 0
  3365  0011A2  90D8               	bcf	status,0,c
  3366  0011A4  3784               	rlcf	___lmul@multiplicand& (0+255),f,b
  3367  0011A6  3785               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  3368  0011A8  3786               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  3369  0011AA  3787               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  3370                           
  3371                           ; BSR set to: 0
  3372  0011AC  90D8               	bcf	status,0,c
  3373  0011AE  3383               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  3374  0011B0  3382               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  3375  0011B2  3381               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  3376  0011B4  3380               	rrcf	___lmul@multiplier& (0+255),f,b
  3377  0011B6  5180               	movf	___lmul@multiplier& (0+255),w,b
  3378  0011B8  1181               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  3379  0011BA  1182               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  3380  0011BC  1183               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  3381  0011BE  A4D8               	btfss	status,2,c
  3382  0011C0  D7E3               	goto	l2378
  3383                           
  3384                           ; BSR set to: 0
  3385  0011C2  C039  F080         	movff	___lmul@product,?___lmul
  3386  0011C6  C03A  F081         	movff	___lmul@product+1,?___lmul+1
  3387  0011CA  C03B  F082         	movff	___lmul@product+2,?___lmul+2
  3388  0011CE  C03C  F083         	movff	___lmul@product+3,?___lmul+3
  3389                           
  3390                           ; BSR set to: 0
  3391  0011D2  0012               	return		;funcret
  3392  0011D4  FFFF               	dw	65535	; errata NOP
  3393  0011D6                     __end_of___lmul:
  3394                           	opt callstack 0
  3395                           
  3396 ;; *************** function ___awmod *****************
  3397 ;; Defined at:
  3398 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  dividend        2    8[BANK0 ] int 
  3401 ;;  divisor         2   10[BANK0 ] int 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  sign            1   13[BANK0 ] unsigned char 
  3404 ;;  counter         1   12[BANK0 ] unsigned char 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  2    8[BANK0 ] int 
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3414 ;;      Params:         0       4       0       0       0       0       0
  3415 ;;      Locals:         0       2       0       0       0       0       0
  3416 ;;      Temps:          0       0       0       0       0       0       0
  3417 ;;      Totals:         0       6       0       0       0       0       0
  3418 ;;Total ram usage:        6 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    4
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_get_rand_num
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text21
  3429  000FAC                     __ptext21:
  3430                           	opt callstack 0
  3431  000FAC                     ___awmod:
  3432                           	opt callstack 0
  3433  000FAC  FFFF               	dw	65535	; assembler added errata NOP
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;incstack = 0
  3437  000FAE  0E00               	movlw	0
  3438  000FB0  0100               	movlb	0	; () banked
  3439  000FB2  6F8D               	movwf	___awmod@sign& (0+255),b
  3440                           
  3441                           ; BSR set to: 0
  3442  000FB4  AF89               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3443  000FB6  D006               	goto	l1936
  3444                           
  3445                           ; BSR set to: 0
  3446  000FB8  6D88               	negf	___awmod@dividend& (0+255),b
  3447  000FBA  1F89               	comf	(___awmod@dividend+1)& (0+255),f,b
  3448  000FBC  B0D8               	btfsc	status,0,c
  3449  000FBE  2B89               	incf	(___awmod@dividend+1)& (0+255),f,b
  3450                           
  3451                           ; BSR set to: 0
  3452  000FC0  0E01               	movlw	1
  3453  000FC2  6F8D               	movwf	___awmod@sign& (0+255),b
  3454  000FC4                     l1936:
  3455  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  3456                           
  3457                           ; BSR set to: 0
  3458  000FC6  AF8B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3459  000FC8  D004               	goto	l1940
  3460                           
  3461                           ; BSR set to: 0
  3462  000FCA  6D8A               	negf	___awmod@divisor& (0+255),b
  3463  000FCC  1F8B               	comf	(___awmod@divisor+1)& (0+255),f,b
  3464  000FCE  B0D8               	btfsc	status,0,c
  3465  000FD0  2B8B               	incf	(___awmod@divisor+1)& (0+255),f,b
  3466  000FD2                     l1940:
  3467  000FD2  FFFF               	dw	65535	; assembler added errata NOP
  3468                           
  3469                           ; BSR set to: 0
  3470  000FD4  518A               	movf	___awmod@divisor& (0+255),w,b
  3471  000FD6  118B               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3472  000FD8  B4D8               	btfsc	status,2,c
  3473  000FDA  D01C               	goto	l1956
  3474                           
  3475                           ; BSR set to: 0
  3476  000FDC  0E01               	movlw	1
  3477  000FDE  6F8C               	movwf	___awmod@counter& (0+255),b
  3478  000FE0  D005               	goto	l1946
  3479  000FE2                     l1944:
  3480  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  3481                           
  3482                           ; BSR set to: 0
  3483  000FE4  90D8               	bcf	status,0,c
  3484  000FE6  378A               	rlcf	___awmod@divisor& (0+255),f,b
  3485  000FE8  378B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3486  000FEA  2B8C               	incf	___awmod@counter& (0+255),f,b
  3487  000FEC                     l1946:
  3488  000FEC  FFFF               	dw	65535	; assembler added errata NOP
  3489                           
  3490                           ; BSR set to: 0
  3491  000FEE  AF8B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3492  000FF0  D7F8               	goto	l1944
  3493  000FF2                     u960:
  3494  000FF2  FFFF               	dw	65535	; assembler added errata NOP
  3495                           
  3496                           ; BSR set to: 0
  3497  000FF4  518A               	movf	___awmod@divisor& (0+255),w,b
  3498  000FF6  5D88               	subwf	___awmod@dividend& (0+255),w,b
  3499  000FF8  518B               	movf	(___awmod@divisor+1)& (0+255),w,b
  3500  000FFA  5989               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3501  000FFC  A0D8               	btfss	status,0,c
  3502  000FFE  D004               	goto	l1952
  3503                           
  3504                           ; BSR set to: 0
  3505  001000  518A               	movf	___awmod@divisor& (0+255),w,b
  3506  001002  5F88               	subwf	___awmod@dividend& (0+255),f,b
  3507  001004  518B               	movf	(___awmod@divisor+1)& (0+255),w,b
  3508  001006  5B89               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3509  001008                     l1952:
  3510  001008  FFFF               	dw	65535	; assembler added errata NOP
  3511                           
  3512                           ; BSR set to: 0
  3513  00100A  90D8               	bcf	status,0,c
  3514  00100C  338B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3515  00100E  338A               	rrcf	___awmod@divisor& (0+255),f,b
  3516                           
  3517                           ; BSR set to: 0
  3518  001010  2F8C               	decfsz	___awmod@counter& (0+255),f,b
  3519  001012  D7EF               	goto	u960
  3520  001014                     l1956:
  3521  001014  FFFF               	dw	65535	; assembler added errata NOP
  3522                           
  3523                           ; BSR set to: 0
  3524  001016  518D               	movf	___awmod@sign& (0+255),w,b
  3525  001018  B4D8               	btfsc	status,2,c
  3526  00101A  D004               	goto	l1960
  3527                           
  3528                           ; BSR set to: 0
  3529  00101C  6D88               	negf	___awmod@dividend& (0+255),b
  3530  00101E  1F89               	comf	(___awmod@dividend+1)& (0+255),f,b
  3531  001020  B0D8               	btfsc	status,0,c
  3532  001022  2B89               	incf	(___awmod@dividend+1)& (0+255),f,b
  3533  001024                     l1960:
  3534  001024  FFFF               	dw	65535	; assembler added errata NOP
  3535                           
  3536                           ; BSR set to: 0
  3537  001026  C088  F088         	movff	___awmod@dividend,?___awmod
  3538  00102A  C089  F089         	movff	___awmod@dividend+1,?___awmod+1
  3539                           
  3540                           ; BSR set to: 0
  3541  00102E  0012               	return		;funcret
  3542  001030  FFFF               	dw	65535	; errata NOP
  3543  001032                     __end_of___awmod:
  3544                           	opt callstack 0
  3545                           
  3546 ;; *************** function _compare_nums *****************
  3547 ;; Defined at:
  3548 ;;		line 251 in file "main.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  nums            2   56[COMRAM] PTR unsigned char 
  3551 ;;		 -> nums(10), 
  3552 ;;  r               2   58[COMRAM] PTR unsigned char 
  3553 ;;		 -> ans(10), 
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  i               1    1[BANK0 ] unsigned char 
  3556 ;;  lim             1    0[BANK0 ] unsigned char 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      unsigned char 
  3559 ;; Registers used:
  3560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3566 ;;      Params:         4       0       0       0       0       0       0
  3567 ;;      Locals:         0       2       0       0       0       0       0
  3568 ;;      Temps:          2       0       0       0       0       0       0
  3569 ;;      Totals:         6       2       0       0       0       0       0
  3570 ;;Total ram usage:        8 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    4
  3573 ;; This function calls:
  3574 ;;		Nothing
  3575 ;; This function is called by:
  3576 ;;		_main
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text22
  3581  001292                     __ptext22:
  3582                           	opt callstack 0
  3583  001292                     _compare_nums:
  3584                           	opt callstack 0
  3585  001292  FFFF               	dw	65535	; assembler added errata NOP
  3586                           
  3587                           ;main.c: 252: char lim = lvl_n[lvl];
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;incstack = 0
  3591  001294  0100               	movlb	0	; () banked
  3592  001296  51A4               	movf	_lvl& (0+255),w,b
  3593  001298  0D02               	mullw	2
  3594  00129A  0EB9               	movlw	low _lvl_n
  3595  00129C  24F3               	addwf	prodl,w,c
  3596  00129E  6ED9               	movwf	fsr2l,c
  3597  0012A0  0E00               	movlw	high _lvl_n
  3598  0012A2  20F4               	addwfc	prodh,w,c
  3599  0012A4  6EDA               	movwf	fsr2h,c
  3600  0012A6  50DF               	movf	indf2,w,c
  3601  0012A8  6F80               	movwf	compare_nums@lim& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;main.c: 253: for(char i = 0; i < lim; i++) {
  3605  0012AA  0E00               	movlw	0
  3606  0012AC  6F81               	movwf	compare_nums@i& (0+255),b
  3607  0012AE  D015               	goto	l2526
  3608  0012B0                     l2518:
  3609  0012B0  FFFF               	dw	65535	; assembler added errata NOP
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;main.c: 254: if (r[i] != nums[i]) {
  3613  0012B2  5181               	movf	compare_nums@i& (0+255),w,b
  3614  0012B4  2439               	addwf	compare_nums@nums,w,c
  3615  0012B6  6ED9               	movwf	fsr2l,c
  3616  0012B8  0E00               	movlw	0
  3617  0012BA  203A               	addwfc	compare_nums@nums+1,w,c
  3618  0012BC  6EDA               	movwf	fsr2h,c
  3619  0012BE  5181               	movf	compare_nums@i& (0+255),w,b
  3620  0012C0  243B               	addwf	compare_nums@r,w,c
  3621  0012C2  6EE1               	movwf	fsr1l,c
  3622  0012C4  0E00               	movlw	0
  3623  0012C6  203C               	addwfc	compare_nums@r+1,w,c
  3624  0012C8  6EE2               	movwf	fsr1h,c
  3625  0012CA  50DE               	movf	postinc2,w,c
  3626  0012CC  18E6               	xorwf	postinc1,w,c
  3627  0012CE  B4D8               	btfsc	status,2,c
  3628  0012D0  D002               	goto	l2524
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;main.c: 255: return 0;
  3632  0012D2  0E00               	movlw	0
  3633  0012D4  D008               	goto	l189
  3634  0012D6                     l2524:
  3635  0012D6  FFFF               	dw	65535	; assembler added errata NOP
  3636                           
  3637                           ; BSR set to: 0
  3638  0012D8  2B81               	incf	compare_nums@i& (0+255),f,b
  3639  0012DA                     l2526:
  3640  0012DA  FFFF               	dw	65535	; assembler added errata NOP
  3641                           
  3642                           ; BSR set to: 0
  3643  0012DC  5180               	movf	compare_nums@lim& (0+255),w,b
  3644  0012DE  5D81               	subwf	compare_nums@i& (0+255),w,b
  3645  0012E0  A0D8               	btfss	status,0,c
  3646  0012E2  D7E6               	goto	l2518
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;main.c: 256: };main.c: 257: };main.c: 258: return 1;
  3650  0012E4  0E01               	movlw	1
  3651  0012E6                     l189:
  3652  0012E6  FFFF               	dw	65535	; assembler added errata NOP
  3653                           
  3654                           ; BSR set to: 0
  3655  0012E8  0012               	return		;funcret
  3656  0012EA  FFFF               	dw	65535	; errata NOP
  3657  0012EC                     __end_of_compare_nums:
  3658                           	opt callstack 0
  3659                           
  3660 ;; *************** function _capture *****************
  3661 ;; Defined at:
  3662 ;;		line 174 in file "main.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;		None
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  ans_len         1   55[COMRAM] unsigned char 
  3667 ;;  pos             1   54[COMRAM] unsigned char 
  3668 ;;  m              16   37[COMRAM] unsigned char [16]
  3669 ;;  p               1   53[COMRAM] unsigned char 
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  1    wreg      void 
  3672 ;; Registers used:
  3673 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3679 ;;      Params:         0       0       0       0       0       0       0
  3680 ;;      Locals:        19       0       0       0       0       0       0
  3681 ;;      Temps:         11       0       0       0       0       0       0
  3682 ;;      Totals:        30       0       0       0       0       0       0
  3683 ;;Total ram usage:       30 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    3
  3686 ;; This function calls:
  3687 ;;		_erase_letter
  3688 ;;		_get_letter
  3689 ;;		i2_print_message_onLCD
  3690 ;;		i2_sprintf
  3691 ;;		i2_strlen
  3692 ;; This function is called by:
  3693 ;;		Interrupt level 2
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	intcode
  3698  000008                     __pintcode:
  3699                           	opt callstack 0
  3700  000008                     _capture:
  3701                           	opt callstack 0
  3702  000008  FFFF               	dw	65535	; assembler added errata NOP
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;incstack = 0
  3706  00000A  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3707  00000C  CFE9 F01C          	movff	fsr0l,??_capture+1
  3708  000010  CFEA F01D          	movff	fsr0h,??_capture+2
  3709  000014  CFD9 F01E          	movff	fsr2l,??_capture+3
  3710  000018  CFDA F01F          	movff	fsr2h,??_capture+4
  3711  00001C  CFF3 F020          	movff	prodl,??_capture+5
  3712  000020  CFF4 F021          	movff	prodh,??_capture+6
  3713  000024  CFF6 F022          	movff	tblptrl,??_capture+7
  3714  000028  CFF7 F023          	movff	tblptrh,??_capture+8
  3715  00002C  CFF8 F024          	movff	tblptru,??_capture+9
  3716  000030  CFF5 F025          	movff	tablat,??_capture+10
  3717                           
  3718                           ;main.c: 175: if (INTCONbits.RBIF) {
  3719  000034  A0F2               	btfss	4082,0,c	;volatile
  3720  000036  D05F               	goto	i2l153
  3721                           
  3722                           ;main.c: 176: char p = PORTB;
  3723  000038  CF81 F036          	movff	3969,capture@p	;volatile
  3724  00003C                     i2l2326:
  3725  00003C  FFFF               	dw	65535	; assembler added errata NOP
  3726  00003E  5081               	movf	3969,w,c	;volatile
  3727  000040  0BF0               	andlw	240
  3728  000042  0AF0               	xorlw	240
  3729  000044  A4D8               	btfss	status,2,c
  3730  000046  D7FA               	goto	i2l2326
  3731                           
  3732                           ;main.c: 178: _delay((unsigned long)((50)*(4000000/4000000.0)));
  3733  000048  0E0C               	movlw	12
  3734  00004A                     i2u183_47:
  3735  00004A  FFFF               	dw	65535	; errata NOP
  3736  00004C  2EE8               	decfsz	wreg,f,c
  3737  00004E  D7FD               	bra	i2u183_47
  3738  000050  D000               	nop2	
  3739                           
  3740                           ;main.c: 180: if (!counting_down && !first_exec) {
  3741  000052  5046               	movf	_counting_down,w,c
  3742  000054  A4D8               	btfss	status,2,c
  3743  000056  D04D               	goto	i2l149
  3744  000058  5045               	movf	_first_exec,w,c
  3745  00005A  A4D8               	btfss	status,2,c
  3746  00005C  D04A               	goto	i2l149
  3747                           
  3748                           ;main.c: 181: char m[16];;main.c: 182: sprintf(m, "%c", get_letter(p));
  3749  00005E  0E26               	movlw	low capture@m
  3750  000060  6E0D               	movwf	i2sprintf@sp,c
  3751  000062  0E00               	movlw	high capture@m
  3752  000064  6E0E               	movwf	i2sprintf@sp+1,c
  3753  000066  0EA8               	movlw	low STR_6
  3754  000068  6E0F               	movwf	i2sprintf@f,c
  3755  00006A  0E06               	movlw	high STR_6
  3756  00006C  6E10               	movwf	i2sprintf@f+1,c
  3757  00006E  5036               	movf	capture@p,w,c
  3758  000070  EC3F  F007         	call	_get_letter
  3759  000074  6E1B               	movwf	??_capture& (0+255),c
  3760  000076  501B               	movf	??_capture,w,c
  3761  000078  6E11               	movwf	?i2_sprintf+4,c
  3762  00007A  6A12               	clrf	?i2_sprintf+5,c
  3763  00007C  EC2F  F005         	call	i2_sprintf	;wreg free
  3764                           
  3765                           ;main.c: 183: if (m[0] != 'd' && m[0] != 'e' && m[0] != 'x') {
  3766  000080  0E64               	movlw	100
  3767  000082  1826               	xorwf	capture@m,w,c
  3768  000084  B4D8               	btfsc	status,2,c
  3769  000086  D026               	goto	i2l2350
  3770  000088  0E65               	movlw	101
  3771  00008A  1826               	xorwf	capture@m,w,c
  3772  00008C  B4D8               	btfsc	status,2,c
  3773  00008E  D022               	goto	i2l2350
  3774  000090  0E78               	movlw	120
  3775  000092  1826               	xorwf	capture@m,w,c
  3776  000094  B4D8               	btfsc	status,2,c
  3777  000096  D01E               	goto	i2l2350
  3778                           
  3779                           ;main.c: 184: char ans_len = strlen(ans);
  3780  000098  0EA5               	movlw	low _ans
  3781  00009A  6E01               	movwf	i2strlen@s,c
  3782  00009C  0E00               	movlw	high _ans
  3783  00009E  6E02               	movwf	i2strlen@s+1,c
  3784  0000A0  EC6E  F00A         	call	i2_strlen	;wreg free
  3785  0000A4  5001               	movf	?i2_strlen,w,c
  3786  0000A6  6E38               	movwf	capture@ans_len,c
  3787                           
  3788                           ;main.c: 185: ans[ans_len] = m[0];
  3789  0000A8  0EA5               	movlw	low _ans
  3790  0000AA  2438               	addwf	capture@ans_len,w,c
  3791  0000AC  6ED9               	movwf	fsr2l,c
  3792  0000AE  6ADA               	clrf	fsr2h,c
  3793  0000B0  0E00               	movlw	high _ans
  3794  0000B2  22DA               	addwfc	fsr2h,f,c
  3795  0000B4  C026  FFDF         	movff	capture@m,indf2
  3796                           
  3797                           ;main.c: 186: char pos = 192 + ans_len;
  3798  0000B8  5038               	movf	capture@ans_len,w,c
  3799  0000BA  0FC0               	addlw	192
  3800  0000BC  6E37               	movwf	capture@pos,c
  3801                           
  3802                           ;main.c: 187: print_message_onLCD(m, pos, 0);
  3803  0000BE  0E26               	movlw	low capture@m
  3804  0000C0  6E05               	movwf	i2print_message_onLCD@message,c
  3805  0000C2  0E00               	movlw	high capture@m
  3806  0000C4  6E06               	movwf	i2print_message_onLCD@message+1,c
  3807  0000C6  C037  F007         	movff	capture@pos,i2print_message_onLCD@place
  3808  0000CA  0E00               	movlw	0
  3809  0000CC  6E08               	movwf	i2print_message_onLCD@space_bt,c
  3810  0000CE  EC19  F008         	call	i2_print_message_onLCD	;wreg free
  3811                           
  3812                           ;main.c: 188: } else if(m[0] == 'd') {
  3813  0000D2  D00F               	goto	i2l149
  3814  0000D4                     i2l2350:
  3815  0000D4  FFFF               	dw	65535	; assembler added errata NOP
  3816  0000D6  0E64               	movlw	100
  3817  0000D8  1826               	xorwf	capture@m,w,c
  3818  0000DA  A4D8               	btfss	status,2,c
  3819  0000DC  D004               	goto	i2l2354
  3820                           
  3821                           ;main.c: 189: d_pressed = 1;
  3822  0000DE  0E01               	movlw	1
  3823  0000E0  0100               	movlb	0	; () banked
  3824  0000E2  6FA2               	movwf	_d_pressed& (0+255),b
  3825                           
  3826                           ;main.c: 190: } else if(m[0] == 'e') {
  3827  0000E4  D006               	goto	i2l149
  3828  0000E6                     i2l2354:
  3829  0000E6  FFFF               	dw	65535	; assembler added errata NOP
  3830  0000E8  0E65               	movlw	101
  3831  0000EA  1826               	xorwf	capture@m,w,c
  3832  0000EC  B4D8               	btfsc	status,2,c
  3833                           
  3834                           ;main.c: 191: erase_letter();
  3835  0000EE  EC94  F00A         	call	_erase_letter	;wreg free
  3836  0000F2                     i2l149:
  3837  0000F2  FFFF               	dw	65535	; assembler added errata NOP
  3838                           
  3839                           ;main.c: 192: };main.c: 193: };main.c: 195: INTCONbits.RBIF = 0;
  3840  0000F4  90F2               	bcf	4082,0,c	;volatile
  3841  0000F6                     i2l153:
  3842  0000F6  FFFF               	dw	65535	; assembler added errata NOP
  3843  0000F8  C025  FFF5         	movff	??_capture+10,tablat
  3844  0000FC  C024  FFF8         	movff	??_capture+9,tblptru
  3845  000100  C023  FFF7         	movff	??_capture+8,tblptrh
  3846  000104  C022  FFF6         	movff	??_capture+7,tblptrl
  3847  000108  C021  FFF4         	movff	??_capture+6,prodh
  3848  00010C  C020  FFF3         	movff	??_capture+5,prodl
  3849  000110  C01F  FFDA         	movff	??_capture+4,fsr2h
  3850  000114  C01E  FFD9         	movff	??_capture+3,fsr2l
  3851  000118  C01D  FFEA         	movff	??_capture+2,fsr0h
  3852  00011C  C01C  FFE9         	movff	??_capture+1,fsr0l
  3853  000120  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3854  000122  0011               	retfie		f
  3855  000124  FFFF               	dw	65535	; errata NOP
  3856  000126                     __end_of_capture:
  3857                           	opt callstack 0
  3858                           
  3859 ;; *************** function i2_sprintf *****************
  3860 ;; Defined at:
  3861 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3864 ;;		 -> get_rand_num@r(1), capture@m(16), 
  3865 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3866 ;;		 -> STR_7(3), STR_6(3), 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  sprintf         4    0        struct .
  3869 ;;  sprintf         3    0        PTR const unsigned char 
  3870 ;;  sprintf         2   23[COMRAM] unsigned int 
  3871 ;;  sprintf         2   21[COMRAM] PTR void [1]
  3872 ;;		 -> ?i2_sprintf(2), ?_sprintf(2), 
  3873 ;;  sprintf         2    0        unsigned int 
  3874 ;;  sprintf         1   25[COMRAM] unsigned char 
  3875 ;;  sprintf         1   20[COMRAM] char 
  3876 ;;  sprintf         1   19[COMRAM] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  2   12[COMRAM] int 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3886 ;;      Params:         6       0       0       0       0       0       0
  3887 ;;      Locals:         7       0       0       0       0       0       0
  3888 ;;      Temps:          1       0       0       0       0       0       0
  3889 ;;      Totals:        14       0       0       0       0       0       0
  3890 ;;Total ram usage:       14 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    1
  3893 ;; This function calls:
  3894 ;;		i2___lwdiv
  3895 ;;		i2___lwmod
  3896 ;; This function is called by:
  3897 ;;		_capture
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text24
  3902  000A5E                     __ptext24:
  3903                           	opt callstack 0
  3904  000A5E                     i2_sprintf:
  3905                           	opt callstack 0
  3906  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  3907                           
  3908                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  3909                           
  3910                           ;incstack = 0
  3911  000A60  0E11               	movlw	low (?i2_sprintf+4)
  3912  000A62  6E16               	movwf	i2sprintf@ap,c
  3913  000A64  0E00               	movlw	high (?i2_sprintf+4)
  3914  000A66  6E17               	movwf	i2sprintf@ap+1,c
  3915                           
  3916                           ;doprnt.c: 548: while((c = *f++)) {
  3917  000A68  D0AC               	goto	i2u118_40
  3918  000A6A                     i2l2180:
  3919  000A6A  FFFF               	dw	65535	; assembler added errata NOP
  3920                           
  3921                           ;doprnt.c: 550: if(c != '%')
  3922  000A6C  0E25               	movlw	37
  3923  000A6E  181A               	xorwf	i2sprintf@c,w,c
  3924  000A70  B4D8               	btfsc	status,2,c
  3925  000A72  D00A               	goto	i2l2186
  3926  000A74                     i2u113_40:
  3927  000A74  FFFF               	dw	65535	; assembler added errata NOP
  3928                           
  3929                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  3930  000A76  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  3931  000A7A  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  3932  000A7E  C01A  FFDF         	movff	i2sprintf@c,indf2
  3933  000A82  4A0D               	infsnz	i2sprintf@sp,f,c
  3934  000A84  2A0E               	incf	i2sprintf@sp+1,f,c
  3935                           
  3936                           ;doprnt.c: 554: continue;
  3937  000A86  D09D               	goto	i2u118_40
  3938  000A88                     i2l2186:
  3939  000A88  FFFF               	dw	65535	; assembler added errata NOP
  3940                           
  3941                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  3942  000A8A  0E00               	movlw	0
  3943  000A8C  6E14               	movwf	i2sprintf@flag,c
  3944                           
  3945                           ;doprnt.c: 654: switch(c = *f++) {
  3946  000A8E  D00C               	goto	i2l2198
  3947  000A90                     i2l2188:
  3948  000A90  FFFF               	dw	65535	; assembler added errata NOP
  3949                           
  3950                           ;doprnt.c: 818: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3951  000A92  C016  FFD9         	movff	i2sprintf@ap,fsr2l
  3952  000A96  C017  FFDA         	movff	i2sprintf@ap+1,fsr2h
  3953  000A9A  50DF               	movf	indf2,w,c
  3954  000A9C  6E1A               	movwf	i2sprintf@c,c
  3955  000A9E  0E02               	movlw	2
  3956  000AA0  2616               	addwf	i2sprintf@ap,f,c
  3957  000AA2  0E00               	movlw	0
  3958  000AA4  2217               	addwfc	i2sprintf@ap+1,f,c
  3959  000AA6  D7E6               	goto	i2u113_40
  3960  000AA8                     i2l2198:
  3961  000AA8  FFFF               	dw	65535	; assembler added errata NOP
  3962  000AAA  C00F  FFF6         	movff	i2sprintf@f,tblptrl
  3963  000AAE  C010  FFF7         	movff	i2sprintf@f+1,tblptrh
  3964  000AB2  4A0F               	infsnz	i2sprintf@f,f,c
  3965  000AB4  2A10               	incf	i2sprintf@f+1,f,c
  3966  000AB6                     	if	0	;tblptru may be non-zero
  3967  000AB6                     	endif
  3968  000AB6                     	if	0	;tblptru may be non-zero
  3969  000AB6                     	endif
  3970  000AB6  0008               	tblrd		*
  3971  000AB8  FFFF               	dw	65535	; errata NOP
  3972  000ABA  CFF5 F01A          	movff	tablat,i2sprintf@c
  3973  000ABE  501A               	movf	i2sprintf@c,w,c
  3974                           
  3975                           ; Switch size 1, requested type "simple"
  3976                           ; Number of cases is 4, Range of values is 0 to 105
  3977                           ; switch strategies available:
  3978                           ; Name         Instructions Cycles
  3979                           ; simple_byte           13     7 (average)
  3980                           ;	Chosen strategy is simple_byte
  3981  000AC0  0A00               	xorlw	0	; case 0
  3982  000AC2  B4D8               	btfsc	status,2,c
  3983  000AC4  D08C               	goto	i2u119_40
  3984  000AC6  0A63               	xorlw	99	; case 99
  3985  000AC8  B4D8               	btfsc	status,2,c
  3986  000ACA  D7E2               	goto	i2l2188
  3987  000ACC  0A07               	xorlw	7	; case 100
  3988  000ACE  B4D8               	btfsc	status,2,c
  3989  000AD0  D003               	goto	i2l2200
  3990  000AD2  0A0D               	xorlw	13	; case 105
  3991  000AD4  A4D8               	btfss	status,2,c
  3992  000AD6  D7CE               	goto	i2u113_40
  3993  000AD8                     i2l2200:
  3994  000AD8  FFFF               	dw	65535	; assembler added errata NOP
  3995                           
  3996                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3997  000ADA  C016  FFD9         	movff	i2sprintf@ap,fsr2l
  3998  000ADE  C017  FFDA         	movff	i2sprintf@ap+1,fsr2h
  3999  000AE2  CFDE F018          	movff	postinc2,i2sprintf@val
  4000  000AE6  CFDD F019          	movff	postdec2,i2sprintf@val+1
  4001  000AEA  0E02               	movlw	2
  4002  000AEC  2616               	addwf	i2sprintf@ap,f,c
  4003  000AEE  0E00               	movlw	0
  4004  000AF0  2217               	addwfc	i2sprintf@ap+1,f,c
  4005                           
  4006                           ;doprnt.c: 1280: if((int)val < 0) {
  4007  000AF2  AE19               	btfss	i2sprintf@val+1,7,c
  4008  000AF4  D006               	goto	i2l2210
  4009                           
  4010                           ;doprnt.c: 1281: flag |= 0x03;
  4011  000AF6  0E03               	movlw	3
  4012  000AF8  1214               	iorwf	i2sprintf@flag,f,c
  4013                           
  4014                           ;doprnt.c: 1282: val = -val;
  4015  000AFA  6C18               	negf	i2sprintf@val,c
  4016  000AFC  1E19               	comf	i2sprintf@val+1,f,c
  4017  000AFE  B0D8               	btfsc	status,0,c
  4018  000B00  2A19               	incf	i2sprintf@val+1,f,c
  4019  000B02                     i2l2210:
  4020  000B02  FFFF               	dw	65535	; assembler added errata NOP
  4021                           
  4022                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  4023  000B04  0E01               	movlw	1
  4024  000B06  6E1A               	movwf	i2sprintf@c,c
  4025  000B08                     i2l2212:
  4026  000B08  FFFF               	dw	65535	; assembler added errata NOP
  4027  000B0A  0E05               	movlw	5
  4028  000B0C  181A               	xorwf	i2sprintf@c,w,c
  4029  000B0E  B4D8               	btfsc	status,2,c
  4030  000B10  D014               	goto	i2l2224
  4031                           
  4032                           ;doprnt.c: 1325: if(val < dpowers[c])
  4033  000B12  501A               	movf	i2sprintf@c,w,c
  4034  000B14  0D02               	mullw	2
  4035  000B16  0E01               	movlw	low _dpowers
  4036  000B18  24F3               	addwf	prodl,w,c
  4037  000B1A  6EF6               	movwf	tblptrl,c
  4038  000B1C  0E06               	movlw	high _dpowers
  4039  000B1E  20F4               	addwfc	prodh,w,c
  4040  000B20  6EF7               	movwf	tblptrh,c
  4041  000B22                     	if	0	;There are less than 3 active tblptr bytes
  4042  000B22                     	endif
  4043  000B22  0009               	tblrd		*+
  4044  000B24  FFFF               	dw	65535	; errata NOP
  4045  000B26  50F5               	movf	tablat,w,c
  4046  000B28  5C18               	subwf	i2sprintf@val,w,c
  4047  000B2A  0009               	tblrd		*+
  4048  000B2C  FFFF               	dw	65535	; errata NOP
  4049  000B2E  50F5               	movf	tablat,w,c
  4050  000B30  5819               	subwfb	i2sprintf@val+1,w,c
  4051  000B32  A0D8               	btfss	status,0,c
  4052  000B34  D002               	goto	i2l2224
  4053  000B36  2A1A               	incf	i2sprintf@c,f,c
  4054  000B38  D7E7               	goto	i2l2212
  4055  000B3A                     i2l2224:
  4056  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  4057                           
  4058                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  4059  000B3C  C014  F013         	movff	i2sprintf@flag,??i2_sprintf
  4060  000B40  0E03               	movlw	3
  4061  000B42  1613               	andwf	??i2_sprintf,f,c
  4062  000B44  B4D8               	btfsc	status,2,c
  4063  000B46  D008               	goto	i2l2230
  4064                           
  4065                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  4066  000B48  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  4067  000B4C  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  4068  000B50  0E2D               	movlw	45
  4069  000B52  6EDF               	movwf	indf2,c
  4070  000B54  4A0D               	infsnz	i2sprintf@sp,f,c
  4071  000B56  2A0E               	incf	i2sprintf@sp+1,f,c
  4072  000B58                     i2l2230:
  4073  000B58  FFFF               	dw	65535	; assembler added errata NOP
  4074                           
  4075                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  4076  000B5A  C01A  F015         	movff	i2sprintf@c,i2sprintf@prec
  4077                           
  4078                           ;doprnt.c: 1493: while(prec--) {
  4079  000B5E  D02C               	goto	i2l2238
  4080  000B60                     i2l2232:
  4081  000B60  FFFF               	dw	65535	; assembler added errata NOP
  4082                           
  4083                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  4084  000B62  5015               	movf	i2sprintf@prec,w,c
  4085  000B64  0D02               	mullw	2
  4086  000B66  0E01               	movlw	low _dpowers
  4087  000B68  24F3               	addwf	prodl,w,c
  4088  000B6A  6EF6               	movwf	tblptrl,c
  4089  000B6C  0E06               	movlw	high _dpowers
  4090  000B6E  20F4               	addwfc	prodh,w,c
  4091  000B70  6EF7               	movwf	tblptrh,c
  4092  000B72                     	if	0	;There are less than 3 active tblptr bytes
  4093  000B72                     	endif
  4094  000B72  0009               	tblrd		*+
  4095  000B74  FFFF               	dw	65535	; errata NOP
  4096  000B76  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4097  000B7A  000A               	tblrd		*-
  4098  000B7C  FFFF               	dw	65535	; errata NOP
  4099  000B7E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4100  000B82  C018  F001         	movff	i2sprintf@val,i2___lwdiv@dividend
  4101  000B86  C019  F002         	movff	i2sprintf@val+1,i2___lwdiv@dividend+1
  4102  000B8A  ECEB  F008         	call	i2___lwdiv	;wreg free
  4103  000B8E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4104  000B92  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4105  000B96  0E00               	movlw	0
  4106  000B98  6E0B               	movwf	i2___lwmod@divisor+1,c
  4107  000B9A  0E0A               	movlw	10
  4108  000B9C  6E0A               	movwf	i2___lwmod@divisor,c
  4109  000B9E  EC20  F00A         	call	i2___lwmod	;wreg free
  4110  000BA2  5008               	movf	?i2___lwmod,w,c
  4111  000BA4  0F30               	addlw	48
  4112  000BA6  6E1A               	movwf	i2sprintf@c,c
  4113                           
  4114                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  4115  000BA8  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  4116  000BAC  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  4117  000BB0  C01A  FFDF         	movff	i2sprintf@c,indf2
  4118  000BB4  4A0D               	infsnz	i2sprintf@sp,f,c
  4119  000BB6  2A0E               	incf	i2sprintf@sp+1,f,c
  4120  000BB8                     i2l2238:
  4121  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  4122  000BBA  0615               	decf	i2sprintf@prec,f,c
  4123  000BBC  2815               	incf	i2sprintf@prec,w,c
  4124  000BBE  A4D8               	btfss	status,2,c
  4125  000BC0  D7CF               	goto	i2l2232
  4126  000BC2                     i2u118_40:
  4127  000BC2  FFFF               	dw	65535	; assembler added errata NOP
  4128  000BC4  C00F  FFF6         	movff	i2sprintf@f,tblptrl
  4129  000BC8  C010  FFF7         	movff	i2sprintf@f+1,tblptrh
  4130  000BCC  4A0F               	infsnz	i2sprintf@f,f,c
  4131  000BCE  2A10               	incf	i2sprintf@f+1,f,c
  4132  000BD0                     	if	0	;tblptru may be non-zero
  4133  000BD0                     	endif
  4134  000BD0                     	if	0	;tblptru may be non-zero
  4135  000BD0                     	endif
  4136  000BD0  0008               	tblrd		*
  4137  000BD2  FFFF               	dw	65535	; errata NOP
  4138  000BD4  CFF5 F01A          	movff	tablat,i2sprintf@c
  4139  000BD8  501A               	movf	i2sprintf@c,w,c
  4140  000BDA  A4D8               	btfss	status,2,c
  4141  000BDC  D746               	goto	i2l2180
  4142  000BDE                     i2u119_40:
  4143  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  4144                           
  4145                           ;doprnt.c: 1557: *sp = 0;
  4146  000BE0  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  4147  000BE4  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  4148  000BE8  0E00               	movlw	0
  4149  000BEA  6EDF               	movwf	indf2,c
  4150  000BEC  0012               	return		;funcret
  4151  000BEE  FFFF               	dw	65535	; errata NOP
  4152  000BF0                     __end_ofi2_sprintf:
  4153                           	opt callstack 0
  4154                           
  4155 ;; *************** function i2___lwmod *****************
  4156 ;; Defined at:
  4157 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  dividend        2    7[COMRAM] unsigned int 
  4160 ;;  divisor         2    9[COMRAM] unsigned int 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  2    7[COMRAM] unsigned int 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4172 ;;      Params:         4       0       0       0       0       0       0
  4173 ;;      Locals:         1       0       0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0
  4175 ;;      Totals:         5       0       0       0       0       0       0
  4176 ;;Total ram usage:        5 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		i2_sprintf
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text25
  4186  001440                     __ptext25:
  4187                           	opt callstack 0
  4188  001440                     i2___lwmod:
  4189                           	opt callstack 0
  4190  001440  FFFF               	dw	65535	; assembler added errata NOP
  4191                           
  4192                           ;incstack = 0
  4193  001442  500A               	movf	i2___lwmod@divisor,w,c
  4194  001444  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4195  001446  B4D8               	btfsc	status,2,c
  4196  001448  D01C               	goto	i2l730
  4197  00144A  0E01               	movlw	1
  4198  00144C  6E0C               	movwf	i2___lwmod@counter,c
  4199  00144E  D005               	goto	i2l2008
  4200  001450                     i2l2006:
  4201  001450  FFFF               	dw	65535	; assembler added errata NOP
  4202  001452  90D8               	bcf	status,0,c
  4203  001454  360A               	rlcf	i2___lwmod@divisor,f,c
  4204  001456  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4205  001458  2A0C               	incf	i2___lwmod@counter,f,c
  4206  00145A                     i2l2008:
  4207  00145A  FFFF               	dw	65535	; assembler added errata NOP
  4208  00145C  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4209  00145E  D7F8               	goto	i2l2006
  4210  001460                     i2u107_40:
  4211  001460  FFFF               	dw	65535	; assembler added errata NOP
  4212  001462  500A               	movf	i2___lwmod@divisor,w,c
  4213  001464  5C08               	subwf	i2___lwmod@dividend,w,c
  4214  001466  500B               	movf	i2___lwmod@divisor+1,w,c
  4215  001468  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4216  00146A  A0D8               	btfss	status,0,c
  4217  00146C  D004               	goto	i2l2014
  4218  00146E  500A               	movf	i2___lwmod@divisor,w,c
  4219  001470  5E08               	subwf	i2___lwmod@dividend,f,c
  4220  001472  500B               	movf	i2___lwmod@divisor+1,w,c
  4221  001474  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4222  001476                     i2l2014:
  4223  001476  FFFF               	dw	65535	; assembler added errata NOP
  4224  001478  90D8               	bcf	status,0,c
  4225  00147A  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4226  00147C  320A               	rrcf	i2___lwmod@divisor,f,c
  4227  00147E  2E0C               	decfsz	i2___lwmod@counter,f,c
  4228  001480  D7EF               	goto	i2u107_40
  4229  001482                     i2l730:
  4230  001482  FFFF               	dw	65535	; assembler added errata NOP
  4231  001484  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4232  001488  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4233  00148C  0012               	return		;funcret
  4234  00148E  FFFF               	dw	65535	; errata NOP
  4235  001490                     __end_ofi2___lwmod:
  4236                           	opt callstack 0
  4237                           
  4238 ;; *************** function i2___lwdiv *****************
  4239 ;; Defined at:
  4240 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  dividend        2    0[COMRAM] unsigned int 
  4243 ;;  divisor         2    2[COMRAM] unsigned int 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4246 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  2    0[COMRAM] unsigned int 
  4249 ;; Registers used:
  4250 ;;		wreg, status,2, status,0
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4256 ;;      Params:         4       0       0       0       0       0       0
  4257 ;;      Locals:         3       0       0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0
  4259 ;;      Totals:         7       0       0       0       0       0       0
  4260 ;;Total ram usage:        7 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; This function calls:
  4263 ;;		Nothing
  4264 ;; This function is called by:
  4265 ;;		i2_sprintf
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text26
  4270  0011D6                     __ptext26:
  4271                           	opt callstack 0
  4272  0011D6                     i2___lwdiv:
  4273                           	opt callstack 0
  4274  0011D6  FFFF               	dw	65535	; assembler added errata NOP
  4275                           
  4276                           ;incstack = 0
  4277  0011D8  0E00               	movlw	0
  4278  0011DA  6E06               	movwf	i2___lwdiv@quotient+1,c
  4279  0011DC  0E00               	movlw	0
  4280  0011DE  6E05               	movwf	i2___lwdiv@quotient,c
  4281  0011E0  5003               	movf	i2___lwdiv@divisor,w,c
  4282  0011E2  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4283  0011E4  B4D8               	btfsc	status,2,c
  4284  0011E6  D020               	goto	i2l720
  4285  0011E8  0E01               	movlw	1
  4286  0011EA  6E07               	movwf	i2___lwdiv@counter,c
  4287  0011EC  D005               	goto	i2l1988
  4288  0011EE                     i2l1986:
  4289  0011EE  FFFF               	dw	65535	; assembler added errata NOP
  4290  0011F0  90D8               	bcf	status,0,c
  4291  0011F2  3603               	rlcf	i2___lwdiv@divisor,f,c
  4292  0011F4  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4293  0011F6  2A07               	incf	i2___lwdiv@counter,f,c
  4294  0011F8                     i2l1988:
  4295  0011F8  FFFF               	dw	65535	; assembler added errata NOP
  4296  0011FA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4297  0011FC  D7F8               	goto	i2l1986
  4298  0011FE                     i2u104_40:
  4299  0011FE  FFFF               	dw	65535	; assembler added errata NOP
  4300  001200  90D8               	bcf	status,0,c
  4301  001202  3605               	rlcf	i2___lwdiv@quotient,f,c
  4302  001204  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4303  001206  5003               	movf	i2___lwdiv@divisor,w,c
  4304  001208  5C01               	subwf	i2___lwdiv@dividend,w,c
  4305  00120A  5004               	movf	i2___lwdiv@divisor+1,w,c
  4306  00120C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4307  00120E  A0D8               	btfss	status,0,c
  4308  001210  D005               	goto	i2l1998
  4309  001212  5003               	movf	i2___lwdiv@divisor,w,c
  4310  001214  5E01               	subwf	i2___lwdiv@dividend,f,c
  4311  001216  5004               	movf	i2___lwdiv@divisor+1,w,c
  4312  001218  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4313  00121A  8005               	bsf	i2___lwdiv@quotient,0,c
  4314  00121C                     i2l1998:
  4315  00121C  FFFF               	dw	65535	; assembler added errata NOP
  4316  00121E  90D8               	bcf	status,0,c
  4317  001220  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4318  001222  3203               	rrcf	i2___lwdiv@divisor,f,c
  4319  001224  2E07               	decfsz	i2___lwdiv@counter,f,c
  4320  001226  D7EB               	goto	i2u104_40
  4321  001228                     i2l720:
  4322  001228  FFFF               	dw	65535	; assembler added errata NOP
  4323  00122A  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4324  00122E  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4325  001232  0012               	return		;funcret
  4326  001234  FFFF               	dw	65535	; errata NOP
  4327  001236                     __end_ofi2___lwdiv:
  4328                           	opt callstack 0
  4329                           
  4330 ;; *************** function _get_letter *****************
  4331 ;; Defined at:
  4332 ;;		line 199 in file "main.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  code            1    wreg     unsigned char 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  code            1    0[COMRAM] unsigned char 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  1    wreg      unsigned char 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4346 ;;      Params:         0       0       0       0       0       0       0
  4347 ;;      Locals:         1       0       0       0       0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0
  4349 ;;      Totals:         1       0       0       0       0       0       0
  4350 ;;Total ram usage:        1 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_capture
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text27
  4360  000E7E                     __ptext27:
  4361                           	opt callstack 0
  4362  000E7E                     _get_letter:
  4363                           	opt callstack 0
  4364  000E7E  FFFF               	dw	65535	; assembler added errata NOP
  4365                           
  4366                           ;incstack = 0
  4367                           ;get_letter@code stored from wreg
  4368  000E80  6E01               	movwf	get_letter@code,c
  4369                           
  4370                           ;main.c: 200: switch(code) {
  4371  000E82  D027               	goto	i2l2170
  4372  000E84                     i2l2116:
  4373  000E84  FFFF               	dw	65535	; assembler added errata NOP
  4374                           
  4375                           ;main.c: 202: return '1';
  4376  000E86  0E31               	movlw	49
  4377  000E88  D04B               	goto	i2l158
  4378  000E8A                     i2l2120:
  4379  000E8A  FFFF               	dw	65535	; assembler added errata NOP
  4380                           
  4381                           ;main.c: 204: return '2';
  4382  000E8C  0E32               	movlw	50
  4383  000E8E  D048               	goto	i2l158
  4384  000E90                     i2l2124:
  4385  000E90  FFFF               	dw	65535	; assembler added errata NOP
  4386                           
  4387                           ;main.c: 206: return '3';
  4388  000E92  0E33               	movlw	51
  4389  000E94  D045               	goto	i2l158
  4390  000E96                     i2l2128:
  4391  000E96  FFFF               	dw	65535	; assembler added errata NOP
  4392                           
  4393                           ;main.c: 208: return '4';
  4394  000E98  0E34               	movlw	52
  4395  000E9A  D042               	goto	i2l158
  4396  000E9C                     i2l2132:
  4397  000E9C  FFFF               	dw	65535	; assembler added errata NOP
  4398                           
  4399                           ;main.c: 210: return '5';
  4400  000E9E  0E35               	movlw	53
  4401  000EA0  D03F               	goto	i2l158
  4402  000EA2                     i2l2136:
  4403  000EA2  FFFF               	dw	65535	; assembler added errata NOP
  4404                           
  4405                           ;main.c: 212: return '6';
  4406  000EA4  0E36               	movlw	54
  4407  000EA6  D03C               	goto	i2l158
  4408  000EA8                     i2l2140:
  4409  000EA8  FFFF               	dw	65535	; assembler added errata NOP
  4410                           
  4411                           ;main.c: 214: return '7';
  4412  000EAA  0E37               	movlw	55
  4413  000EAC  D039               	goto	i2l158
  4414  000EAE                     i2l2144:
  4415  000EAE  FFFF               	dw	65535	; assembler added errata NOP
  4416                           
  4417                           ;main.c: 216: return '8';
  4418  000EB0  0E38               	movlw	56
  4419  000EB2  D036               	goto	i2l158
  4420  000EB4                     i2l2148:
  4421  000EB4  FFFF               	dw	65535	; assembler added errata NOP
  4422                           
  4423                           ;main.c: 218: return '9';
  4424  000EB6  0E39               	movlw	57
  4425  000EB8  D033               	goto	i2l158
  4426  000EBA                     i2l2152:
  4427  000EBA  FFFF               	dw	65535	; assembler added errata NOP
  4428                           
  4429                           ;main.c: 220: return '0';
  4430  000EBC  0E30               	movlw	48
  4431  000EBE  D030               	goto	i2l158
  4432  000EC0                     i2l2156:
  4433  000EC0  FFFF               	dw	65535	; assembler added errata NOP
  4434                           
  4435                           ;main.c: 222: return 'd';
  4436  000EC2  0E64               	movlw	100
  4437  000EC4  D02D               	goto	i2l158
  4438  000EC6                     i2l2160:
  4439  000EC6  FFFF               	dw	65535	; assembler added errata NOP
  4440                           
  4441                           ;main.c: 224: return 'e';
  4442  000EC8  0E65               	movlw	101
  4443  000ECA  D02A               	goto	i2l158
  4444  000ECC                     i2l2164:
  4445  000ECC  FFFF               	dw	65535	; assembler added errata NOP
  4446                           
  4447                           ;main.c: 226: return 'x';
  4448  000ECE  0E78               	movlw	120
  4449  000ED0  D027               	goto	i2l158
  4450  000ED2                     i2l2170:
  4451  000ED2  FFFF               	dw	65535	; assembler added errata NOP
  4452  000ED4  5001               	movf	get_letter@code,w,c
  4453                           
  4454                           ; Switch size 1, requested type "simple"
  4455                           ; Number of cases is 12, Range of values is 119 to 238
  4456                           ; switch strategies available:
  4457                           ; Name         Instructions Cycles
  4458                           ; simple_byte           37    19 (average)
  4459                           ;	Chosen strategy is simple_byte
  4460  000ED6  0A77               	xorlw	119	; case 119
  4461  000ED8  B4D8               	btfsc	status,2,c
  4462  000EDA  D7F2               	goto	i2l2156
  4463  000EDC  0A09               	xorlw	9	; case 126
  4464  000EDE  B4D8               	btfsc	status,2,c
  4465  000EE0  D7F2               	goto	i2l2160
  4466  000EE2  0AC5               	xorlw	197	; case 187
  4467  000EE4  B4D8               	btfsc	status,2,c
  4468  000EE6  D7E6               	goto	i2l2148
  4469  000EE8  0A06               	xorlw	6	; case 189
  4470  000EEA  B4D8               	btfsc	status,2,c
  4471  000EEC  D7DA               	goto	i2l2136
  4472  000EEE  0A03               	xorlw	3	; case 190
  4473  000EF0  B4D8               	btfsc	status,2,c
  4474  000EF2  D7CE               	goto	i2l2124
  4475  000EF4  0A69               	xorlw	105	; case 215
  4476  000EF6  B4D8               	btfsc	status,2,c
  4477  000EF8  D7E0               	goto	i2l2152
  4478  000EFA  0A0C               	xorlw	12	; case 219
  4479  000EFC  B4D8               	btfsc	status,2,c
  4480  000EFE  D7D7               	goto	i2l2144
  4481  000F00  0A06               	xorlw	6	; case 221
  4482  000F02  B4D8               	btfsc	status,2,c
  4483  000F04  D7CB               	goto	i2l2132
  4484  000F06  0A03               	xorlw	3	; case 222
  4485  000F08  B4D8               	btfsc	status,2,c
  4486  000F0A  D7BF               	goto	i2l2120
  4487  000F0C  0A35               	xorlw	53	; case 235
  4488  000F0E  B4D8               	btfsc	status,2,c
  4489  000F10  D7CB               	goto	i2l2140
  4490  000F12  0A06               	xorlw	6	; case 237
  4491  000F14  B4D8               	btfsc	status,2,c
  4492  000F16  D7BF               	goto	i2l2128
  4493  000F18  0A03               	xorlw	3	; case 238
  4494  000F1A  B4D8               	btfsc	status,2,c
  4495  000F1C  D7B3               	goto	i2l2116
  4496  000F1E  D7D6               	goto	i2l2164
  4497  000F20                     i2l158:
  4498  000F20  FFFF               	dw	65535	; assembler added errata NOP
  4499  000F22  0012               	return		;funcret
  4500  000F24  FFFF               	dw	65535	; errata NOP
  4501  000F26                     __end_of_get_letter:
  4502                           	opt callstack 0
  4503                           
  4504 ;; *************** function _erase_letter *****************
  4505 ;; Defined at:
  4506 ;;		line 317 in file "main.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;		None
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;		None
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  1    wreg      void 
  4513 ;; Registers used:
  4514 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4520 ;;      Params:         0       0       0       0       0       0       0
  4521 ;;      Locals:         0       0       0       0       0       0       0
  4522 ;;      Temps:          0       0       0       0       0       0       0
  4523 ;;      Totals:         0       0       0       0       0       0       0
  4524 ;;Total ram usage:        0 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    2
  4527 ;; This function calls:
  4528 ;;		i2_print_message_onLCD
  4529 ;;		i2_strlen
  4530 ;; This function is called by:
  4531 ;;		_capture
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text28
  4536  001528                     __ptext28:
  4537                           	opt callstack 0
  4538  001528                     _erase_letter:
  4539                           	opt callstack 0
  4540  001528  FFFF               	dw	65535	; assembler added errata NOP
  4541                           
  4542                           ;main.c: 318: ans[strlen(ans) - 1] = '\0';
  4543                           
  4544                           ;incstack = 0
  4545  00152A  0EA5               	movlw	low _ans
  4546  00152C  6E01               	movwf	i2strlen@s,c
  4547  00152E  0E00               	movlw	high _ans
  4548  001530  6E02               	movwf	i2strlen@s+1,c
  4549  001532  EC6E  F00A         	call	i2_strlen	;wreg free
  4550  001536  0EA4               	movlw	low (_ans+65535)
  4551  001538  2401               	addwf	?i2_strlen,w,c
  4552  00153A  6ED9               	movwf	fsr2l,c
  4553  00153C  0E00               	movlw	high (_ans+65535)
  4554  00153E  2002               	addwfc	?i2_strlen+1,w,c
  4555  001540  6EDA               	movwf	fsr2h,c
  4556  001542  0E00               	movlw	0
  4557  001544  6EDF               	movwf	indf2,c
  4558                           
  4559                           ;main.c: 319: print_message_onLCD(ans, 192, 0);
  4560  001546  0EA5               	movlw	low _ans
  4561  001548  6E05               	movwf	i2print_message_onLCD@message,c
  4562  00154A  0E00               	movlw	high _ans
  4563  00154C  6E06               	movwf	i2print_message_onLCD@message+1,c
  4564  00154E  0EC0               	movlw	192
  4565  001550  6E07               	movwf	i2print_message_onLCD@place,c
  4566  001552  0E00               	movlw	0
  4567  001554  6E08               	movwf	i2print_message_onLCD@space_bt,c
  4568  001556  EC19  F008         	call	i2_print_message_onLCD	;wreg free
  4569                           
  4570                           ;main.c: 320: print_message_onLCD(" ", 0, 0);
  4571  00155A  0E5D               	movlw	low (STR_5+8)
  4572  00155C  6E05               	movwf	i2print_message_onLCD@message,c
  4573  00155E  0E06               	movlw	high (STR_5+8)
  4574  001560  6E06               	movwf	i2print_message_onLCD@message+1,c
  4575  001562  0E00               	movlw	0
  4576  001564  6E07               	movwf	i2print_message_onLCD@place,c
  4577  001566  0E00               	movlw	0
  4578  001568  6E08               	movwf	i2print_message_onLCD@space_bt,c
  4579  00156A  EC19  F008         	call	i2_print_message_onLCD	;wreg free
  4580  00156E  0012               	return		;funcret
  4581  001570  FFFF               	dw	65535	; errata NOP
  4582  001572                     __end_of_erase_letter:
  4583                           	opt callstack 0
  4584                           
  4585 ;; *************** function i2_print_message_onLCD *****************
  4586 ;; Defined at:
  4587 ;;		line 162 in file "main.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  message         2    4[COMRAM] PTR unsigned char 
  4590 ;;		 -> STR_20(2), STR_19(6), STR_18(12), STR_17(9), 
  4591 ;;		 -> STR_16(9), STR_15(10), STR_14(10), STR_13(6), 
  4592 ;;		 -> STR_12(9), STR_11(6), STR_10(11), STR_9(12), 
  4593 ;;		 -> STR_8(8), capture@m(16), ans(10), STR_5(10), 
  4594 ;;		 -> nums(10), STR_4(13), STR_3(12), STR_2(6), 
  4595 ;;		 -> STR_1(14), 
  4596 ;;  place           1    6[COMRAM] unsigned char 
  4597 ;;  space_bt        1    7[COMRAM] unsigned char 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  print_messag    1   10[COMRAM] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4609 ;;      Params:         4       0       0       0       0       0       0
  4610 ;;      Locals:         1       0       0       0       0       0       0
  4611 ;;      Temps:          2       0       0       0       0       0       0
  4612 ;;      Totals:         7       0       0       0       0       0       0
  4613 ;;Total ram usage:        7 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    1
  4616 ;; This function calls:
  4617 ;;		i2_R_D
  4618 ;;		i2_R_I
  4619 ;;		i2_strlen
  4620 ;; This function is called by:
  4621 ;;		_capture
  4622 ;;		_erase_letter
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text29
  4627  001032                     __ptext29:
  4628                           	opt callstack 0
  4629  001032                     i2_print_message_onLCD:
  4630                           	opt callstack 0
  4631  001032  FFFF               	dw	65535	; assembler added errata NOP
  4632                           
  4633                           ;main.c: 163: if (place > 0) {
  4634                           
  4635                           ;incstack = 0
  4636  001034  5007               	movf	i2print_message_onLCD@place,w,c
  4637  001036  B4D8               	btfsc	status,2,c
  4638  001038  D003               	goto	i2l1968
  4639                           
  4640                           ;main.c: 164: R_I(place);
  4641  00103A  5007               	movf	i2print_message_onLCD@place,w,c
  4642  00103C  EC1F  F00B         	call	i2_R_I
  4643  001040                     i2l1968:
  4644  001040  FFFF               	dw	65535	; assembler added errata NOP
  4645                           
  4646                           ;main.c: 165: };main.c: 166: for (char i = 0; i < strlen(message); i++) {
  4647  001042  0E00               	movlw	0
  4648  001044  6E0B               	movwf	i2print_message_onLCD@i,c
  4649  001046  D022               	goto	i2l1978
  4650  001048                     i2l1970:
  4651  001048  FFFF               	dw	65535	; assembler added errata NOP
  4652                           
  4653                           ;main.c: 167: R_D(message[i]);
  4654  00104A  500B               	movf	i2print_message_onLCD@i,w,c
  4655  00104C  2405               	addwf	i2print_message_onLCD@message,w,c
  4656  00104E  6E09               	movwf	??i2_print_message_onLCD& (0+255),c
  4657  001050  0E00               	movlw	0
  4658  001052  2006               	addwfc	i2print_message_onLCD@message+1,w,c
  4659  001054  6E0A               	movwf	(??i2_print_message_onLCD+1)& (0+255),c
  4660  001056  C009  FFF6         	movff	??i2_print_message_onLCD,tblptrl
  4661  00105A  C00A  FFF7         	movff	??i2_print_message_onLCD+1,tblptrh
  4662  00105E  6AF8               	clrf	tblptru,c
  4663  001060  0E05               	movlw	(high __ramtop+-1)
  4664  001062  64F7               	cpfsgt	tblptrh,c
  4665  001064  D004               	bra	i2u100_47
  4666  001066  0008               	tblrd		*
  4667  001068  FFFF               	dw	65535	; errata NOP
  4668  00106A  50F5               	movf	tablat,w,c
  4669  00106C  D005               	bra	i2u100_40
  4670  00106E                     i2u100_47:
  4671  00106E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4672  001072  CFF7 FFEA          	movff	tblptrh,fsr0h
  4673  001076  50EF               	movf	indf0,w,c
  4674  001078                     i2u100_40:
  4675  001078  EC2D  F00B         	call	i2_R_D
  4676                           
  4677                           ;main.c: 168: if (space_bt) {
  4678  00107C  5008               	movf	i2print_message_onLCD@space_bt,w,c
  4679  00107E  B4D8               	btfsc	status,2,c
  4680  001080  D003               	goto	i2l1976
  4681                           
  4682                           ;main.c: 169: R_D(' ');
  4683  001082  0E20               	movlw	32
  4684  001084  EC2D  F00B         	call	i2_R_D
  4685  001088                     i2l1976:
  4686  001088  FFFF               	dw	65535	; assembler added errata NOP
  4687  00108A  2A0B               	incf	i2print_message_onLCD@i,f,c
  4688  00108C                     i2l1978:
  4689  00108C  FFFF               	dw	65535	; assembler added errata NOP
  4690  00108E  C005  F001         	movff	i2print_message_onLCD@message,i2strlen@s
  4691  001092  C006  F002         	movff	i2print_message_onLCD@message+1,i2strlen@s+1
  4692  001096  EC6E  F00A         	call	i2_strlen	;wreg free
  4693  00109A  500B               	movf	i2print_message_onLCD@i,w,c
  4694  00109C  6E09               	movwf	??i2_print_message_onLCD& (0+255),c
  4695  00109E  6A0A               	clrf	(??i2_print_message_onLCD+1)& (0+255),c
  4696  0010A0  5001               	movf	?i2_strlen,w,c
  4697  0010A2  5C09               	subwf	??i2_print_message_onLCD,w,c
  4698  0010A4  5002               	movf	?i2_strlen+1,w,c
  4699  0010A6  580A               	subwfb	??i2_print_message_onLCD+1,w,c
  4700  0010A8  B0D8               	btfsc	status,0,c
  4701  0010AA  0012               	return		;funcret
  4702  0010AC  FFFF               	dw	65535	; assembler added errata NOP
  4703  0010AE  D7CC               	goto	i2l1970
  4704  0010B0  FFFF               	dw	65535	; errata NOP
  4705  0010B2                     __end_ofi2_print_message_onLCD:
  4706                           	opt callstack 0
  4707                           
  4708 ;; *************** function i2_strlen *****************
  4709 ;; Defined at:
  4710 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strlen.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  s               2    0[COMRAM] PTR const unsigned char 
  4713 ;;		 -> STR_20(2), STR_19(6), STR_18(12), STR_17(9), 
  4714 ;;		 -> STR_16(9), STR_15(10), STR_14(10), STR_13(6), 
  4715 ;;		 -> STR_12(9), STR_11(6), STR_10(11), STR_9(12), 
  4716 ;;		 -> STR_8(8), capture@m(16), ans(10), STR_5(10), 
  4717 ;;		 -> nums(10), STR_4(13), STR_3(12), STR_2(6), 
  4718 ;;		 -> STR_1(14), 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  strlen          2    2[COMRAM] PTR const unsigned char 
  4721 ;;		 -> STR_20(2), STR_19(6), STR_18(12), STR_17(9), 
  4722 ;;		 -> STR_16(9), STR_15(10), STR_14(10), STR_13(6), 
  4723 ;;		 -> STR_12(9), STR_11(6), STR_10(11), STR_9(12), 
  4724 ;;		 -> STR_8(8), capture@m(16), ans(10), STR_5(10), 
  4725 ;;		 -> nums(10), STR_4(13), STR_3(12), STR_2(6), 
  4726 ;;		 -> STR_1(14), 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  2    0[COMRAM] unsigned int 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4736 ;;      Params:         2       0       0       0       0       0       0
  4737 ;;      Locals:         2       0       0       0       0       0       0
  4738 ;;      Temps:          0       0       0       0       0       0       0
  4739 ;;      Totals:         4       0       0       0       0       0       0
  4740 ;;Total ram usage:        4 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; This function calls:
  4743 ;;		Nothing
  4744 ;; This function is called by:
  4745 ;;		_capture
  4746 ;;		_erase_letter
  4747 ;;		i2_print_message_onLCD
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text30
  4752  0014DC                     __ptext30:
  4753                           	opt callstack 0
  4754  0014DC                     i2_strlen:
  4755                           	opt callstack 0
  4756  0014DC  FFFF               	dw	65535	; assembler added errata NOP
  4757                           
  4758                           ;incstack = 0
  4759  0014DE  C001  F003         	movff	i2strlen@s,i2strlen@cp
  4760  0014E2  C002  F004         	movff	i2strlen@s+1,i2strlen@cp+1
  4761  0014E6  D003               	goto	i2l1818
  4762  0014E8                     i2l1816:
  4763  0014E8  FFFF               	dw	65535	; assembler added errata NOP
  4764  0014EA  4A03               	infsnz	i2strlen@cp,f,c
  4765  0014EC  2A04               	incf	i2strlen@cp+1,f,c
  4766  0014EE                     i2l1818:
  4767  0014EE  FFFF               	dw	65535	; assembler added errata NOP
  4768  0014F0  C003  FFF6         	movff	i2strlen@cp,tblptrl
  4769  0014F4  C004  FFF7         	movff	i2strlen@cp+1,tblptrh
  4770  0014F8  6AF8               	clrf	tblptru,c
  4771  0014FA  0E05               	movlw	(high __ramtop+-1)
  4772  0014FC  64F7               	cpfsgt	tblptrh,c
  4773  0014FE  D004               	bra	i2u84_47
  4774  001500  0008               	tblrd		*
  4775  001502  FFFF               	dw	65535	; errata NOP
  4776  001504  50F5               	movf	tablat,w,c
  4777  001506  D005               	bra	i2u84_40
  4778  001508                     i2u84_47:
  4779  001508  CFF6 FFE9          	movff	tblptrl,fsr0l
  4780  00150C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4781  001510  50EF               	movf	indf0,w,c
  4782  001512                     i2u84_40:
  4783  001512  0900               	iorlw	0
  4784  001514  A4D8               	btfss	status,2,c
  4785  001516  D7E8               	goto	i2l1816
  4786  001518  5001               	movf	i2strlen@s,w,c
  4787  00151A  5C03               	subwf	i2strlen@cp,w,c
  4788  00151C  6E01               	movwf	?i2_strlen,c
  4789  00151E  5002               	movf	i2strlen@s+1,w,c
  4790  001520  5804               	subwfb	i2strlen@cp+1,w,c
  4791  001522  6E02               	movwf	?i2_strlen+1,c
  4792  001524  0012               	return		;funcret
  4793  001526  FFFF               	dw	65535	; errata NOP
  4794  001528                     __end_ofi2_strlen:
  4795                           	opt callstack 0
  4796                           
  4797 ;; *************** function i2_R_I *****************
  4798 ;; Defined at:
  4799 ;;		line 144 in file "main.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;  dato            1    wreg     unsigned char 
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;  dato            1    0[COMRAM] unsigned char 
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      void 
  4806 ;; Registers used:
  4807 ;;		wreg, status,2, cstack
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4813 ;;      Params:         0       0       0       0       0       0       0
  4814 ;;      Locals:         1       0       0       0       0       0       0
  4815 ;;      Temps:          0       0       0       0       0       0       0
  4816 ;;      Totals:         1       0       0       0       0       0       0
  4817 ;;Total ram usage:        1 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		i2_print_message_onLCD
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text31
  4827  00163E                     __ptext31:
  4828                           	opt callstack 0
  4829  00163E                     i2_R_I:
  4830                           	opt callstack 0
  4831  00163E  FFFF               	dw	65535	; assembler added errata NOP
  4832                           
  4833                           ;incstack = 0
  4834                           ;i2R_I@dato stored from wreg
  4835  001640  6E01               	movwf	i2R_I@dato,c
  4836                           
  4837                           ;main.c: 145: LC3 = 0;
  4838  001642  968B               	bcf	3979,3,c	;volatile
  4839                           
  4840                           ;main.c: 146: LC4 = 0;
  4841  001644  988B               	bcf	3979,4,c	;volatile
  4842                           
  4843                           ;main.c: 147: LATD = dato;
  4844  001646  C001  FF8C         	movff	i2R_I@dato,3980	;volatile
  4845                           
  4846                           ;main.c: 148: LC3 = 1;
  4847  00164A  868B               	bsf	3979,3,c	;volatile
  4848                           
  4849                           ;main.c: 149: _delay((unsigned long)((100)*(4000000/4000000.0)));
  4850  00164C  0E19               	movlw	25
  4851  00164E                     i2u184_47:
  4852  00164E  FFFF               	dw	65535	; errata NOP
  4853  001650  2EE8               	decfsz	wreg,f,c
  4854  001652  D7FD               	bra	i2u184_47
  4855                           
  4856                           ;main.c: 150: LC3 = 0;
  4857  001654  968B               	bcf	3979,3,c	;volatile
  4858  001656  0012               	return		;funcret
  4859  001658  FFFF               	dw	65535	; errata NOP
  4860  00165A                     __end_ofi2_R_I:
  4861                           	opt callstack 0
  4862                           
  4863 ;; *************** function i2_R_D *****************
  4864 ;; Defined at:
  4865 ;;		line 153 in file "main.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  dato            1    wreg     unsigned char 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;  dato            1    0[COMRAM] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4879 ;;      Params:         0       0       0       0       0       0       0
  4880 ;;      Locals:         1       0       0       0       0       0       0
  4881 ;;      Temps:          0       0       0       0       0       0       0
  4882 ;;      Totals:         1       0       0       0       0       0       0
  4883 ;;Total ram usage:        1 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		i2_print_message_onLCD
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text32
  4893  00165A                     __ptext32:
  4894                           	opt callstack 0
  4895  00165A                     i2_R_D:
  4896                           	opt callstack 0
  4897  00165A  FFFF               	dw	65535	; assembler added errata NOP
  4898                           
  4899                           ;incstack = 0
  4900                           ;i2R_D@dato stored from wreg
  4901  00165C  6E01               	movwf	i2R_D@dato,c
  4902                           
  4903                           ;main.c: 154: LC3 = 0;
  4904  00165E  968B               	bcf	3979,3,c	;volatile
  4905                           
  4906                           ;main.c: 155: LC4 = 1;
  4907  001660  888B               	bsf	3979,4,c	;volatile
  4908                           
  4909                           ;main.c: 156: LATD = dato;
  4910  001662  C001  FF8C         	movff	i2R_D@dato,3980	;volatile
  4911                           
  4912                           ;main.c: 157: LC3 = 1;
  4913  001666  868B               	bsf	3979,3,c	;volatile
  4914                           
  4915                           ;main.c: 158: _delay((unsigned long)((100)*(4000000/4000000.0)));
  4916  001668  0E19               	movlw	25
  4917  00166A                     i2u185_47:
  4918  00166A  FFFF               	dw	65535	; errata NOP
  4919  00166C  2EE8               	decfsz	wreg,f,c
  4920  00166E  D7FD               	bra	i2u185_47
  4921                           
  4922                           ;main.c: 159: LC3 = 0;
  4923  001670  968B               	bcf	3979,3,c	;volatile
  4924  001672  0012               	return		;funcret
  4925  001674  FFFF               	dw	65535	; errata NOP
  4926  001676                     __end_ofi2_R_D:
  4927                           	opt callstack 0
  4928                           
  4929                           	psect	rparam
  4930  0000                     
  4931                           	psect	temp
  4932  000047                     btemp:
  4933                           	opt callstack 0
  4934  000047                     	ds	1
  4935  0000                     int$flags	set	btemp
  4936  0000                     wtemp8	set	btemp+1
  4937  0000                     ttemp5	set	btemp+1
  4938  0000                     ttemp6	set	btemp+4
  4939  0000                     ttemp7	set	btemp+8
  4940                           tosu	equ	0xFFF
  4941                           tosh	equ	0xFFE
  4942                           tosl	equ	0xFFD
  4943                           stkptr	equ	0xFFC
  4944                           pclatu	equ	0xFFB
  4945                           pclath	equ	0xFFA
  4946                           pcl	equ	0xFF9
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           prodh	equ	0xFF4
  4952                           prodl	equ	0xFF3
  4953                           indf0	equ	0xFEF
  4954                           postinc0	equ	0xFEE
  4955                           postdec0	equ	0xFED
  4956                           preinc0	equ	0xFEC
  4957                           plusw0	equ	0xFEB
  4958                           fsr0h	equ	0xFEA
  4959                           fsr0l	equ	0xFE9
  4960                           wreg	equ	0xFE8
  4961                           indf1	equ	0xFE7
  4962                           postinc1	equ	0xFE6
  4963                           postdec1	equ	0xFE5
  4964                           preinc1	equ	0xFE4
  4965                           plusw1	equ	0xFE3
  4966                           fsr1h	equ	0xFE2
  4967                           fsr1l	equ	0xFE1
  4968                           bsr	equ	0xFE0
  4969                           indf2	equ	0xFDF
  4970                           postinc2	equ	0xFDE
  4971                           postdec2	equ	0xFDD
  4972                           preinc2	equ	0xFDC
  4973                           plusw2	equ	0xFDB
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8


Data Sizes:
    Strings     163
    Constant    10
    Data        12
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     63      70
    BANK0           128     34      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_20(CODE[2]), STR_19(CODE[6]), STR_18(CODE[12]), STR_17(CODE[9]), 
		 -> STR_16(CODE[9]), STR_15(CODE[10]), STR_14(CODE[10]), STR_13(CODE[6]), 
		 -> STR_12(CODE[9]), STR_11(CODE[6]), STR_10(CODE[11]), STR_9(CODE[12]), 
		 -> STR_8(CODE[8]), capture@m(COMRAM[16]), ans(BANK0[10]), STR_5(CODE[10]), 
		 -> nums(BANK0[10]), STR_4(CODE[13]), STR_3(CODE[12]), STR_2(CODE[6]), 
		 -> STR_1(CODE[14]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_20(CODE[2]), STR_19(CODE[6]), STR_18(CODE[12]), STR_17(CODE[9]), 
		 -> STR_16(CODE[9]), STR_15(CODE[10]), STR_14(CODE[10]), STR_13(CODE[6]), 
		 -> STR_12(CODE[9]), STR_11(CODE[6]), STR_10(CODE[11]), STR_9(CODE[12]), 
		 -> STR_8(CODE[8]), capture@m(COMRAM[16]), ans(BANK0[10]), STR_5(CODE[10]), 
		 -> nums(BANK0[10]), STR_4(CODE[13]), STR_3(CODE[12]), STR_2(CODE[6]), 
		 -> STR_1(CODE[14]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_7(CODE[3]), STR_6(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> get_rand_num@r(BANK0[1]), capture@m(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    compare_nums@nums	PTR unsigned char  size(2) Largest target is 10
		 -> nums(BANK0[10]), 

    compare_nums@r	PTR unsigned char  size(2) Largest target is 10
		 -> ans(BANK0[10]), 

    clear_vec@vec	PTR PTR int  size(2) Largest target is 10
		 -> ans(BANK0[10]), nums(BANK0[10]), 

    print_message_onLCD@message	PTR unsigned char  size(2) Largest target is 16
		 -> STR_20(CODE[2]), STR_19(CODE[6]), STR_18(CODE[12]), STR_17(CODE[9]), 
		 -> STR_16(CODE[9]), STR_15(CODE[10]), STR_14(CODE[10]), STR_13(CODE[6]), 
		 -> STR_12(CODE[9]), STR_11(CODE[6]), STR_10(CODE[11]), STR_9(CODE[12]), 
		 -> STR_8(CODE[8]), capture@m(COMRAM[16]), ans(BANK0[10]), STR_5(CODE[10]), 
		 -> nums(BANK0[10]), STR_4(CODE[13]), STR_3(CODE[12]), STR_2(CODE[6]), 
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_print_message_onLCD
    _win_protocol->_print_message_onLCD
    _game_won->_print_message_onLCD
    _loss_protocol->_print_message_onLCD
    _reset_game->_clear_vec
    _print_message_onLCD->_strlen
    _clean_screen->_R_I
    _init_lcd->_R_I
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _rand->___lmul
    ___awmod->_rand

Critical Paths under _capture in COMRAM

    _capture->i2_sprintf
    i2_sprintf->i2___lwmod
    i2___lwmod->i2___lwdiv
    _erase_letter->i2_print_message_onLCD
    i2_print_message_onLCD->i2_strlen

Critical Paths under _main in BANK0

    _main->_get_rand_num
    _win_protocol->_game_won
    _game_won->_print_message_onLCD
    _loss_protocol->_print_message_onLCD
    _get_rand_num->_sprintf
    _sprintf->___lwmod
    _rand->___lmul

Critical Paths under _capture in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _capture in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _capture in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _capture in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _capture in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _capture in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   30532
                                             26 BANK0      8     8      0
                                _R_I
                       _clean_screen
                       _compare_nums
                       _get_rand_num
                           _init_lcd
                    _init_serial_com
                     _initial_config
                      _loss_protocol
                _print_message_onLCD
                              _srand
                       _win_protocol
 ---------------------------------------------------------------------------------
 (1) _win_protocol                                         2     2      0   13538
                                              6 BANK0      2     2      0
                       _clean_screen
                          _clear_vec
                           _game_won
                _print_message_onLCD
 ---------------------------------------------------------------------------------
 (2) _game_won                                             2     2      0    6769
                                              4 BANK0      2     2      0
                       _clean_screen
                _print_message_onLCD
                         _reset_game
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      98
                                             56 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _loss_protocol                                        2     2      0    6769
                                              4 BANK0      2     2      0
                       _clean_screen
                _print_message_onLCD
                         _reset_game
 ---------------------------------------------------------------------------------
 (3) _reset_game                                           0     0      0     319
                          _clear_vec
 ---------------------------------------------------------------------------------
 (4) _clear_vec                                            6     4      2     319
                                             56 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _print_message_onLCD                                  7     3      4    6428
                                             60 COMRAM     3     3      0
                                              0 BANK0      4     0      4
                                _R_D
                                _R_I
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     266
                                             56 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _R_D                                                  1     1      0      22
                                             56 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _clean_screen                                         1     1      0      22
                                             57 COMRAM     1     1      0
                                _R_I
 ---------------------------------------------------------------------------------
 (1) _initial_config                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_serial_com                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0      22
                                             57 COMRAM     1     1      0
                                _R_I
 ---------------------------------------------------------------------------------
 (3) _R_I                                                  1     1      0      22
                                             56 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_rand_num                                         7     6      1    3057
                                             19 BANK0      7     6      1
                            ___awmod
                               _rand
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    1814
                                              5 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             56 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     456
                                             60 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     456
                                             56 COMRAM     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              8 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _compare_nums                                         8     4      4     375
                                             56 COMRAM     6     2      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _capture                                             30    30      0    2876
                                             26 COMRAM    30    30      0
                       _erase_letter
                         _get_letter
              i2_print_message_onLCD
                          i2_sprintf
                           i2_strlen
 ---------------------------------------------------------------------------------
 (6) i2_sprintf                                           23    17      6    1023
                                             12 COMRAM    14     8      6
                         _get_letter (ARG)
                          i2___lwdiv
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _get_letter                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _erase_letter                                         0     0      0     770
              i2_print_message_onLCD
                           i2_strlen
 ---------------------------------------------------------------------------------
 (6) i2_print_message_onLCD                                7     3      4     602
                                              4 COMRAM     7     3      4
                              i2_R_D
                              i2_R_I
                           i2_strlen
 ---------------------------------------------------------------------------------
 (6) i2_strlen                                             4     2      2     168
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) i2_R_I                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) i2_R_D                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _R_I
   _clean_screen
     _R_I
   _compare_nums
   _get_rand_num
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _init_lcd
     _R_I
   _init_serial_com
   _initial_config
   _loss_protocol
     _clean_screen
       _R_I
     _print_message_onLCD
       _R_D
       _R_I
       _strlen
     _reset_game
       _clear_vec
   _print_message_onLCD
     _R_D
     _R_I
     _strlen
   _srand
   _win_protocol
     _clean_screen
       _R_I
     _clear_vec
     _game_won
       _clean_screen
         _R_I
       _print_message_onLCD
         _R_D
         _R_I
         _strlen
       _reset_game
         _clear_vec
     _print_message_onLCD
       _R_D
       _R_I
       _strlen

 _capture (ROOT)
   _erase_letter
     i2_print_message_onLCD
       i2_R_D
       i2_R_I
       i2_strlen
     i2_strlen
   _get_letter
   i2_print_message_onLCD
     i2_R_D
     i2_R_I
     i2_strlen
   i2_sprintf
     _get_letter (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
   i2_strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     22      3F       5       49.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3F      46       1       55.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      85      15        0.0%
DATA                 0      0      85       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 01 20:10:14 2020

                                                i2___lwdiv@dividend 0001  
                                                       __CFG_OSC$XT 000000  
                                                               l196 0E78  
                                                               l189 12E6  
                                                               l720 1168  
                                                               l730 1432  
                                                               _LC3 007C5B  
                                                               _LC4 007C5C  
                                                               u690 14C6  
                                                               u790 113E  
                                                               u960 0FF2  
                                                               u697 14BC  
                                                               _R_D 1606  
                                                               _R_I 1622  
                                                     ?_compare_nums 0039  
                                                      __CFG_BOR$OFF 000000  
                                                               _ans 00A5  
                                                               _lvl 00A4  
                                                      ___awmod@sign 008D  
                                                               prod 000FF3  
                                                               wreg 000FE8  
                                                  ??_initial_config 0039  
                                                      __CFG_LVP$OFF 000000  
                                                              ?_R_D 0001  
                                                              ?_R_I 0001  
                                                      __CFG_WDT$OFF 000000  
                                                              l2410 08F4  
                                                              l2412 08FC  
                                                              l2404 08D6  
                                                              l2422 0914  
                                                              l1702 149C  
                                                              l2440 0974  
                                                              l2424 0944  
                                                              l1704 14A2  
                                                              l2434 096E  
                                                              l1714 13BA  
                                                              l2602 076C  
                                                              l2524 12D6  
                                                              l2372 0F82  
                                                              l2364 0F36  
                                                              l2604 0774  
                                                              l2518 12B0  
                                                              l2526 12DA  
                                                              l2382 11A0  
                                                              l2390 1400  
                                                              l2462 0A26  
                                                              l2454 09C2  
                                                              l2366 0F3E  
                                                              l2374 0F86  
                                                              l1718 13DE  
                                                              l2542 0E1A  
                                                              l2622 07E0  
                                                              l2614 07B0  
                                                              l2392 140A  
                                                              l2456 09CA  
                                                              l2640 087C  
                                                              l2608 077E  
                                                              l2378 1188  
                                                              l1762 112E  
                                                              l2554 0E32  
                                                              l2618 07BE  
                                                              l1940 0FD2  
                                                              l1764 1138  
                                                              l2556 0E48  
                                                              l2652 08B2  
                                                              l1774 115C  
                                                              l2398 1426  
                                                              l2654 08B8  
                                                              l1960 1024  
                                                              l1952 1008  
                                                              l1944 0FE2  
                                                              l1936 0FC4  
                                                              l2656 08C0  
                                                              l1946 0FEC  
                                                              l1956 1014  
                                                              STR_1 060B  
                                                              STR_2 0696  
                                                              STR_3 0632  
                                                              STR_4 0619  
                                                              STR_5 0655  
                                                              STR_6 06A8  
                                                              STR_7 06AB  
                                                              STR_8 068E  
                                                              STR_9 0626  
                                                              u1510 0A30  
                                                              _LATB 000F8A  
                                                              _LATC 000F8B  
                                                              u1440 1410  
                                                              u1520 0A4C  
                                                              _LATD 000F8C  
                                                              u1610 0818  
                                                              u1460 08E0  
                                                              u1380 0F70  
                                                              u1620 081C  
                                                              u1490 09A4  
                                                              u1387 0F66  
                                                              u1707 0E62  
                                                              u1717 0C32  
                                                              _IPR1 000F9F  
                                                              u1807 130C  
                                                              u1727 0C80  
                                                              _PIE1 000F9D  
                                                              u1584 0792  
                                                              u1817 1334  
                                                              u1737 0CCE  
                                                              u1585 078C  
                                                              u1657 06F6  
                                                              u1827 1632  
                                                              u1747 0D0C  
                                                              u1667 0744  
                                                              u1757 0D58  
                                                              u1677 07A2  
                                                              u1767 0DA6  
                                                              u1687 0840  
                                                              u1777 1616  
                                                              u1697 0DE8  
                                                              u1787 15F6  
                                                              u1797 12F4  
                                                              _PIR1 000F9E  
                                                      _win_protocol 0DC4  
                                                      __CFG_PWRT$ON 000000  
                                                     ?_erase_letter 0001  
                                                              _main 06B0  
                                                              _rand 1344  
                                                 ??_init_serial_com 0039  
                                                              _nums 00AF  
                                                              fsr0h 000FEA  
                                                i2___lwdiv@quotient 0005  
                                                              indf0 000FEF  
                                                              fsr2h 000FDA  
                                                              fsr0l 000FE9  
                                                              indf2 000FDF  
                                                              fsr1l 000FE1  
                                                              fsr2l 000FD9  
                                                              btemp 0047  
                                                              prodh 000FF4  
                                                              prodl 000FF3  
                                                              start 0126  
                                                    ??_get_rand_num 0094  
                                                      ___param_bank 000000  
                                                             ??_R_D 0039  
                                                             ??_R_I 0039  
                                           ??i2_print_message_onLCD 0009  
                                                             ?_main 0001  
                                                             ?_rand 003D  
                                                             STR_10 064A  
                                                             STR_11 06A2  
                                                             STR_20 065D  
                                                             STR_12 0673  
                                                             STR_13 069C  
                                                             STR_14 065F  
                                                             STR_15 0669  
                                                             STR_16 0685  
                                                             STR_17 067C  
                                                             STR_18 063E  
                                                             STR_19 069C  
                                                   __end_of___awmod 1032  
                                                    ??_compare_nums 003D  
                                                   __end_of___lwdiv 1176  
                                                   __end_of___lwmod 1440  
                                                             i2l153 00F6  
                                                             i2l149 00F2  
                                                             i2l158 0F20  
                                                             i2l720 1228  
                                                             i2l730 1482  
                                              __end_of_clean_screen 1606  
                                                             _RCSTA 000FAB  
                                                             i2_R_D 165A  
                                                             _SPBRG 000FAF  
                                                             i2_R_I 163E  
                                                             _PORTB 000F81  
                                                             _PORTC 000F82  
                                                             _PORTD 000F83  
                                                             _TRISB 000F93  
                                                             _TRISC 000F94  
                                                             _TRISD 000F95  
                                                             _TXSTA 000FAC  
                                                   __end_of_capture 0126  
                                               ___lmul@multiplicand 0084  
                                                   __end_of_dpowers 060B  
                                                             _randx 0040  
                                                             _lvl_n 00B9  
                                                             _srand 1676  
                                                             main@i 00A1  
                                                    ??_erase_letter 000C  
                                                             tablat 000FF5  
                                                             ttemp5 0048  
                                                             ttemp6 004B  
                                                             ttemp7 004F  
                                                             status 000FD8  
                                                             wtemp8 0048  
                                                   __end_of_sprintf 0A5E  
                                                __size_ofi2___lwdiv 0060  
                                                __size_ofi2___lwmod 0050  
                                                  __end_ofi2_strlen 1528  
                                                   __initialization 1236  
                                                      __end_of_main 08C8  
                                                      __end_of_rand 139C  
                                              print_message_onLCD@i 003F  
                                                     get_rand_num@r 0099  
                                                  get_rand_num@from 0098  
                                                            ??_main 009A  
                                                            ??_rand 003F  
                                                     __activetblptr 000002  
                                                        i2sprintf@c 001A  
                                                        i2sprintf@f 000F  
                                                            ?i2_R_D 0001  
                                                            ?i2_R_I 0001  
                                                __size_ofi2_sprintf 0192  
                                                        i2strlen@cp 0003  
                                                     _counting_down 0046  
                                                            ?_srand 0039  
                                                            i2l2014 1476  
                                                            i2l2006 1450  
                                                            i2l2120 0E8A  
                                                            i2l2008 145A  
                                                            i2l2200 0AD8  
                                                            i2l2210 0B02  
                                                            i2l2140 0EA8  
                                                            i2l2132 0E9C  
                                                            i2l2124 0E90  
                                                            i2l2116 0E84  
                                                            i2l2212 0B08  
                                                            i2l2230 0B58  
                                                            i2l2160 0EC6  
                                                            i2l2152 0EBA  
                                                            i2l2144 0EAE  
                                                            i2l2136 0EA2  
                                                            i2l2128 0E96  
                                                            i2l2232 0B60  
                                                            i2l2224 0B3A  
                                                            i2l2170 0ED2  
                                                            i2l2164 0ECC  
                                                            i2l2156 0EC0  
                                                            i2l2148 0EB4  
                                                            i2l2180 0A6A  
                                                            i2l2238 0BB8  
                                                            i2l2350 00D4  
                                                            i2l2326 003C  
                                                            i2l2186 0A88  
                                                            i2l2354 00E6  
                                                            i2l2188 0A90  
                                                            i2l2198 0AA8  
                                                            i2l1816 14E8  
                                                            i2l1818 14EE  
                                                            i2l1970 1048  
                                                            i2l1976 1088  
                                                            i2l1968 1040  
                                                            i2l1978 108C  
                                                            i2l1986 11EE  
                                                            i2l1988 11F8  
                                                            i2l1998 121C  
                                                            _INTCON 000FF2  
                                                    capture@ans_len 0038  
                                                  __end_of_game_won 0CE8  
                                                            ___lmul 1176  
                                                         ??___awmod 003F  
                                                         ??___lwdiv 003D  
                                                         ??___lwmod 0040  
                                                  __end_of_init_lcd 1344  
                                                            clear_0 127C  
                                                   ___awmod@divisor 008A  
                                                         ??_capture 001B  
                                                   ___awmod@counter 008C  
                                                            _strlen 1490  
                                                            _typing 00A3  
                                          print_message_onLCD@place 0082  
                                                      __pdataCOMRAM 0040  
                                                 __end_ofi2___lwdiv 1236  
                                                      __mediumconst 0000  
                                                 __end_ofi2___lwmod 1490  
                                                            tblptrh 000FF7  
                                                            tblptrl 000FF6  
                                                            tblptru 000FF8  
                                              __end_of_get_rand_num 1116  
                                                            srand@x 0039  
                                                         ??_sprintf 008B  
                                                     compare_nums@i 0081  
                                                     compare_nums@r 003B  
                                                        __accesstop 0080  
                                           __end_of__initialization 1284  
                                                     i2sprintf@flag 0014  
                                              __end_of_compare_nums 12EC  
                                                     ___rparam_used 000001  
                                                     i2sprintf@prec 0015  
                                                 __end_ofi2_sprintf 0BF0  
                                             __end_of_loss_protocol 0DC4  
                                                     __end_ofi2_R_D 1676  
                                                     __end_ofi2_R_I 165A  
                                                i2___lwmod@dividend 0008  
                                                    __pcstackCOMRAM 0001  
                                                      __pidataBANK0 168E  
                                                    get_letter@code 0001  
                                             __size_of_clean_screen 001E  
                                                     __end_of_srand 1688  
                                              __end_of_erase_letter 1572  
                                                __size_of_clear_vec 0052  
                                                    get_rand_num@to 0093  
                                                           ??i2_R_D 0001  
                                                           ??i2_R_I 0001  
                                                   _init_serial_com 159A  
                                                         ?i2_strlen 0001  
                                       __end_of_print_message_onLCD 0FAC  
                                                           ??_srand 003B  
                                                        __pbssBANK0 00A2  
                                                       i2sprintf@ap 0016  
                                                       i2sprintf@sp 000D  
                                                      _clean_screen 15E8  
                                       print_message_onLCD@space_bt 0083  
                                                           ?___lmul 0080  
                                    __size_ofi2_print_message_onLCD 0080  
                                                    ___lmul@product 0039  
                                     __end_ofi2_print_message_onLCD 10B2  
                                                           R_D@dato 0039  
                                                           ?_strlen 0039  
                                                           R_I@dato 0039  
                                                           _INTCON2 000FF1  
                                                        _get_letter 0E7E  
                                                         ?_game_won 0001  
                                                           i2u84_40 1512  
                                                           i2u84_47 1508  
                                                        ??i2_strlen 0003  
                                                         ?_init_lcd 0001  
                                                 __end_of_clear_vec 13EE  
                                                        _first_exec 0045  
                                                           __Hparam 0000  
                                                           __Lparam 0000  
                                                   __size_of___lmul 0060  
                                                           ___awmod 0FAC  
                                                           ___lwdiv 1116  
                                                           ___lwmod 13EE  
                                                      __psmallconst 0600  
                                                           __pcinit 1236  
                                           __end_of_init_serial_com 15C2  
                                                           __ramtop 0600  
                                                           _capture 0008  
                                                           __ptext0 06B0  
                                                           __ptext1 0DC4  
                                                           __ptext2 0BF0  
                                                           __ptext3 1676  
                                                           __ptext4 0CE8  
                                                           __ptext5 1572  
                                                           __ptext6 139C  
                                                           __ptext7 0F26  
                                                           __ptext8 1490  
                                                           __ptext9 1606  
                                             __size_of_get_rand_num 0064  
                                                   __size_of_strlen 004C  
                                                           _attempt 0044  
                                                      __size_of_R_D 001C  
                                                      __size_of_R_I 001C  
                                                           _dpowers 0601  
                                                  ___awmod@dividend 0088  
                                                        ??_game_won 0084  
                                                           _sprintf 08C8  
                                                           main@spc 009F  
                                              end_of_initialization 1284  
                                             __size_of_compare_nums 005A  
                                                        clear_vec@i 003E  
                                                        capture@pos 0037  
                                                     __Lmediumconst 0000  
                                                        ??_init_lcd 003A  
                                                         i2R_D@dato 0001  
                                           __size_of_initial_config 0026  
                                                         i2R_I@dato 0001  
                                                        _reset_game 1572  
                                             __size_of_erase_letter 004A  
                                                      _get_rand_num 10B2  
                                                           postdec1 000FE5  
                                                           postdec2 000FDD  
                                                           postinc0 000FEE  
                                                           postinc1 000FE6  
                                                           postinc2 000FDE  
                                                           strlen@s 0039  
                                                      _compare_nums 1292  
                                                       ?_get_letter 0001  
                                                 i2___lwdiv@divisor 0003  
                                                         i2___lwdiv 11D6  
                                                         i2___lwmod 1440  
                                                 i2___lwdiv@counter 0007  
                                                      _erase_letter 1528  
                                                         i2_sprintf 0A5E  
                                                    __end_of___lmul 11D6  
                                                     __pidataCOMRAM 1688  
                                                  ?_init_serial_com 0001  
                                                    __end_of_strlen 14DC  
                                               start_initialization 1236  
                                                       __end_of_R_D 1622  
                                                       __end_of_R_I 163E  
                                                   get_rand_num@num 0096  
                                                        ?i2___lwdiv 0001  
                                                        ?i2___lwmod 0008  
                                                     ?_win_protocol 0001  
                                                 __size_ofi2_strlen 004C  
                                                         i2strlen@s 0001  
                                      i2print_message_onLCD@message 0005  
                                                       ?_reset_game 0001  
                                                          ??___lmul 0039  
                                               __size_of_get_letter 00A8  
                                                        ?i2_sprintf 000D  
                                                       __pdataBANK0 00B9  
                                                          ??_strlen 003B  
                                                       __pbssCOMRAM 0046  
                                                      i2sprintf@val 0018  
                                                     __pcstackBANK0 0080  
                                            __size_of_loss_protocol 00DC  
                                                 i2___lwmod@divisor 000A  
                                                 i2___lwmod@counter 000C  
                                                    ??_win_protocol 0086  
                                                 __size_of_game_won 00F8  
                                                       sprintf@flag 008C  
                                                    _initial_config 15C2  
                                                       sprintf@prec 008D  
                                      __size_of_print_message_onLCD 0086  
                                                 __size_of_init_lcd 0058  
                                        print_message_onLCD@message 0080  
                                                         _d_pressed 00A2  
                                                  ___lwdiv@dividend 0039  
                                                         _clear_vec 139C  
                                                         __pintcode 0008  
                                                          ?___awmod 0088  
                                                          ?___lwdiv 0039  
                                                          ?___lwmod 0080  
                                                          ?_capture 0001  
                                             i2_print_message_onLCD 1032  
                                                       __smallconst 0600  
                                                    __size_ofi2_R_D 001C  
                                                    __size_ofi2_R_I 001C  
                                               __size_of_reset_game 0028  
                                                  ___lwdiv@quotient 003D  
                                                          ?_sprintf 0085  
                                                       ??i2___lwdiv 0005  
                                                       ??i2___lwmod 000C  
                                                    __size_of_srand 0012  
                                            __end_of_initial_config 15E8  
                                                          i2u100_40 1078  
                                                          i2u100_47 106E  
                                                          i2u104_40 11FE  
                                                          i2u113_40 0A74  
                                                          i2u107_40 1460  
                                                          i2u118_40 0BC2  
                                                          i2u119_40 0BDE  
                                                          i2u183_47 004A  
                                                          i2u184_47 164E  
                                                          i2u185_47 166A  
                                                     _loss_protocol 0CE8  
                                                        ?_clear_vec 0039  
                                            i2print_message_onLCD@i 000B  
                                                          _RCONbits 000FD0  
                                                       ??i2_sprintf 0013  
                                                         main@i_279 00A0  
                                                      ??_get_letter 0001  
                                                          i2_strlen 14DC  
                                                 ___lmul@multiplier 0080  
                                                         copy_data0 124A  
                                                         copy_data1 126A  
                                     i2print_message_onLCD@space_bt 0008  
                                                   ?_initial_config 0001  
                                                    ?_loss_protocol 0001  
                                                          __Hrparam 0000  
                                                          __Lrparam 0000  
                                                      clear_vec@lim 003D  
                                                      clear_vec@vec 0039  
                                                __end_of_get_letter 0F26  
                                              __end_of_win_protocol 0E7E  
                                                  __size_of___awmod 0086  
                                                  __size_of___lwdiv 0060  
                                                  __size_of___lwmod 0052  
                                            ?i2_print_message_onLCD 0005  
                                                  __size_of_capture 011E  
                                                        sprintf@val 0090  
                                                   ___lwdiv@divisor 003B  
                                                          _game_won 0BF0  
                                                   ___lwdiv@counter 003F  
                                                          __ptext10 15E8  
                                                          __ptext11 15C2  
                                                          __ptext20 1176  
                                                          __ptext12 159A  
                                                          __ptext21 0FAC  
                                                          __ptext13 12EC  
                                                          __ptext30 14DC  
                                                          __ptext22 1292  
                                                          __ptext14 1622  
                                                          __ptext31 163E  
                                                          __ptext15 10B2  
                                                          __ptext32 165A  
                                                          __ptext24 0A5E  
                                                          __ptext16 08C8  
                                                          __ptext25 1440  
                                                          __ptext17 13EE  
                                                          __ptext26 11D6  
                                                          __ptext18 1116  
                                                          __ptext27 0E7E  
                                                          __ptext19 1344  
                                                          __ptext28 1528  
                                                          __ptext29 1032  
                                                  __size_of_sprintf 0196  
                                                          _init_lcd 12EC  
                                                     __size_of_main 0218  
                                                     __size_of_rand 0058  
                                                     ?_clean_screen 0001  
                                                          capture@m 0026  
                                                          capture@p 0036  
                                                      ??_reset_game 003F  
                                                       ??_clear_vec 003B  
                                                          int$flags 0047  
                                               _print_message_onLCD 0F26  
                                                        _INTCONbits 000FF2  
                                          __size_of_init_serial_com 0028  
                                                __end_of_reset_game 159A  
                                                          intlevel2 1694  
                                                         sprintf@ap 008E  
                                                         sprintf@sp 0085  
                                                  ___lwmod@dividend 0080  
                                                    ??_clean_screen 003A  
                                                   ??_loss_protocol 0084  
                                              ?_print_message_onLCD 0080  
                                                  compare_nums@nums 0039  
                                        i2print_message_onLCD@place 0007  
                                                          sprintf@c 0092  
                                                          sprintf@f 0087  
                                                   ___lwmod@divisor 0082  
                                                          strlen@cp 003B  
                                                   ___lwmod@counter 0084  
                                                   compare_nums@lim 0080  
                                             ??_print_message_onLCD 003D  
                                             __size_of_win_protocol 00BA  
                                                     ?_get_rand_num 0093  
