

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 28 12:27:52 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 2.05
    53                           ; Generated 20/12/2018 GMT
    54                           ; 
    55                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F452 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataCOMRAM
    88  00155E                     __pidataCOMRAM:
    89                           	opt callstack 0
    90                           
    91                           ;initializer for _randx
    92  00155E  0001               	dw	1
    93  001560  0000               	dw	0
    94                           
    95                           ;initializer for _attempt
    96  001562  01                 	db	1
    97                           
    98                           ;initializer for _first_exec
    99  001563  01                 	db	1
   100                           
   101                           	psect	idataBANK0
   102  001564                     __pidataBANK0:
   103                           	opt callstack 0
   104                           
   105                           ;initializer for _lvl_n
   106  001564  0004               	dw	4
   107  001566  0006               	dw	6
   108  001568  000A               	dw	10
   109                           
   110                           	psect	smallconst
   111  000600                     __psmallconst:
   112                           	opt callstack 0
   113  000600  00                 	db	0
   114  000601                     _dpowers:
   115                           	opt callstack 0
   116  000601  0001               	dw	1
   117  000603  000A               	dw	10
   118  000605  0064               	dw	100
   119  000607  03E8               	dw	1000
   120  000609  2710               	dw	10000
   121  00060B                     __end_of_dpowers:
   122                           	opt callstack 0
   123  0000                     _INTCONbits	set	4082
   124  0000                     _RCSTA	set	4011
   125  0000                     _TXSTA	set	4012
   126  0000                     _IPR1	set	3999
   127  0000                     _PIR1	set	3998
   128  0000                     _PIE1	set	3997
   129  0000                     _SPBRG	set	4015
   130  0000                     _RCONbits	set	4048
   131  0000                     _INTCON2	set	4081
   132  0000                     _INTCON	set	4082
   133  0000                     _PORTD	set	3971
   134  0000                     _PORTC	set	3970
   135  0000                     _PORTB	set	3969
   136  0000                     _LATD	set	3980
   137  0000                     _LATC	set	3979
   138  0000                     _TRISD	set	3989
   139  0000                     _TRISC	set	3988
   140  0000                     _TRISB	set	3987
   141  0000                     _LATB	set	3978
   142  0000                     _LC4	set	31836
   143  0000                     _LC3	set	31835
   144  00060B                     STR_1:
   145  00060B  44                 	db	68	;'D'
   146  00060C  49                 	db	73	;'I'
   147  00060D  45                 	db	69	;'E'
   148  00060E  47                 	db	71	;'G'
   149  00060F  4F                 	db	79	;'O'
   150  000610  20                 	db	32
   151  000611  53                 	db	83	;'S'
   152  000612  41                 	db	65	;'A'
   153  000613  52                 	db	82	;'R'
   154  000614  41                 	db	65	;'A'
   155  000615  56                 	db	86	;'V'
   156  000616  49                 	db	73	;'I'
   157  000617  41                 	db	65	;'A'
   158  000618  00                 	db	0
   159  000619                     STR_4:
   160  000619  49                 	db	73	;'I'
   161  00061A  6E                 	db	110	;'n'
   162  00061B  69                 	db	105	;'i'
   163  00061C  63                 	db	99	;'c'
   164  00061D  69                 	db	105	;'i'
   165  00061E  61                 	db	97	;'a'
   166  00061F  6E                 	db	110	;'n'
   167  000620  64                 	db	100	;'d'
   168  000621  6F                 	db	111	;'o'
   169  000622  2E                 	db	46
   170  000623  2E                 	db	46
   171  000624  2E                 	db	46
   172  000625  00                 	db	0
   173  000626                     STR_9:
   174  000626  4F                 	db	79	;'O'
   175  000627  74                 	db	116	;'t'
   176  000628  72                 	db	114	;'r'
   177  000629  61                 	db	97	;'a'
   178  00062A  20                 	db	32
   179  00062B  76                 	db	118	;'v'
   180  00062C  65                 	db	101	;'e'
   181  00062D  7A                 	db	122	;'z'
   182  00062E  2E                 	db	46
   183  00062F  2E                 	db	46
   184  000630  2E                 	db	46
   185  000631  00                 	db	0
   186  000632                     STR_3:
   187  000632  43                 	db	67	;'C'
   188  000633  4F                 	db	79	;'O'
   189  000634  4E                 	db	78	;'N'
   190  000635  43                 	db	67	;'C'
   191  000636  45                 	db	69	;'E'
   192  000637  4E                 	db	78	;'N'
   193  000638  54                 	db	84	;'T'
   194  000639  52                 	db	82	;'R'
   195  00063A  45                 	db	69	;'E'
   196  00063B  53                 	db	83	;'S'
   197  00063C  45                 	db	69	;'E'
   198  00063D  00                 	db	0
   199  00063E                     STR_14:
   200  00063E  52                 	db	82	;'R'
   201  00063F  65                 	db	101	;'e'
   202  000640  69                 	db	105	;'i'
   203  000641  6E                 	db	110	;'n'
   204  000642  69                 	db	105	;'i'
   205  000643  63                 	db	99	;'c'
   206  000644  69                 	db	105	;'i'
   207  000645  61                 	db	97	;'a'
   208  000646  6E                 	db	110	;'n'
   209  000647  64                 	db	100	;'d'
   210  000648  6F                 	db	111	;'o'
   211  000649  00                 	db	0
   212  00064A                     STR_10:
   213  00064A  53                 	db	83	;'S'
   214  00064B  69                 	db	105	;'i'
   215  00064C  67                 	db	103	;'g'
   216  00064D  2E                 	db	46
   217  00064E  20                 	db	32
   218  00064F  6E                 	db	110	;'n'
   219  000650  69                 	db	105	;'i'
   220  000651  76                 	db	118	;'v'
   221  000652  65                 	db	101	;'e'
   222  000653  6C                 	db	108	;'l'
   223  000654  00                 	db	0
   224  000655                     STR_5:
   225  000655  45                 	db	69	;'E'
   226  000656  73                 	db	115	;'s'
   227  000657  63                 	db	99	;'c'
   228  000658  72                 	db	114	;'r'
   229  000659  69                 	db	105	;'i'
   230  00065A  62                 	db	98	;'b'
   231  00065B  65                 	db	101	;'e'
   232  00065C  3A                 	db	58	;':'
   233  00065D  20                 	db	32
   234  00065E  00                 	db	0
   235  00065F                     STR_12:
   236  00065F  47                 	db	71	;'G'
   237  000660  61                 	db	97	;'a'
   238  000661  6E                 	db	110	;'n'
   239  000662  61                 	db	97	;'a'
   240  000663  64                 	db	100	;'d'
   241  000664  6F                 	db	111	;'o'
   242  000665  21                 	db	33
   243  000666  21                 	db	33
   244  000667  00                 	db	0
   245  000668                     STR_13:
   246  000668  50                 	db	80	;'P'
   247  000669  65                 	db	101	;'e'
   248  00066A  72                 	db	114	;'r'
   249  00066B  64                 	db	100	;'d'
   250  00066C  69                 	db	105	;'i'
   251  00066D  73                 	db	115	;'s'
   252  00066E  74                 	db	116	;'t'
   253  00066F  65                 	db	101	;'e'
   254  000670  00                 	db	0
   255  000671                     STR_8:
   256  000671  47                 	db	71	;'G'
   257  000672  61                 	db	97	;'a'
   258  000673  6E                 	db	110	;'n'
   259  000674  61                 	db	97	;'a'
   260  000675  73                 	db	115	;'s'
   261  000676  74                 	db	116	;'t'
   262  000677  65                 	db	101	;'e'
   263  000678  00                 	db	0
   264  000679                     STR_2:
   265  000679  38                 	db	56	;'8'
   266  00067A  34                 	db	52	;'4'
   267  00067B  30                 	db	48	;'0'
   268  00067C  31                 	db	49	;'1'
   269  00067D  30                 	db	48	;'0'
   270  00067E  00                 	db	0
   271  00067F                     STR_15:
   272  00067F  4A                 	db	74	;'J'
   273  000680  75                 	db	117	;'u'
   274  000681  65                 	db	101	;'e'
   275  000682  67                 	db	103	;'g'
   276  000683  6F                 	db	111	;'o'
   277  000684  00                 	db	0
   278  000685                     STR_11:
   279  000685  A1                 	db	-95
   280  000686  A1                 	db	-95
   281  000687  48                 	db	72	;'H'
   282  000688  61                 	db	97	;'a'
   283  000689  73                 	db	115	;'s'
   284  00068A  00                 	db	0
   285  00068B                     STR_6:
   286  00068B  25                 	db	37
   287  00068C  63                 	db	99	;'c'
   288  00068D  00                 	db	0
   289  00068E                     STR_7:
   290  00068E  25                 	db	37
   291  00068F  69                 	db	105	;'i'
   292  000690  00                 	db	0
   293                           
   294                           ; #config settings
   295  000691  00                 	db	0	; dummy byte at the end
   296  0000                     
   297                           	psect	cinit
   298  001158                     __pcinit:
   299                           	opt callstack 0
   300  001158                     start_initialization:
   301                           	opt callstack 0
   302  001158                     __initialization:
   303                           	opt callstack 0
   304                           
   305                           ; Initialize objects allocated to BANK0 (6 bytes)
   306                           ; load TBLPTR registers with __pidataBANK0
   307  001158  0E64               	movlw	low __pidataBANK0
   308  00115A  6EF6               	movwf	tblptrl,c
   309  00115C  0E15               	movlw	high __pidataBANK0
   310  00115E  6EF7               	movwf	tblptrh,c
   311  001160  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   312  001162  6EF8               	movwf	tblptru,c
   313  001164  EE00  F0B6         	lfsr	0,__pdataBANK0
   314  001168  EE10 F006          	lfsr	1,6
   315  00116C                     copy_data0:
   316  00116C  0009               	tblrd		*+
   317  00116E  CFF5 FFEE          	movff	tablat,postinc0
   318  001172  50E5               	movf	postdec1,w,c
   319  001174  50E1               	movf	fsr1l,w,c
   320  001176  E1FA               	bnz	copy_data0
   321                           
   322                           ; Initialize objects allocated to COMRAM (6 bytes)
   323                           ; load TBLPTR registers with __pidataCOMRAM
   324  001178  0E5E               	movlw	low __pidataCOMRAM
   325  00117A  6EF6               	movwf	tblptrl,c
   326  00117C  0E15               	movlw	high __pidataCOMRAM
   327  00117E  6EF7               	movwf	tblptrh,c
   328  001180  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   329  001182  6EF8               	movwf	tblptru,c
   330  001184  EE00  F041         	lfsr	0,__pdataCOMRAM
   331  001188  EE10 F006          	lfsr	1,6
   332  00118C                     copy_data1:
   333  00118C  0009               	tblrd		*+
   334  00118E  CFF5 FFEE          	movff	tablat,postinc0
   335  001192  50E5               	movf	postdec1,w,c
   336  001194  50E1               	movf	fsr1l,w,c
   337  001196  E1FA               	bnz	copy_data1
   338                           
   339                           ; Clear objects allocated to BANK0 (23 bytes)
   340  001198  EE00  F09F         	lfsr	0,__pbssBANK0
   341  00119C  0E17               	movlw	23
   342  00119E                     clear_0:
   343  00119E  6AEE               	clrf	postinc0,c
   344  0011A0  06E8               	decf	wreg,f,c
   345  0011A2  E1FD               	bnz	clear_0
   346                           
   347                           ; Clear objects allocated to COMRAM (2 bytes)
   348  0011A4  6A48               	clrf	(__pbssCOMRAM+1)& (0+255),c
   349  0011A6  6A47               	clrf	__pbssCOMRAM& (0+255),c
   350  0011A8                     end_of_initialization:
   351                           	opt callstack 0
   352  0011A8                     __end_of__initialization:
   353                           	opt callstack 0
   354  0011A8  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   355  0011AA  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   356  0011AC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   357  0011AE  6EF8               	movwf	tblptru,c
   358  0011B0  0100               	movlb	0
   359  0011B2  EF49  F003         	goto	_main	;jump to C main() function
   360                           
   361                           	psect	bssCOMRAM
   362  000047                     __pbssCOMRAM:
   363                           	opt callstack 0
   364  000047                     _next:
   365                           	opt callstack 0
   366  000047                     	ds	1
   367  000048                     _counting_down:
   368                           	opt callstack 0
   369  000048                     	ds	1
   370                           
   371                           	psect	dataCOMRAM
   372  000041                     __pdataCOMRAM:
   373                           	opt callstack 0
   374  000041                     _randx:
   375                           	opt callstack 0
   376  000041                     	ds	4
   377  000045                     _attempt:
   378                           	opt callstack 0
   379  000045                     	ds	1
   380  000046                     _first_exec:
   381                           	opt callstack 0
   382  000046                     	ds	1
   383                           
   384                           	psect	bssBANK0
   385  00009F                     __pbssBANK0:
   386                           	opt callstack 0
   387  00009F                     _e_pressed:
   388                           	opt callstack 0
   389  00009F                     	ds	1
   390  0000A0                     _typing:
   391                           	opt callstack 0
   392  0000A0                     	ds	1
   393  0000A1                     _lvl:
   394                           	opt callstack 0
   395  0000A1                     	ds	1
   396  0000A2                     _ans:
   397                           	opt callstack 0
   398  0000A2                     	ds	10
   399  0000AC                     _nums:
   400                           	opt callstack 0
   401  0000AC                     	ds	10
   402                           
   403                           	psect	dataBANK0
   404  0000B6                     __pdataBANK0:
   405                           	opt callstack 0
   406  0000B6                     _lvl_n:
   407                           	opt callstack 0
   408  0000B6                     	ds	6
   409                           
   410                           	psect	cstackBANK0
   411  000080                     __pcstackBANK0:
   412                           	opt callstack 0
   413  000080                     ?___lwmod:
   414                           	opt callstack 0
   415  000080                     print_message_onLCD@i:
   416                           	opt callstack 0
   417  000080                     compare_nums@i:
   418                           	opt callstack 0
   419  000080                     ___lwmod@dividend:
   420                           	opt callstack 0
   421  000080                     ___lmul@product:
   422                           	opt callstack 0
   423                           
   424                           ; 4 bytes @ 0x0
   425  000080                     	ds	1
   426  000081                     ??_loss_protocol:
   427  000081                     ??_game_won:
   428                           
   429                           ; 1 bytes @ 0x1
   430  000081                     	ds	1
   431  000082                     ___lwmod@divisor:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x2
   435  000082                     	ds	1
   436  000083                     ??_win_protocol:
   437                           
   438                           ; 1 bytes @ 0x3
   439  000083                     	ds	1
   440  000084                     ?_sprintf:
   441                           	opt callstack 0
   442  000084                     ?___awmod:
   443                           	opt callstack 0
   444  000084                     sprintf@sp:
   445                           	opt callstack 0
   446  000084                     ___awmod@dividend:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x4
   450  000084                     	ds	2
   451  000086                     sprintf@f:
   452                           	opt callstack 0
   453  000086                     ___awmod@divisor:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0x6
   457  000086                     	ds	2
   458  000088                     ___awmod@counter:
   459                           	opt callstack 0
   460                           
   461                           ; 1 bytes @ 0x8
   462  000088                     	ds	1
   463  000089                     ___awmod@sign:
   464                           	opt callstack 0
   465                           
   466                           ; 1 bytes @ 0x9
   467  000089                     	ds	1
   468  00008A                     sprintf@flag:
   469                           	opt callstack 0
   470                           
   471                           ; 1 bytes @ 0xA
   472  00008A                     	ds	1
   473  00008B                     sprintf@prec:
   474                           	opt callstack 0
   475                           
   476                           ; 1 bytes @ 0xB
   477  00008B                     	ds	1
   478  00008C                     sprintf@ap:
   479                           	opt callstack 0
   480                           
   481                           ; 2 bytes @ 0xC
   482  00008C                     	ds	2
   483  00008E                     sprintf@val:
   484                           	opt callstack 0
   485                           
   486                           ; 2 bytes @ 0xE
   487  00008E                     	ds	2
   488  000090                     sprintf@c:
   489                           	opt callstack 0
   490                           
   491                           ; 1 bytes @ 0x10
   492  000090                     	ds	1
   493  000091                     get_rand_num@to:
   494                           	opt callstack 0
   495                           
   496                           ; 1 bytes @ 0x11
   497  000091                     	ds	1
   498  000092                     ??_get_rand_num:
   499                           
   500                           ; 1 bytes @ 0x12
   501  000092                     	ds	2
   502  000094                     get_rand_num@num:
   503                           	opt callstack 0
   504                           
   505                           ; 2 bytes @ 0x14
   506  000094                     	ds	2
   507  000096                     get_rand_num@from:
   508                           	opt callstack 0
   509                           
   510                           ; 1 bytes @ 0x16
   511  000096                     	ds	1
   512  000097                     get_rand_num@r:
   513                           	opt callstack 0
   514                           
   515                           ; 1 bytes @ 0x17
   516  000097                     	ds	1
   517  000098                     ??_main:
   518                           
   519                           ; 1 bytes @ 0x18
   520  000098                     	ds	5
   521  00009D                     main@i_280:
   522                           	opt callstack 0
   523                           
   524                           ; 1 bytes @ 0x1D
   525  00009D                     	ds	1
   526  00009E                     main@i:
   527                           	opt callstack 0
   528                           
   529                           ; 1 bytes @ 0x1E
   530  00009E                     	ds	1
   531                           
   532                           	psect	cstackCOMRAM
   533  000001                     __pcstackCOMRAM:
   534                           	opt callstack 0
   535  000001                     ?i2___lwdiv:
   536                           	opt callstack 0
   537  000001                     ?i2_strlen:
   538                           	opt callstack 0
   539  000001                     get_letter@code:
   540                           	opt callstack 0
   541  000001                     i2R_I@dato:
   542                           	opt callstack 0
   543  000001                     i2R_D@dato:
   544                           	opt callstack 0
   545  000001                     i2___lwdiv@dividend:
   546                           	opt callstack 0
   547  000001                     i2strlen@s:
   548                           	opt callstack 0
   549                           
   550                           ; 2 bytes @ 0x0
   551  000001                     	ds	2
   552  000003                     i2___lwdiv@divisor:
   553                           	opt callstack 0
   554  000003                     i2strlen@cp:
   555                           	opt callstack 0
   556                           
   557                           ; 2 bytes @ 0x2
   558  000003                     	ds	2
   559  000005                     i2print_message_onLCD@message:
   560                           	opt callstack 0
   561  000005                     i2___lwdiv@quotient:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x4
   565  000005                     	ds	2
   566  000007                     i2print_message_onLCD@place:
   567                           	opt callstack 0
   568  000007                     i2___lwdiv@counter:
   569                           	opt callstack 0
   570                           
   571                           ; 1 bytes @ 0x6
   572  000007                     	ds	1
   573  000008                     ?i2___lwmod:
   574                           	opt callstack 0
   575  000008                     i2print_message_onLCD@space_bt:
   576                           	opt callstack 0
   577  000008                     i2___lwmod@dividend:
   578                           	opt callstack 0
   579                           
   580                           ; 2 bytes @ 0x7
   581  000008                     	ds	1
   582  000009                     ??i2_print_message_onLCD:
   583                           
   584                           ; 1 bytes @ 0x8
   585  000009                     	ds	1
   586  00000A                     i2___lwmod@divisor:
   587                           	opt callstack 0
   588                           
   589                           ; 2 bytes @ 0x9
   590  00000A                     	ds	1
   591  00000B                     i2print_message_onLCD@i:
   592                           	opt callstack 0
   593                           
   594                           ; 1 bytes @ 0xA
   595  00000B                     	ds	1
   596  00000C                     i2___lwmod@counter:
   597                           	opt callstack 0
   598                           
   599                           ; 1 bytes @ 0xB
   600  00000C                     	ds	1
   601  00000D                     ?i2_sprintf:
   602                           	opt callstack 0
   603  00000D                     i2sprintf@sp:
   604                           	opt callstack 0
   605                           
   606                           ; 2 bytes @ 0xC
   607  00000D                     	ds	2
   608  00000F                     i2sprintf@f:
   609                           	opt callstack 0
   610                           
   611                           ; 2 bytes @ 0xE
   612  00000F                     	ds	4
   613  000013                     ??i2_sprintf:
   614                           
   615                           ; 1 bytes @ 0x12
   616  000013                     	ds	1
   617  000014                     i2sprintf@flag:
   618                           	opt callstack 0
   619                           
   620                           ; 1 bytes @ 0x13
   621  000014                     	ds	1
   622  000015                     i2sprintf@prec:
   623                           	opt callstack 0
   624                           
   625                           ; 1 bytes @ 0x14
   626  000015                     	ds	1
   627  000016                     i2sprintf@ap:
   628                           	opt callstack 0
   629                           
   630                           ; 2 bytes @ 0x15
   631  000016                     	ds	2
   632  000018                     i2sprintf@val:
   633                           	opt callstack 0
   634                           
   635                           ; 2 bytes @ 0x17
   636  000018                     	ds	2
   637  00001A                     i2sprintf@c:
   638                           	opt callstack 0
   639                           
   640                           ; 1 bytes @ 0x19
   641  00001A                     	ds	1
   642  00001B                     ??_capture:
   643                           
   644                           ; 1 bytes @ 0x1A
   645  00001B                     	ds	11
   646  000026                     capture@m:
   647                           	opt callstack 0
   648                           
   649                           ; 16 bytes @ 0x25
   650  000026                     	ds	16
   651  000036                     capture@p:
   652                           	opt callstack 0
   653                           
   654                           ; 1 bytes @ 0x35
   655  000036                     	ds	1
   656  000037                     ?_strlen:
   657                           	opt callstack 0
   658  000037                     ?___lwdiv:
   659                           	opt callstack 0
   660  000037                     ?___lmul:
   661                           	opt callstack 0
   662  000037                     R_I@dato:
   663                           	opt callstack 0
   664  000037                     R_D@dato:
   665                           	opt callstack 0
   666  000037                     ___lwdiv@dividend:
   667                           	opt callstack 0
   668  000037                     srand@x:
   669                           	opt callstack 0
   670  000037                     strlen@s:
   671                           	opt callstack 0
   672  000037                     ___lmul@multiplier:
   673                           	opt callstack 0
   674                           
   675                           ; 4 bytes @ 0x36
   676  000037                     	ds	1
   677  000038                     ??_init_lcd:
   678  000038                     ??_clean_screen:
   679                           
   680                           ; 1 bytes @ 0x37
   681  000038                     	ds	1
   682  000039                     ___lwdiv@divisor:
   683                           	opt callstack 0
   684  000039                     strlen@cp:
   685                           	opt callstack 0
   686                           
   687                           ; 2 bytes @ 0x38
   688  000039                     	ds	2
   689  00003B                     print_message_onLCD@message:
   690                           	opt callstack 0
   691  00003B                     clear_vec@vec:
   692                           	opt callstack 0
   693  00003B                     compare_nums@nums:
   694                           	opt callstack 0
   695  00003B                     ___lwdiv@quotient:
   696                           	opt callstack 0
   697  00003B                     ___lmul@multiplicand:
   698                           	opt callstack 0
   699                           
   700                           ; 4 bytes @ 0x3A
   701  00003B                     	ds	2
   702  00003D                     ??_clear_vec:
   703  00003D                     print_message_onLCD@place:
   704                           	opt callstack 0
   705  00003D                     ___lwdiv@counter:
   706                           	opt callstack 0
   707  00003D                     compare_nums@r:
   708                           	opt callstack 0
   709                           
   710                           ; 2 bytes @ 0x3C
   711  00003D                     	ds	1
   712  00003E                     print_message_onLCD@space_bt:
   713                           	opt callstack 0
   714  00003E                     ___lwmod@counter:
   715                           	opt callstack 0
   716                           
   717                           ; 1 bytes @ 0x3D
   718  00003E                     	ds	1
   719  00003F                     ??_print_message_onLCD:
   720  00003F                     ??_compare_nums:
   721  00003F                     ??_sprintf:
   722  00003F                     ?_rand:
   723                           	opt callstack 0
   724  00003F                     clear_vec@vec_len:
   725                           	opt callstack 0
   726                           
   727                           ; 1 bytes @ 0x3E
   728  00003F                     	ds	1
   729  000040                     clear_vec@i:
   730                           	opt callstack 0
   731                           
   732                           ; 1 bytes @ 0x3F
   733  000040                     	ds	1
   734  000041                     
   735                           ; 1 bytes @ 0x40
   736 ;;
   737 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   738 ;;
   739 ;; *************** function _main *****************
   740 ;; Defined at:
   741 ;;		line 53 in file "main.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;		None
   744 ;; Auto vars:     Size  Location     Type
   745 ;;  i               1   29[BANK0 ] unsigned char 
   746 ;;  i               1   30[BANK0 ] unsigned char 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   756 ;;      Params:         0       0       0       0       0       0       0
   757 ;;      Locals:         0       2       0       0       0       0       0
   758 ;;      Temps:          0       5       0       0       0       0       0
   759 ;;      Totals:         0       7       0       0       0       0       0
   760 ;;Total ram usage:        7 bytes
   761 ;; Hardware stack levels required when called:    8
   762 ;; This function calls:
   763 ;;		_R_I
   764 ;;		_clean_screen
   765 ;;		_compare_nums
   766 ;;		_get_rand_num
   767 ;;		_init_lcd
   768 ;;		_init_serial_com
   769 ;;		_initial_config
   770 ;;		_loss_protocol
   771 ;;		_print_message_onLCD
   772 ;;		_srand
   773 ;;		_win_protocol
   774 ;; This function is called by:
   775 ;;		Startup code after reset
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text0
   780  000692                     __ptext0:
   781                           	opt callstack 0
   782  000692                     _main:
   783                           	opt callstack 0
   784  000692  FFFF               	dw	65535	; assembler added errata NOP
   785                           
   786                           ;main.c: 54: initial_config();
   787                           
   788                           ;incstack = 0
   789  000694  EC4C  F00A         	call	_initial_config	;wreg free
   790                           
   791                           ;main.c: 55: init_lcd();
   792  000698  EC0A  F009         	call	_init_lcd	;wreg free
   793                           
   794                           ;main.c: 56: init_serial_com();
   795  00069C  EC38  F00A         	call	_init_serial_com	;wreg free
   796                           
   797                           ;main.c: 58: print_message_onLCD("DIEGO SARAVIA", 128, 0);
   798  0006A0  0E0B               	movlw	low STR_1
   799  0006A2  6E3B               	movwf	print_message_onLCD@message,c
   800  0006A4  0E06               	movlw	high STR_1
   801  0006A6  6E3C               	movwf	print_message_onLCD@message+1,c
   802  0006A8  0E80               	movlw	128
   803  0006AA  6E3D               	movwf	print_message_onLCD@place,c
   804  0006AC  0E00               	movlw	0
   805  0006AE  6E3E               	movwf	print_message_onLCD@space_bt,c
   806  0006B0  ECEE  F006         	call	_print_message_onLCD	;wreg free
   807                           
   808                           ;main.c: 59: print_message_onLCD("84010", 192, 0);
   809  0006B4  0E79               	movlw	low STR_2
   810  0006B6  6E3B               	movwf	print_message_onLCD@message,c
   811  0006B8  0E06               	movlw	high STR_2
   812  0006BA  6E3C               	movwf	print_message_onLCD@message+1,c
   813  0006BC  0EC0               	movlw	192
   814  0006BE  6E3D               	movwf	print_message_onLCD@place,c
   815  0006C0  0E00               	movlw	0
   816  0006C2  6E3E               	movwf	print_message_onLCD@space_bt,c
   817  0006C4  ECEE  F006         	call	_print_message_onLCD	;wreg free
   818                           
   819                           ;main.c: 60: _delay((unsigned long)((2000)*(4000000/4000.0)));
   820  0006C8  0E08               	movlw	8
   821  0006CA  0100               	movlb	0	; () banked
   822  0006CC  6F99               	movwf	(??_main+1)& (0+255),b
   823  0006CE  0E9E               	movlw	158
   824  0006D0  6F98               	movwf	??_main& (0+255),b
   825  0006D2  0E4B               	movlw	75
   826  0006D4                     u1667:
   827  0006D4  FFFF               	dw	65535	; errata NOP
   828  0006D6  2EE8               	decfsz	wreg,f,c
   829  0006D8  D7FD               	bra	u1667
   830  0006DA  2F98               	decfsz	??_main& (0+255),f,b
   831  0006DC  D7FB               	bra	u1667
   832  0006DE  2F99               	decfsz	(??_main+1)& (0+255),f,b
   833  0006E0  D7F9               	bra	u1667
   834  0006E2  D000               	nop2	
   835  0006E4  F000               	nop	
   836                           
   837                           ;main.c: 61: clean_screen();
   838  0006E6  EC5F  F00A         	call	_clean_screen	;wreg free
   839                           
   840                           ;main.c: 63: print_message_onLCD("CONCENTRESE", 128, 0);
   841  0006EA  0E32               	movlw	low STR_3
   842  0006EC  6E3B               	movwf	print_message_onLCD@message,c
   843  0006EE  0E06               	movlw	high STR_3
   844  0006F0  6E3C               	movwf	print_message_onLCD@message+1,c
   845  0006F2  0E80               	movlw	128
   846  0006F4  6E3D               	movwf	print_message_onLCD@place,c
   847  0006F6  0E00               	movlw	0
   848  0006F8  6E3E               	movwf	print_message_onLCD@space_bt,c
   849  0006FA  ECEE  F006         	call	_print_message_onLCD	;wreg free
   850                           
   851                           ;main.c: 64: print_message_onLCD("Iniciando...", 192, 0);
   852  0006FE  0E19               	movlw	low STR_4
   853  000700  6E3B               	movwf	print_message_onLCD@message,c
   854  000702  0E06               	movlw	high STR_4
   855  000704  6E3C               	movwf	print_message_onLCD@message+1,c
   856  000706  0EC0               	movlw	192
   857  000708  6E3D               	movwf	print_message_onLCD@place,c
   858  00070A  0E00               	movlw	0
   859  00070C  6E3E               	movwf	print_message_onLCD@space_bt,c
   860  00070E  ECEE  F006         	call	_print_message_onLCD	;wreg free
   861                           
   862                           ;main.c: 65: _delay((unsigned long)((2000)*(4000000/4000.0)));
   863  000712  0E08               	movlw	8
   864  000714  0100               	movlb	0	; () banked
   865  000716  6F99               	movwf	(??_main+1)& (0+255),b
   866  000718  0E9E               	movlw	158
   867  00071A  6F98               	movwf	??_main& (0+255),b
   868  00071C  0E4B               	movlw	75
   869  00071E                     u1677:
   870  00071E  FFFF               	dw	65535	; errata NOP
   871  000720  2EE8               	decfsz	wreg,f,c
   872  000722  D7FD               	bra	u1677
   873  000724  2F98               	decfsz	??_main& (0+255),f,b
   874  000726  D7FB               	bra	u1677
   875  000728  2F99               	decfsz	(??_main+1)& (0+255),f,b
   876  00072A  D7F9               	bra	u1677
   877  00072C  D000               	nop2	
   878  00072E  F000               	nop	
   879                           
   880                           ;main.c: 66: clean_screen();
   881  000730  EC5F  F00A         	call	_clean_screen	;wreg free
   882                           
   883                           ;main.c: 68: srand(13);
   884  000734  0E00               	movlw	0
   885  000736  6E38               	movwf	srand@x+1,c
   886  000738  0E0D               	movlw	13
   887  00073A  6E37               	movwf	srand@x,c
   888  00073C  ECA6  F00A         	call	_srand	;wreg free
   889                           
   890                           ;main.c: 69: R_I(128);
   891  000740  0E80               	movlw	128
   892  000742  EC7C  F00A         	call	_R_I
   893  000746                     l2602:
   894  000746  FFFF               	dw	65535	; assembler added errata NOP
   895                           
   896                           ;main.c: 72: for (char i = 0; i < 4; i++) {
   897  000748  0E00               	movlw	0
   898  00074A  0100               	movlb	0	; () banked
   899  00074C  6F9E               	movwf	main@i& (0+255),b
   900  00074E                     l2604:
   901  00074E  FFFF               	dw	65535	; assembler added errata NOP
   902                           
   903                           ; BSR set to: 0
   904  000750  0E03               	movlw	3
   905  000752  659E               	cpfsgt	main@i& (0+255),b
   906  000754  D001               	goto	l2608
   907  000756  D019               	goto	l2614
   908  000758                     l2608:
   909  000758  FFFF               	dw	65535	; assembler added errata NOP
   910                           
   911                           ; BSR set to: 0
   912                           ;main.c: 73: LATB = ~(1<<i);
   913  00075A  C09E  F098         	movff	main@i,??_main
   914  00075E  0E01               	movlw	1
   915  000760  6F99               	movwf	(??_main+1)& (0+255),b
   916  000762  2B98               	incf	??_main& (0+255),f,b
   917  000764  D003               	goto	u1614
   918  000766                     u1615:
   919  000766  FFFF               	dw	65535	; assembler added errata NOP
   920  000768  90D8               	bcf	status,0,c
   921  00076A  3799               	rlcf	(??_main+1)& (0+255),f,b
   922  00076C                     u1614:
   923  00076C  FFFF               	dw	65535	; assembler added errata NOP
   924  00076E  2F98               	decfsz	??_main& (0+255),f,b
   925  000770  D7FA               	goto	u1615
   926  000772  0100               	movlb	0	; () banked
   927  000774  5199               	movf	(??_main+1)& (0+255),w,b
   928  000776  0AFF               	xorlw	255
   929  000778  6E8A               	movwf	3978,c	;volatile
   930                           
   931                           ; BSR set to: 0
   932                           ;main.c: 74: _delay((unsigned long)((10)*(4000000/4000000.0)));
   933  00077A  0E02               	movlw	2
   934  00077C                     u1687:
   935  00077C  FFFF               	dw	65535	; errata NOP
   936  00077E  2EE8               	decfsz	wreg,f,c
   937  000780  D7FD               	bra	u1687
   938  000782  D000               	nop2	
   939  000784  0100               	movlb	0	; () banked
   940  000786  2B9E               	incf	main@i& (0+255),f,b
   941  000788  D7E2               	goto	l2604
   942  00078A                     l2614:
   943  00078A  FFFF               	dw	65535	; assembler added errata NOP
   944                           
   945                           ; BSR set to: 0
   946                           ;main.c: 75: };main.c: 77: if (!typing) {
   947  00078C  51A0               	movf	_typing& (0+255),w,b
   948  00078E  A4D8               	btfss	status,2,c
   949  000790  D052               	goto	l2634
   950                           
   951                           ; BSR set to: 0
   952                           ;main.c: 78: for (char i = 0; i < lvl_n[lvl]; i++) {
   953  000792  0E00               	movlw	0
   954  000794  6F9D               	movwf	main@i_280& (0+255),b
   955  000796  D011               	goto	l2622
   956  000798                     l2618:
   957  000798  FFFF               	dw	65535	; assembler added errata NOP
   958                           
   959                           ; BSR set to: 0
   960                           ;main.c: 79: nums[i] = get_rand_num(0, 10);
   961  00079A  0E0A               	movlw	10
   962  00079C  6F91               	movwf	get_rand_num@to& (0+255),b
   963  00079E  0E00               	movlw	0
   964  0007A0  ECE9  F007         	call	_get_rand_num
   965  0007A4  0100               	movlb	0	; () banked
   966  0007A6  6F98               	movwf	??_main& (0+255),b
   967  0007A8  0EAC               	movlw	low _nums
   968  0007AA  259D               	addwf	main@i_280& (0+255),w,b
   969  0007AC  6ED9               	movwf	fsr2l,c
   970  0007AE  6ADA               	clrf	fsr2h,c
   971  0007B0  0E00               	movlw	high _nums
   972  0007B2  22DA               	addwfc	fsr2h,f,c
   973  0007B4  C098  FFDF         	movff	??_main,indf2
   974                           
   975                           ; BSR set to: 0
   976  0007B8  2B9D               	incf	main@i_280& (0+255),f,b
   977  0007BA                     l2622:
   978  0007BA  FFFF               	dw	65535	; assembler added errata NOP
   979                           
   980                           ; BSR set to: 0
   981  0007BC  51A1               	movf	_lvl& (0+255),w,b
   982  0007BE  0D02               	mullw	2
   983  0007C0  0EB6               	movlw	low _lvl_n
   984  0007C2  24F3               	addwf	prodl,w,c
   985  0007C4  6ED9               	movwf	fsr2l,c
   986  0007C6  0E00               	movlw	high _lvl_n
   987  0007C8  20F4               	addwfc	prodh,w,c
   988  0007CA  6EDA               	movwf	fsr2h,c
   989  0007CC  519D               	movf	main@i_280& (0+255),w,b
   990  0007CE  6F9A               	movwf	(??_main+2)& (0+255),b
   991  0007D0  6B9B               	clrf	(??_main+3)& (0+255),b
   992  0007D2  50DE               	movf	postinc2,w,c
   993  0007D4  5D9A               	subwf	(??_main+2)& (0+255),w,b
   994  0007D6  519B               	movf	(??_main+3)& (0+255),w,b
   995  0007D8  0A80               	xorlw	128
   996  0007DA  6F9C               	movwf	(??_main+4)& (0+255),b
   997  0007DC  50DE               	movf	postinc2,w,c
   998  0007DE  0A80               	xorlw	128
   999  0007E0  599C               	subwfb	(??_main+4)& (0+255),w,b
  1000  0007E2  A0D8               	btfss	status,0,c
  1001  0007E4  D7D9               	goto	l2618
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;main.c: 80: };main.c: 81: print_message_onLCD(nums, 128, 1);
  1005  0007E6  0EAC               	movlw	low _nums
  1006  0007E8  6E3B               	movwf	print_message_onLCD@message,c
  1007  0007EA  0E00               	movlw	high _nums
  1008  0007EC  6E3C               	movwf	print_message_onLCD@message+1,c
  1009  0007EE  0E80               	movlw	128
  1010  0007F0  6E3D               	movwf	print_message_onLCD@place,c
  1011  0007F2  0E01               	movlw	1
  1012  0007F4  6E3E               	movwf	print_message_onLCD@space_bt,c
  1013  0007F6  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1014                           
  1015                           ;main.c: 82: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1016  0007FA  0E08               	movlw	8
  1017  0007FC  0100               	movlb	0	; () banked
  1018  0007FE  6F99               	movwf	(??_main+1)& (0+255),b
  1019  000800  0E9E               	movlw	158
  1020  000802  6F98               	movwf	??_main& (0+255),b
  1021  000804  0E4B               	movlw	75
  1022  000806                     u1697:
  1023  000806  FFFF               	dw	65535	; errata NOP
  1024  000808  2EE8               	decfsz	wreg,f,c
  1025  00080A  D7FD               	bra	u1697
  1026  00080C  2F98               	decfsz	??_main& (0+255),f,b
  1027  00080E  D7FB               	bra	u1697
  1028  000810  2F99               	decfsz	(??_main+1)& (0+255),f,b
  1029  000812  D7F9               	bra	u1697
  1030  000814  D000               	nop2	
  1031  000816  F000               	nop	
  1032                           
  1033                           ;main.c: 83: clean_screen();
  1034  000818  EC5F  F00A         	call	_clean_screen	;wreg free
  1035                           
  1036                           ;main.c: 84: print_message_onLCD("Escribe: ", 128, 0);
  1037  00081C  0E55               	movlw	low STR_5
  1038  00081E  6E3B               	movwf	print_message_onLCD@message,c
  1039  000820  0E06               	movlw	high STR_5
  1040  000822  6E3C               	movwf	print_message_onLCD@message+1,c
  1041  000824  0E80               	movlw	128
  1042  000826  6E3D               	movwf	print_message_onLCD@place,c
  1043  000828  0E00               	movlw	0
  1044  00082A  6E3E               	movwf	print_message_onLCD@space_bt,c
  1045  00082C  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1046                           
  1047                           ;main.c: 85: R_I(192);
  1048  000830  0EC0               	movlw	192
  1049  000832  EC7C  F00A         	call	_R_I
  1050  000836                     l2634:
  1051  000836  FFFF               	dw	65535	; assembler added errata NOP
  1052                           
  1053                           ;main.c: 86: };main.c: 88: counting_down = 0;
  1054  000838  0E00               	movlw	0
  1055  00083A  6E48               	movwf	_counting_down,c
  1056                           
  1057                           ;main.c: 89: typing = 1;
  1058  00083C  0E01               	movlw	1
  1059  00083E  0100               	movlb	0	; () banked
  1060  000840  6FA0               	movwf	_typing& (0+255),b
  1061                           
  1062                           ; BSR set to: 0
  1063                           ;main.c: 90: if (e_pressed) {
  1064  000842  519F               	movf	_e_pressed& (0+255),w,b
  1065  000844  B4D8               	btfsc	status,2,c
  1066  000846  D01E               	goto	l2654
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;main.c: 91: clean_screen();
  1070  000848  EC5F  F00A         	call	_clean_screen	;wreg free
  1071                           
  1072                           ;main.c: 92: typing = 0;
  1073  00084C  0E00               	movlw	0
  1074  00084E  0100               	movlb	0	; () banked
  1075  000850  6FA0               	movwf	_typing& (0+255),b
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;main.c: 93: counting_down = 1;
  1079  000852  0E01               	movlw	1
  1080  000854  6E48               	movwf	_counting_down,c
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;main.c: 94: if (compare_nums(nums, ans)) {
  1084  000856  0EAC               	movlw	low _nums
  1085  000858  6E3B               	movwf	compare_nums@nums,c
  1086  00085A  0E00               	movlw	high _nums
  1087  00085C  6E3C               	movwf	compare_nums@nums+1,c
  1088  00085E  0EA2               	movlw	low _ans
  1089  000860  6E3D               	movwf	compare_nums@r,c
  1090  000862  0E00               	movlw	high _ans
  1091  000864  6E3E               	movwf	compare_nums@r+1,c
  1092  000866  ECDB  F008         	call	_compare_nums	;wreg free
  1093  00086A  0900               	iorlw	0
  1094  00086C  B4D8               	btfsc	status,2,c
  1095  00086E  D003               	goto	l2650
  1096                           
  1097                           ;main.c: 95: win_protocol();
  1098  000870  EC43  F006         	call	_win_protocol	;wreg free
  1099                           
  1100                           ;main.c: 96: } else {
  1101  000874  D003               	goto	l2652
  1102  000876                     l2650:
  1103  000876  FFFF               	dw	65535	; assembler added errata NOP
  1104                           
  1105                           ;main.c: 97: loss_protocol();
  1106  000878  ECDA  F005         	call	_loss_protocol	;wreg free
  1107  00087C                     l2652:
  1108  00087C  FFFF               	dw	65535	; assembler added errata NOP
  1109                           
  1110                           ;main.c: 98: };main.c: 99: e_pressed = 0;
  1111  00087E  0E00               	movlw	0
  1112  000880  0100               	movlb	0	; () banked
  1113  000882  6F9F               	movwf	_e_pressed& (0+255),b
  1114  000884                     l2654:
  1115  000884  FFFF               	dw	65535	; assembler added errata NOP
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;main.c: 100: };main.c: 102: first_exec = 0;
  1119  000886  0E00               	movlw	0
  1120  000888  6E46               	movwf	_first_exec,c
  1121  00088A  D75D               	goto	l2602
  1122  00088C                     __end_of_main:
  1123                           	opt callstack 0
  1124                           
  1125 ;; *************** function _win_protocol *****************
  1126 ;; Defined at:
  1127 ;;		line 258 in file "main.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1141 ;;      Params:         0       0       0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0       0       0
  1143 ;;      Temps:          0       2       0       0       0       0       0
  1144 ;;      Totals:         0       2       0       0       0       0       0
  1145 ;;Total ram usage:        2 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    7
  1148 ;; This function calls:
  1149 ;;		_clean_screen
  1150 ;;		_clear_vec
  1151 ;;		_game_won
  1152 ;;		_print_message_onLCD
  1153 ;; This function is called by:
  1154 ;;		_main
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text1
  1159  000C86                     __ptext1:
  1160                           	opt callstack 0
  1161  000C86                     _win_protocol:
  1162                           	opt callstack 0
  1163  000C86  FFFF               	dw	65535	; assembler added errata NOP
  1164                           
  1165                           ;main.c: 259: print_message_onLCD("Ganaste", 128, 0);
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;incstack = 0
  1169  000C88  0E71               	movlw	low STR_8
  1170  000C8A  6E3B               	movwf	print_message_onLCD@message,c
  1171  000C8C  0E06               	movlw	high STR_8
  1172  000C8E  6E3C               	movwf	print_message_onLCD@message+1,c
  1173  000C90  0E80               	movlw	128
  1174  000C92  6E3D               	movwf	print_message_onLCD@place,c
  1175  000C94  0E00               	movlw	0
  1176  000C96  6E3E               	movwf	print_message_onLCD@space_bt,c
  1177  000C98  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1178                           
  1179                           ;main.c: 260: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1180  000C9C  0E08               	movlw	8
  1181  000C9E  0100               	movlb	0	; () banked
  1182  000CA0  6F84               	movwf	(??_win_protocol+1)& (0+255),b
  1183  000CA2  0E9E               	movlw	158
  1184  000CA4  6F83               	movwf	??_win_protocol& (0+255),b
  1185  000CA6  0E4B               	movlw	75
  1186  000CA8                     u1707:
  1187  000CA8  FFFF               	dw	65535	; errata NOP
  1188  000CAA  2EE8               	decfsz	wreg,f,c
  1189  000CAC  D7FD               	bra	u1707
  1190  000CAE  2F83               	decfsz	??_win_protocol& (0+255),f,b
  1191  000CB0  D7FB               	bra	u1707
  1192  000CB2  2F84               	decfsz	(??_win_protocol+1)& (0+255),f,b
  1193  000CB4  D7F9               	bra	u1707
  1194  000CB6  D000               	nop2	
  1195  000CB8  F000               	nop	
  1196                           
  1197                           ;main.c: 261: if (attempt < 3) {
  1198  000CBA  0E03               	movlw	3
  1199  000CBC  6045               	cpfslt	_attempt,c
  1200  000CBE  D00C               	goto	l2542
  1201                           
  1202                           ;main.c: 262: print_message_onLCD("Otra vez...", 128, 0);
  1203  000CC0  0E26               	movlw	low STR_9
  1204  000CC2  6E3B               	movwf	print_message_onLCD@message,c
  1205  000CC4  0E06               	movlw	high STR_9
  1206  000CC6  6E3C               	movwf	print_message_onLCD@message+1,c
  1207  000CC8  0E80               	movlw	128
  1208  000CCA  6E3D               	movwf	print_message_onLCD@place,c
  1209  000CCC  0E00               	movlw	0
  1210  000CCE  6E3E               	movwf	print_message_onLCD@space_bt,c
  1211  000CD0  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1212                           
  1213                           ;main.c: 263: attempt++;
  1214  000CD4  2A45               	incf	_attempt,f,c
  1215                           
  1216                           ;main.c: 264: } else {
  1217  000CD6  D017               	goto	l2556
  1218  000CD8                     l2542:
  1219  000CD8  FFFF               	dw	65535	; assembler added errata NOP
  1220                           
  1221                           ;main.c: 265: attempt = 1;
  1222  000CDA  0E01               	movlw	1
  1223  000CDC  6E45               	movwf	_attempt,c
  1224                           
  1225                           ;main.c: 266: lvl++;
  1226  000CDE  0100               	movlb	0	; () banked
  1227  000CE0  2BA1               	incf	_lvl& (0+255),f,b
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 267: if (lvl == 3) {
  1231  000CE2  0E03               	movlw	3
  1232  000CE4  19A1               	xorwf	_lvl& (0+255),w,b
  1233  000CE6  A4D8               	btfss	status,2,c
  1234  000CE8  D003               	goto	l2554
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;main.c: 268: game_won();
  1238  000CEA  ECB4  F007         	call	_game_won	;wreg free
  1239  000CEE  D023               	goto	l198
  1240  000CF0                     l2554:
  1241  000CF0  FFFF               	dw	65535	; assembler added errata NOP
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 271: print_message_onLCD("Sig. nivel", 128, 0);
  1245  000CF2  0E4A               	movlw	low STR_10
  1246  000CF4  6E3B               	movwf	print_message_onLCD@message,c
  1247  000CF6  0E06               	movlw	high STR_10
  1248  000CF8  6E3C               	movwf	print_message_onLCD@message+1,c
  1249  000CFA  0E80               	movlw	128
  1250  000CFC  6E3D               	movwf	print_message_onLCD@place,c
  1251  000CFE  0E00               	movlw	0
  1252  000D00  6E3E               	movwf	print_message_onLCD@space_bt,c
  1253  000D02  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1254  000D06                     l2556:
  1255  000D06  FFFF               	dw	65535	; assembler added errata NOP
  1256                           
  1257                           ;main.c: 272: };main.c: 273: };main.c: 274: clear_vec(&ans);
  1258  000D08  0EA2               	movlw	low _ans
  1259  000D0A  6E3B               	movwf	clear_vec@vec,c
  1260  000D0C  0E00               	movlw	high _ans
  1261  000D0E  6E3C               	movwf	clear_vec@vec+1,c
  1262  000D10  ECB2  F009         	call	_clear_vec	;wreg free
  1263                           
  1264                           ;main.c: 275: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1265  000D14  0E08               	movlw	8
  1266  000D16  0100               	movlb	0	; () banked
  1267  000D18  6F84               	movwf	(??_win_protocol+1)& (0+255),b
  1268  000D1A  0E9E               	movlw	158
  1269  000D1C  6F83               	movwf	??_win_protocol& (0+255),b
  1270  000D1E  0E4B               	movlw	75
  1271  000D20                     u1717:
  1272  000D20  FFFF               	dw	65535	; errata NOP
  1273  000D22  2EE8               	decfsz	wreg,f,c
  1274  000D24  D7FD               	bra	u1717
  1275  000D26  2F83               	decfsz	??_win_protocol& (0+255),f,b
  1276  000D28  D7FB               	bra	u1717
  1277  000D2A  2F84               	decfsz	(??_win_protocol+1)& (0+255),f,b
  1278  000D2C  D7F9               	bra	u1717
  1279  000D2E  D000               	nop2	
  1280  000D30  F000               	nop	
  1281                           
  1282                           ;main.c: 276: clean_screen();
  1283  000D32  EC5F  F00A         	call	_clean_screen	;wreg free
  1284  000D36                     l198:
  1285  000D36  FFFF               	dw	65535	; assembler added errata NOP
  1286  000D38  0012               	return		;funcret
  1287  000D3A  FFFF               	dw	65535	; errata NOP
  1288  000D3C                     __end_of_win_protocol:
  1289                           	opt callstack 0
  1290                           
  1291 ;; *************** function _game_won *****************
  1292 ;; Defined at:
  1293 ;;		line 279 in file "main.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;		None
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1307 ;;      Params:         0       0       0       0       0       0       0
  1308 ;;      Locals:         0       0       0       0       0       0       0
  1309 ;;      Temps:          0       2       0       0       0       0       0
  1310 ;;      Totals:         0       2       0       0       0       0       0
  1311 ;;Total ram usage:        2 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    6
  1314 ;; This function calls:
  1315 ;;		_R_I
  1316 ;;		_print_message_onLCD
  1317 ;;		_reset_game
  1318 ;; This function is called by:
  1319 ;;		_win_protocol
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text2
  1324  000F68                     __ptext2:
  1325                           	opt callstack 0
  1326  000F68                     _game_won:
  1327                           	opt callstack 0
  1328  000F68  FFFF               	dw	65535	; assembler added errata NOP
  1329                           
  1330                           ;main.c: 280: print_message_onLCD("¡¡Has", 128, 0);
  1331                           
  1332                           ;incstack = 0
  1333  000F6A  0E85               	movlw	low STR_11
  1334  000F6C  6E3B               	movwf	print_message_onLCD@message,c
  1335  000F6E  0E06               	movlw	high STR_11
  1336  000F70  6E3C               	movwf	print_message_onLCD@message+1,c
  1337  000F72  0E80               	movlw	128
  1338  000F74  6E3D               	movwf	print_message_onLCD@place,c
  1339  000F76  0E00               	movlw	0
  1340  000F78  6E3E               	movwf	print_message_onLCD@space_bt,c
  1341  000F7A  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1342                           
  1343                           ;main.c: 281: print_message_onLCD("Ganado!!", 192, 0);
  1344  000F7E  0E5F               	movlw	low STR_12
  1345  000F80  6E3B               	movwf	print_message_onLCD@message,c
  1346  000F82  0E06               	movlw	high STR_12
  1347  000F84  6E3C               	movwf	print_message_onLCD@message+1,c
  1348  000F86  0EC0               	movlw	192
  1349  000F88  6E3D               	movwf	print_message_onLCD@place,c
  1350  000F8A  0E00               	movlw	0
  1351  000F8C  6E3E               	movwf	print_message_onLCD@space_bt,c
  1352  000F8E  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1353                           
  1354                           ;main.c: 282: reset_game();
  1355  000F92  EC24  F00A         	call	_reset_game	;wreg free
  1356                           
  1357                           ;main.c: 283: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1358  000F96  0E08               	movlw	8
  1359  000F98  0100               	movlb	0	; () banked
  1360  000F9A  6F82               	movwf	(??_game_won+1)& (0+255),b
  1361  000F9C  0E9E               	movlw	158
  1362  000F9E  6F81               	movwf	??_game_won& (0+255),b
  1363  000FA0  0E4B               	movlw	75
  1364  000FA2                     u1727:
  1365  000FA2  FFFF               	dw	65535	; errata NOP
  1366  000FA4  2EE8               	decfsz	wreg,f,c
  1367  000FA6  D7FD               	bra	u1727
  1368  000FA8  2F81               	decfsz	??_game_won& (0+255),f,b
  1369  000FAA  D7FB               	bra	u1727
  1370  000FAC  2F82               	decfsz	(??_game_won+1)& (0+255),f,b
  1371  000FAE  D7F9               	bra	u1727
  1372  000FB0  D000               	nop2	
  1373  000FB2  F000               	nop	
  1374                           
  1375                           ;main.c: 284: R_I(0X01);
  1376  000FB4  0E01               	movlw	1
  1377  000FB6  EC7C  F00A         	call	_R_I
  1378                           
  1379                           ;main.c: 285: _delay((unsigned long)((100)*(4000000/4000.0)));
  1380  000FBA  0E62               	movlw	98
  1381  000FBC  0100               	movlb	0	; () banked
  1382  000FBE  6F81               	movwf	??_game_won& (0+255),b
  1383  000FC0  0E76               	movlw	118
  1384  000FC2                     u1737:
  1385  000FC2  FFFF               	dw	65535	; errata NOP
  1386  000FC4  2EE8               	decfsz	wreg,f,c
  1387  000FC6  D7FD               	bra	u1737
  1388  000FC8  2F81               	decfsz	??_game_won& (0+255),f,b
  1389  000FCA  D7FB               	bra	u1737
  1390  000FCC  F000               	nop	
  1391  000FCE  0012               	return		;funcret
  1392  000FD0  FFFF               	dw	65535	; errata NOP
  1393  000FD2                     __end_of_game_won:
  1394                           	opt callstack 0
  1395                           
  1396 ;; *************** function _srand *****************
  1397 ;; Defined at:
  1398 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  x               2   54[COMRAM] unsigned int 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;		None
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		status,2
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1412 ;;      Params:         2       0       0       0       0       0       0
  1413 ;;      Locals:         0       0       0       0       0       0       0
  1414 ;;      Temps:          0       0       0       0       0       0       0
  1415 ;;      Totals:         2       0       0       0       0       0       0
  1416 ;;Total ram usage:        2 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    3
  1419 ;; This function calls:
  1420 ;;		Nothing
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text3
  1427  00154C                     __ptext3:
  1428                           	opt callstack 0
  1429  00154C                     _srand:
  1430                           	opt callstack 0
  1431  00154C  FFFF               	dw	65535	; assembler added errata NOP
  1432                           
  1433                           ;incstack = 0
  1434  00154E  C037  F041         	movff	srand@x,_randx
  1435  001552  C038  F042         	movff	srand@x+1,_randx+1
  1436  001556  6A43               	clrf	_randx+2,c
  1437  001558  6A44               	clrf	_randx+3,c
  1438  00155A  0012               	return		;funcret
  1439  00155C  FFFF               	dw	65535	; errata NOP
  1440  00155E                     __end_of_srand:
  1441                           	opt callstack 0
  1442                           
  1443 ;; *************** function _loss_protocol *****************
  1444 ;; Defined at:
  1445 ;;		line 288 in file "main.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;		None
  1450 ;; Return value:  Size  Location     Type
  1451 ;;                  1    wreg      void 
  1452 ;; Registers used:
  1453 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1459 ;;      Params:         0       0       0       0       0       0       0
  1460 ;;      Locals:         0       0       0       0       0       0       0
  1461 ;;      Temps:          0       2       0       0       0       0       0
  1462 ;;      Totals:         0       2       0       0       0       0       0
  1463 ;;Total ram usage:        2 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; Hardware stack levels required when called:    6
  1466 ;; This function calls:
  1467 ;;		_clean_screen
  1468 ;;		_print_message_onLCD
  1469 ;;		_reset_game
  1470 ;; This function is called by:
  1471 ;;		_main
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           	psect	text4
  1476  000BB4                     __ptext4:
  1477                           	opt callstack 0
  1478  000BB4                     _loss_protocol:
  1479                           	opt callstack 0
  1480  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  1481                           
  1482                           ;main.c: 289: print_message_onLCD("Perdiste", 128, 0);
  1483                           
  1484                           ;incstack = 0
  1485  000BB6  0E68               	movlw	low STR_13
  1486  000BB8  6E3B               	movwf	print_message_onLCD@message,c
  1487  000BBA  0E06               	movlw	high STR_13
  1488  000BBC  6E3C               	movwf	print_message_onLCD@message+1,c
  1489  000BBE  0E80               	movlw	128
  1490  000BC0  6E3D               	movwf	print_message_onLCD@place,c
  1491  000BC2  0E00               	movlw	0
  1492  000BC4  6E3E               	movwf	print_message_onLCD@space_bt,c
  1493  000BC6  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1494                           
  1495                           ;main.c: 290: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1496  000BCA  0E04               	movlw	4
  1497  000BCC  0100               	movlb	0	; () banked
  1498  000BCE  6F82               	movwf	(??_loss_protocol+1)& (0+255),b
  1499  000BD0  0ECF               	movlw	207
  1500  000BD2  6F81               	movwf	??_loss_protocol& (0+255),b
  1501  000BD4  0EA5               	movlw	165
  1502  000BD6                     u1747:
  1503  000BD6  FFFF               	dw	65535	; errata NOP
  1504  000BD8  2EE8               	decfsz	wreg,f,c
  1505  000BDA  D7FD               	bra	u1747
  1506  000BDC  2F81               	decfsz	??_loss_protocol& (0+255),f,b
  1507  000BDE  D7FB               	bra	u1747
  1508  000BE0  2F82               	decfsz	(??_loss_protocol+1)& (0+255),f,b
  1509  000BE2  D7F9               	bra	u1747
  1510  000BE4  F000               	nop	
  1511                           
  1512                           ;main.c: 291: clean_screen();
  1513  000BE6  EC5F  F00A         	call	_clean_screen	;wreg free
  1514                           
  1515                           ;main.c: 293: print_message_onLCD(nums, 128, 0);
  1516  000BEA  0EAC               	movlw	low _nums
  1517  000BEC  6E3B               	movwf	print_message_onLCD@message,c
  1518  000BEE  0E00               	movlw	high _nums
  1519  000BF0  6E3C               	movwf	print_message_onLCD@message+1,c
  1520  000BF2  0E80               	movlw	128
  1521  000BF4  6E3D               	movwf	print_message_onLCD@place,c
  1522  000BF6  0E00               	movlw	0
  1523  000BF8  6E3E               	movwf	print_message_onLCD@space_bt,c
  1524  000BFA  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1525                           
  1526                           ;main.c: 294: print_message_onLCD(ans, 192, 0);
  1527  000BFE  0EA2               	movlw	low _ans
  1528  000C00  6E3B               	movwf	print_message_onLCD@message,c
  1529  000C02  0E00               	movlw	high _ans
  1530  000C04  6E3C               	movwf	print_message_onLCD@message+1,c
  1531  000C06  0EC0               	movlw	192
  1532  000C08  6E3D               	movwf	print_message_onLCD@place,c
  1533  000C0A  0E00               	movlw	0
  1534  000C0C  6E3E               	movwf	print_message_onLCD@space_bt,c
  1535  000C0E  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1536                           
  1537                           ;main.c: 295: _delay((unsigned long)((3000)*(4000000/4000.0)));
  1538  000C12  0E0C               	movlw	12
  1539  000C14  0100               	movlb	0	; () banked
  1540  000C16  6F82               	movwf	(??_loss_protocol+1)& (0+255),b
  1541  000C18  0E6C               	movlw	108
  1542  000C1A  6F81               	movwf	??_loss_protocol& (0+255),b
  1543  000C1C  0EF2               	movlw	242
  1544  000C1E                     u1757:
  1545  000C1E  FFFF               	dw	65535	; errata NOP
  1546  000C20  2EE8               	decfsz	wreg,f,c
  1547  000C22  D7FD               	bra	u1757
  1548  000C24  2F81               	decfsz	??_loss_protocol& (0+255),f,b
  1549  000C26  D7FB               	bra	u1757
  1550  000C28  2F82               	decfsz	(??_loss_protocol+1)& (0+255),f,b
  1551  000C2A  D7F9               	bra	u1757
  1552  000C2C  D000               	nop2	
  1553  000C2E  F000               	nop	
  1554                           
  1555                           ;main.c: 296: clean_screen();
  1556  000C30  EC5F  F00A         	call	_clean_screen	;wreg free
  1557                           
  1558                           ;main.c: 298: print_message_onLCD("Reiniciando", 128, 0);
  1559  000C34  0E3E               	movlw	low STR_14
  1560  000C36  6E3B               	movwf	print_message_onLCD@message,c
  1561  000C38  0E06               	movlw	high STR_14
  1562  000C3A  6E3C               	movwf	print_message_onLCD@message+1,c
  1563  000C3C  0E80               	movlw	128
  1564  000C3E  6E3D               	movwf	print_message_onLCD@place,c
  1565  000C40  0E00               	movlw	0
  1566  000C42  6E3E               	movwf	print_message_onLCD@space_bt,c
  1567  000C44  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1568                           
  1569                           ;main.c: 299: print_message_onLCD("Juego", 192, 0);
  1570  000C48  0E7F               	movlw	low STR_15
  1571  000C4A  6E3B               	movwf	print_message_onLCD@message,c
  1572  000C4C  0E06               	movlw	high STR_15
  1573  000C4E  6E3C               	movwf	print_message_onLCD@message+1,c
  1574  000C50  0EC0               	movlw	192
  1575  000C52  6E3D               	movwf	print_message_onLCD@place,c
  1576  000C54  0E00               	movlw	0
  1577  000C56  6E3E               	movwf	print_message_onLCD@space_bt,c
  1578  000C58  ECEE  F006         	call	_print_message_onLCD	;wreg free
  1579                           
  1580                           ;main.c: 300: _delay((unsigned long)((3000)*(4000000/4000.0)));
  1581  000C5C  0E0C               	movlw	12
  1582  000C5E  0100               	movlb	0	; () banked
  1583  000C60  6F82               	movwf	(??_loss_protocol+1)& (0+255),b
  1584  000C62  0E6C               	movlw	108
  1585  000C64  6F81               	movwf	??_loss_protocol& (0+255),b
  1586  000C66  0EF2               	movlw	242
  1587  000C68                     u1767:
  1588  000C68  FFFF               	dw	65535	; errata NOP
  1589  000C6A  2EE8               	decfsz	wreg,f,c
  1590  000C6C  D7FD               	bra	u1767
  1591  000C6E  2F81               	decfsz	??_loss_protocol& (0+255),f,b
  1592  000C70  D7FB               	bra	u1767
  1593  000C72  2F82               	decfsz	(??_loss_protocol+1)& (0+255),f,b
  1594  000C74  D7F9               	bra	u1767
  1595  000C76  D000               	nop2	
  1596  000C78  F000               	nop	
  1597                           
  1598                           ;main.c: 302: reset_game();
  1599  000C7A  EC24  F00A         	call	_reset_game	;wreg free
  1600                           
  1601                           ;main.c: 303: clean_screen();
  1602  000C7E  EC5F  F00A         	call	_clean_screen	;wreg free
  1603  000C82  0012               	return		;funcret
  1604  000C84  FFFF               	dw	65535	; errata NOP
  1605  000C86                     __end_of_loss_protocol:
  1606                           	opt callstack 0
  1607                           
  1608 ;; *************** function _reset_game *****************
  1609 ;; Defined at:
  1610 ;;		line 235 in file "main.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      unsigned char 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1624 ;;      Params:         0       0       0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    5
  1631 ;; This function calls:
  1632 ;;		_clear_vec
  1633 ;; This function is called by:
  1634 ;;		_game_won
  1635 ;;		_loss_protocol
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text5
  1640  001448                     __ptext5:
  1641                           	opt callstack 0
  1642  001448                     _reset_game:
  1643                           	opt callstack 0
  1644  001448  FFFF               	dw	65535	; assembler added errata NOP
  1645                           
  1646                           ;main.c: 236: attempt = 1;
  1647                           
  1648                           ;incstack = 0
  1649  00144A  0E01               	movlw	1
  1650  00144C  6E45               	movwf	_attempt,c
  1651                           
  1652                           ;main.c: 237: lvl = 0;
  1653  00144E  0E00               	movlw	0
  1654  001450  0100               	movlb	0	; () banked
  1655  001452  6FA1               	movwf	_lvl& (0+255),b
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 238: clear_vec(&ans);
  1659  001454  0EA2               	movlw	low _ans
  1660  001456  6E3B               	movwf	clear_vec@vec,c
  1661  001458  0E00               	movlw	high _ans
  1662  00145A  6E3C               	movwf	clear_vec@vec+1,c
  1663  00145C  ECB2  F009         	call	_clear_vec	;wreg free
  1664                           
  1665                           ;main.c: 239: clear_vec(&nums);
  1666  001460  0EAC               	movlw	low _nums
  1667  001462  6E3B               	movwf	clear_vec@vec,c
  1668  001464  0E00               	movlw	high _nums
  1669  001466  6E3C               	movwf	clear_vec@vec+1,c
  1670  001468  ECB2  F009         	call	_clear_vec	;wreg free
  1671  00146C  0012               	return		;funcret
  1672  00146E  FFFF               	dw	65535	; errata NOP
  1673  001470                     __end_of_reset_game:
  1674                           	opt callstack 0
  1675                           
  1676 ;; *************** function _clear_vec *****************
  1677 ;; Defined at:
  1678 ;;		line 242 in file "main.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  vec             2   58[COMRAM] PTR PTR int 
  1681 ;;		 -> ans(10), nums(10), 
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  i               1   63[COMRAM] unsigned char 
  1684 ;;  vec_len         1   62[COMRAM] unsigned char 
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1694 ;;      Params:         2       0       0       0       0       0       0
  1695 ;;      Locals:         2       0       0       0       0       0       0
  1696 ;;      Temps:          2       0       0       0       0       0       0
  1697 ;;      Totals:         6       0       0       0       0       0       0
  1698 ;;Total ram usage:        6 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; Hardware stack levels required when called:    4
  1701 ;; This function calls:
  1702 ;;		_strlen
  1703 ;; This function is called by:
  1704 ;;		_reset_game
  1705 ;;		_win_protocol
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text6
  1710  001364                     __ptext6:
  1711                           	opt callstack 0
  1712  001364                     _clear_vec:
  1713                           	opt callstack 0
  1714  001364  FFFF               	dw	65535	; assembler added errata NOP
  1715                           
  1716                           ;main.c: 243: char vec_len = strlen(vec);
  1717                           
  1718                           ;incstack = 0
  1719  001366  C03B  F037         	movff	clear_vec@vec,strlen@s
  1720  00136A  C03C  F038         	movff	clear_vec@vec+1,strlen@s+1
  1721  00136E  ECD8  F009         	call	_strlen	;wreg free
  1722  001372  5037               	movf	?_strlen,w,c
  1723  001374  6E3F               	movwf	clear_vec@vec_len,c
  1724                           
  1725                           ;main.c: 244: for (char i = 0; i < vec_len; i++) {
  1726  001376  0E00               	movlw	0
  1727  001378  6E40               	movwf	clear_vec@i,c
  1728  00137A  D012               	goto	l2324
  1729  00137C                     l2320:
  1730  00137C  FFFF               	dw	65535	; assembler added errata NOP
  1731                           
  1732                           ;main.c: 245: vec[i] = '\0';
  1733  00137E  5040               	movf	clear_vec@i,w,c
  1734  001380  0D02               	mullw	2
  1735  001382  CFF3 F03D          	movff	prodl,??_clear_vec
  1736  001386  CFF4 F03E          	movff	prodh,??_clear_vec+1
  1737  00138A  503D               	movf	??_clear_vec,w,c
  1738  00138C  243B               	addwf	clear_vec@vec,w,c
  1739  00138E  6ED9               	movwf	fsr2l,c
  1740  001390  503E               	movf	??_clear_vec+1,w,c
  1741  001392  203C               	addwfc	clear_vec@vec+1,w,c
  1742  001394  6EDA               	movwf	fsr2h,c
  1743  001396  0E00               	movlw	0
  1744  001398  6EDE               	movwf	postinc2,c
  1745  00139A  0E00               	movlw	0
  1746  00139C  6EDD               	movwf	postdec2,c
  1747  00139E  2A40               	incf	clear_vec@i,f,c
  1748  0013A0                     l2324:
  1749  0013A0  FFFF               	dw	65535	; assembler added errata NOP
  1750  0013A2  503F               	movf	clear_vec@vec_len,w,c
  1751  0013A4  5C40               	subwf	clear_vec@i,w,c
  1752  0013A6  B0D8               	btfsc	status,0,c
  1753  0013A8  0012               	return		;funcret
  1754  0013AA  FFFF               	dw	65535	; assembler added errata NOP
  1755  0013AC  D7E7               	goto	l2320
  1756  0013AE  FFFF               	dw	65535	; errata NOP
  1757  0013B0                     __end_of_clear_vec:
  1758                           	opt callstack 0
  1759                           
  1760 ;; *************** function _print_message_onLCD *****************
  1761 ;; Defined at:
  1762 ;;		line 162 in file "main.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  message         2   58[COMRAM] PTR unsigned char 
  1765 ;;		 -> STR_15(6), STR_14(12), STR_13(9), STR_12(9), 
  1766 ;;		 -> STR_11(6), STR_10(11), STR_9(12), STR_8(8), 
  1767 ;;		 -> capture@m(16), ans(10), STR_5(10), nums(10), 
  1768 ;;		 -> STR_4(13), STR_3(12), STR_2(6), STR_1(14), 
  1769 ;;  place           1   60[COMRAM] unsigned char 
  1770 ;;  space_bt        1   61[COMRAM] unsigned char 
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;  i               1    0[BANK0 ] unsigned char 
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  1    wreg      void 
  1775 ;; Registers used:
  1776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1782 ;;      Params:         4       0       0       0       0       0       0
  1783 ;;      Locals:         0       1       0       0       0       0       0
  1784 ;;      Temps:          2       0       0       0       0       0       0
  1785 ;;      Totals:         6       1       0       0       0       0       0
  1786 ;;Total ram usage:        7 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    4
  1789 ;; This function calls:
  1790 ;;		_R_D
  1791 ;;		_R_I
  1792 ;;		_strlen
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;;		_win_protocol
  1796 ;;		_game_won
  1797 ;;		_loss_protocol
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text7
  1802  000DDC                     __ptext7:
  1803                           	opt callstack 0
  1804  000DDC                     _print_message_onLCD:
  1805                           	opt callstack 0
  1806  000DDC  FFFF               	dw	65535	; assembler added errata NOP
  1807                           
  1808                           ;main.c: 163: if (place > 0) {
  1809                           
  1810                           ;incstack = 0
  1811  000DDE  503D               	movf	print_message_onLCD@place,w,c
  1812  000DE0  B4D8               	btfsc	status,2,c
  1813  000DE2  D003               	goto	l2330
  1814                           
  1815                           ;main.c: 164: R_I(place);
  1816  000DE4  503D               	movf	print_message_onLCD@place,w,c
  1817  000DE6  EC7C  F00A         	call	_R_I
  1818  000DEA                     l2330:
  1819  000DEA  FFFF               	dw	65535	; assembler added errata NOP
  1820                           
  1821                           ;main.c: 165: };main.c: 166: for (char i = 0; i < strlen(message); i++) {
  1822  000DEC  0E00               	movlw	0
  1823  000DEE  0100               	movlb	0	; () banked
  1824  000DF0  6F80               	movwf	print_message_onLCD@i& (0+255),b
  1825  000DF2  D023               	goto	l2340
  1826  000DF4                     l2332:
  1827  000DF4  FFFF               	dw	65535	; assembler added errata NOP
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;main.c: 167: R_D(message[i]);
  1831  000DF6  5180               	movf	print_message_onLCD@i& (0+255),w,b
  1832  000DF8  243B               	addwf	print_message_onLCD@message,w,c
  1833  000DFA  6E3F               	movwf	??_print_message_onLCD& (0+255),c
  1834  000DFC  0E00               	movlw	0
  1835  000DFE  203C               	addwfc	print_message_onLCD@message+1,w,c
  1836  000E00  6E40               	movwf	(??_print_message_onLCD+1)& (0+255),c
  1837  000E02  C03F  FFF6         	movff	??_print_message_onLCD,tblptrl
  1838  000E06  C040  FFF7         	movff	??_print_message_onLCD+1,tblptrh
  1839  000E0A  6AF8               	clrf	tblptru,c
  1840  000E0C  0E05               	movlw	(high __ramtop+-1)
  1841  000E0E  64F7               	cpfsgt	tblptrh,c
  1842  000E10  D004               	bra	u1357
  1843  000E12  0008               	tblrd		*
  1844  000E14  FFFF               	dw	65535	; errata NOP
  1845  000E16  50F5               	movf	tablat,w,c
  1846  000E18  D005               	bra	u1350
  1847  000E1A                     u1357:
  1848  000E1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1849  000E1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1850  000E22  50EF               	movf	indf0,w,c
  1851  000E24                     u1350:
  1852  000E24  EC6E  F00A         	call	_R_D
  1853                           
  1854                           ;main.c: 168: if (space_bt) {
  1855  000E28  503E               	movf	print_message_onLCD@space_bt,w,c
  1856  000E2A  B4D8               	btfsc	status,2,c
  1857  000E2C  D003               	goto	l2338
  1858                           
  1859                           ;main.c: 169: R_D(' ');
  1860  000E2E  0E20               	movlw	32
  1861  000E30  EC6E  F00A         	call	_R_D
  1862  000E34                     l2338:
  1863  000E34  FFFF               	dw	65535	; assembler added errata NOP
  1864  000E36  0100               	movlb	0	; () banked
  1865  000E38  2B80               	incf	print_message_onLCD@i& (0+255),f,b
  1866  000E3A                     l2340:
  1867  000E3A  FFFF               	dw	65535	; assembler added errata NOP
  1868                           
  1869                           ; BSR set to: 0
  1870  000E3C  C03B  F037         	movff	print_message_onLCD@message,strlen@s
  1871  000E40  C03C  F038         	movff	print_message_onLCD@message+1,strlen@s+1
  1872  000E44  ECD8  F009         	call	_strlen	;wreg free
  1873  000E48  0100               	movlb	0	; () banked
  1874  000E4A  5180               	movf	print_message_onLCD@i& (0+255),w,b
  1875  000E4C  6E3F               	movwf	??_print_message_onLCD& (0+255),c
  1876  000E4E  6A40               	clrf	(??_print_message_onLCD+1)& (0+255),c
  1877  000E50  5037               	movf	?_strlen,w,c
  1878  000E52  5C3F               	subwf	??_print_message_onLCD,w,c
  1879  000E54  5038               	movf	?_strlen+1,w,c
  1880  000E56  5840               	subwfb	??_print_message_onLCD+1,w,c
  1881  000E58  B0D8               	btfsc	status,0,c
  1882                           
  1883                           ; BSR set to: 0
  1884  000E5A  0012               	return		;funcret
  1885  000E5C  FFFF               	dw	65535	; assembler added errata NOP
  1886  000E5E  D7CA               	goto	l2332
  1887  000E60  FFFF               	dw	65535	; errata NOP
  1888  000E62                     __end_of_print_message_onLCD:
  1889                           	opt callstack 0
  1890                           
  1891 ;; *************** function _R_D *****************
  1892 ;; Defined at:
  1893 ;;		line 153 in file "main.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;  dato            1    wreg     unsigned char 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  dato            1   54[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1907 ;;      Params:         0       0       0       0       0       0       0
  1908 ;;      Locals:         1       0       0       0       0       0       0
  1909 ;;      Temps:          0       0       0       0       0       0       0
  1910 ;;      Totals:         1       0       0       0       0       0       0
  1911 ;;Total ram usage:        1 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    3
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_print_message_onLCD
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text8
  1922  0014DC                     __ptext8:
  1923                           	opt callstack 0
  1924  0014DC                     _R_D:
  1925                           	opt callstack 0
  1926  0014DC  FFFF               	dw	65535	; assembler added errata NOP
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;incstack = 0
  1930                           ;R_D@dato stored from wreg
  1931  0014DE  6E37               	movwf	R_D@dato,c
  1932                           
  1933                           ;main.c: 154: LC3 = 0;
  1934  0014E0  968B               	bcf	3979,3,c	;volatile
  1935                           
  1936                           ;main.c: 155: LC4 = 1;
  1937  0014E2  888B               	bsf	3979,4,c	;volatile
  1938                           
  1939                           ;main.c: 156: LATD = dato;
  1940  0014E4  C037  FF8C         	movff	R_D@dato,3980	;volatile
  1941                           
  1942                           ;main.c: 157: LC3 = 1;
  1943  0014E8  868B               	bsf	3979,3,c	;volatile
  1944                           
  1945                           ;main.c: 158: _delay((unsigned long)((100)*(4000000/4000000.0)));
  1946  0014EA  0E19               	movlw	25
  1947  0014EC                     u1777:
  1948  0014EC  FFFF               	dw	65535	; errata NOP
  1949  0014EE  2EE8               	decfsz	wreg,f,c
  1950  0014F0  D7FD               	bra	u1777
  1951                           
  1952                           ;main.c: 159: LC3 = 0;
  1953  0014F2  968B               	bcf	3979,3,c	;volatile
  1954  0014F4  0012               	return		;funcret
  1955  0014F6  FFFF               	dw	65535	; errata NOP
  1956  0014F8                     __end_of_R_D:
  1957                           	opt callstack 0
  1958                           
  1959 ;; *************** function _clean_screen *****************
  1960 ;; Defined at:
  1961 ;;		line 310 in file "main.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1975 ;;      Params:         0       0       0       0       0       0       0
  1976 ;;      Locals:         0       0       0       0       0       0       0
  1977 ;;      Temps:          1       0       0       0       0       0       0
  1978 ;;      Totals:         1       0       0       0       0       0       0
  1979 ;;Total ram usage:        1 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    4
  1982 ;; This function calls:
  1983 ;;		_R_I
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;;		_win_protocol
  1987 ;;		_loss_protocol
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text9
  1992  0014BE                     __ptext9:
  1993                           	opt callstack 0
  1994  0014BE                     _clean_screen:
  1995                           	opt callstack 0
  1996  0014BE  FFFF               	dw	65535	; assembler added errata NOP
  1997                           
  1998                           ;main.c: 311: R_I(0X01);
  1999                           
  2000                           ;incstack = 0
  2001  0014C0  0E01               	movlw	1
  2002  0014C2  EC7C  F00A         	call	_R_I
  2003                           
  2004                           ;main.c: 312: _delay((unsigned long)((100)*(4000000/4000.0)));
  2005  0014C6  0E62               	movlw	98
  2006  0014C8  6E38               	movwf	??_clean_screen& (0+255),c
  2007  0014CA  0E76               	movlw	118
  2008  0014CC                     u1787:
  2009  0014CC  FFFF               	dw	65535	; errata NOP
  2010  0014CE  2EE8               	decfsz	wreg,f,c
  2011  0014D0  D7FD               	bra	u1787
  2012  0014D2  2E38               	decfsz	??_clean_screen& (0+255),f,c
  2013  0014D4  D7FB               	bra	u1787
  2014  0014D6  D000               	nop2	
  2015  0014D8  0012               	return		;funcret
  2016  0014DA  FFFF               	dw	65535	; errata NOP
  2017  0014DC                     __end_of_clean_screen:
  2018                           	opt callstack 0
  2019                           
  2020 ;; *************** function _initial_config *****************
  2021 ;; Defined at:
  2022 ;;		line 107 in file "main.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, status,2
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2036 ;;      Params:         0       0       0       0       0       0       0
  2037 ;;      Locals:         0       0       0       0       0       0       0
  2038 ;;      Temps:          0       0       0       0       0       0       0
  2039 ;;      Totals:         0       0       0       0       0       0       0
  2040 ;;Total ram usage:        0 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    3
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text10
  2051  001498                     __ptext10:
  2052                           	opt callstack 0
  2053  001498                     _initial_config:
  2054                           	opt callstack 0
  2055  001498  FFFF               	dw	65535	; assembler added errata NOP
  2056                           
  2057                           ;main.c: 108: TRISB = 0B11110000;
  2058                           
  2059                           ;incstack = 0
  2060  00149A  0EF0               	movlw	240
  2061  00149C  6E93               	movwf	3987,c	;volatile
  2062                           
  2063                           ;main.c: 109: TRISC = 0B10000000;
  2064  00149E  0E80               	movlw	128
  2065  0014A0  6E94               	movwf	3988,c	;volatile
  2066                           
  2067                           ;main.c: 110: TRISD = 0X00;
  2068  0014A2  0E00               	movlw	0
  2069  0014A4  6E95               	movwf	3989,c	;volatile
  2070                           
  2071                           ;main.c: 113: LATB = 0XFF;
  2072  0014A6  688A               	setf	3978,c	;volatile
  2073                           
  2074                           ;main.c: 114: LATC = 0;
  2075  0014A8  0E00               	movlw	0
  2076  0014AA  6E8B               	movwf	3979,c	;volatile
  2077                           
  2078                           ;main.c: 115: LATD = 0;
  2079  0014AC  0E00               	movlw	0
  2080  0014AE  6E8C               	movwf	3980,c	;volatile
  2081                           
  2082                           ;main.c: 116: PORTB = 0XFF;
  2083  0014B0  6881               	setf	3969,c	;volatile
  2084                           
  2085                           ;main.c: 117: PORTC = 0;
  2086  0014B2  0E00               	movlw	0
  2087  0014B4  6E82               	movwf	3970,c	;volatile
  2088                           
  2089                           ;main.c: 118: PORTD = 0;
  2090  0014B6  0E00               	movlw	0
  2091  0014B8  6E83               	movwf	3971,c	;volatile
  2092  0014BA  0012               	return		;funcret
  2093  0014BC  FFFF               	dw	65535	; errata NOP
  2094  0014BE                     __end_of_initial_config:
  2095                           	opt callstack 0
  2096                           
  2097 ;; *************** function _init_serial_com *****************
  2098 ;; Defined at:
  2099 ;;		line 132 in file "main.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2113 ;;      Params:         0       0       0       0       0       0       0
  2114 ;;      Locals:         0       0       0       0       0       0       0
  2115 ;;      Temps:          0       0       0       0       0       0       0
  2116 ;;      Totals:         0       0       0       0       0       0       0
  2117 ;;Total ram usage:        0 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    3
  2120 ;; This function calls:
  2121 ;;		Nothing
  2122 ;; This function is called by:
  2123 ;;		_main
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           	psect	text11
  2128  001470                     __ptext11:
  2129                           	opt callstack 0
  2130  001470                     _init_serial_com:
  2131                           	opt callstack 0
  2132  001470  FFFF               	dw	65535	; assembler added errata NOP
  2133                           
  2134                           ;main.c: 133: INTCON = 0B11001000;
  2135                           
  2136                           ;incstack = 0
  2137  001472  0EC8               	movlw	200
  2138  001474  6EF2               	movwf	4082,c	;volatile
  2139                           
  2140                           ;main.c: 134: INTCON2 = 0B00000001;
  2141  001476  0E01               	movlw	1
  2142  001478  6EF1               	movwf	4081,c	;volatile
  2143                           
  2144                           ;main.c: 135: RCONbits.IPEN = 0;
  2145  00147A  9ED0               	bcf	4048,7,c	;volatile
  2146                           
  2147                           ;main.c: 136: SPBRG = 25;
  2148  00147C  0E19               	movlw	25
  2149  00147E  6EAF               	movwf	4015,c	;volatile
  2150                           
  2151                           ;main.c: 137: PIE1 = 0B00100000;
  2152  001480  0E20               	movlw	32
  2153  001482  6E9D               	movwf	3997,c	;volatile
  2154                           
  2155                           ;main.c: 138: PIR1 = 0B00010000;
  2156  001484  0E10               	movlw	16
  2157  001486  6E9E               	movwf	3998,c	;volatile
  2158                           
  2159                           ;main.c: 139: IPR1 = 0B00100000;
  2160  001488  0E20               	movlw	32
  2161  00148A  6E9F               	movwf	3999,c	;volatile
  2162                           
  2163                           ;main.c: 140: TXSTA = 0B00100110;
  2164  00148C  0E26               	movlw	38
  2165  00148E  6EAC               	movwf	4012,c	;volatile
  2166                           
  2167                           ;main.c: 141: RCSTA = 0B10010000;
  2168  001490  0E90               	movlw	144
  2169  001492  6EAB               	movwf	4011,c	;volatile
  2170  001494  0012               	return		;funcret
  2171  001496  FFFF               	dw	65535	; errata NOP
  2172  001498                     __end_of_init_serial_com:
  2173                           	opt callstack 0
  2174                           
  2175 ;; *************** function _init_lcd *****************
  2176 ;; Defined at:
  2177 ;;		line 121 in file "main.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;		None
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  1    wreg      void 
  2184 ;; Registers used:
  2185 ;;		wreg, status,2, cstack
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2191 ;;      Params:         0       0       0       0       0       0       0
  2192 ;;      Locals:         0       0       0       0       0       0       0
  2193 ;;      Temps:          1       0       0       0       0       0       0
  2194 ;;      Totals:         1       0       0       0       0       0       0
  2195 ;;Total ram usage:        1 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; Hardware stack levels required when called:    4
  2198 ;; This function calls:
  2199 ;;		_R_I
  2200 ;; This function is called by:
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text12
  2206  001214                     __ptext12:
  2207                           	opt callstack 0
  2208  001214                     _init_lcd:
  2209                           	opt callstack 0
  2210  001214  FFFF               	dw	65535	; assembler added errata NOP
  2211                           
  2212                           ;main.c: 122: _delay((unsigned long)((20)*(4000000/4000.0)));
  2213                           
  2214                           ;incstack = 0
  2215  001216  0E14               	movlw	20
  2216  001218  6E38               	movwf	??_init_lcd& (0+255),c
  2217  00121A  0E7D               	movlw	125
  2218  00121C                     u1797:
  2219  00121C  FFFF               	dw	65535	; errata NOP
  2220  00121E  2EE8               	decfsz	wreg,f,c
  2221  001220  D7FD               	bra	u1797
  2222  001222  2E38               	decfsz	??_init_lcd& (0+255),f,c
  2223  001224  D7FB               	bra	u1797
  2224  001226  D000               	nop2	
  2225                           
  2226                           ;main.c: 123: R_I(0X30);
  2227  001228  0E30               	movlw	48
  2228  00122A  EC7C  F00A         	call	_R_I
  2229                           
  2230                           ;main.c: 124: _delay((unsigned long)((5)*(4000000/4000.0)));
  2231  00122E  0E05               	movlw	5
  2232  001230  6E38               	movwf	??_init_lcd& (0+255),c
  2233  001232  0EDF               	movlw	223
  2234  001234                     u1807:
  2235  001234  FFFF               	dw	65535	; errata NOP
  2236  001236  2EE8               	decfsz	wreg,f,c
  2237  001238  D7FD               	bra	u1807
  2238  00123A  2E38               	decfsz	??_init_lcd& (0+255),f,c
  2239  00123C  D7FB               	bra	u1807
  2240                           
  2241                           ;main.c: 125: R_I(0X30);
  2242  00123E  0E30               	movlw	48
  2243  001240  EC7C  F00A         	call	_R_I
  2244                           
  2245                           ;main.c: 126: R_I(0X3C);
  2246  001244  0E3C               	movlw	60
  2247  001246  EC7C  F00A         	call	_R_I
  2248                           
  2249                           ;main.c: 127: R_I(0X0C);
  2250  00124A  0E0C               	movlw	12
  2251  00124C  EC7C  F00A         	call	_R_I
  2252                           
  2253                           ;main.c: 128: R_I(0X01);
  2254  001250  0E01               	movlw	1
  2255  001252  EC7C  F00A         	call	_R_I
  2256                           
  2257                           ;main.c: 129: _delay((unsigned long)((20)*(4000000/4000.0)));
  2258  001256  0E14               	movlw	20
  2259  001258  6E38               	movwf	??_init_lcd& (0+255),c
  2260  00125A  0E7D               	movlw	125
  2261  00125C                     u1817:
  2262  00125C  FFFF               	dw	65535	; errata NOP
  2263  00125E  2EE8               	decfsz	wreg,f,c
  2264  001260  D7FD               	bra	u1817
  2265  001262  2E38               	decfsz	??_init_lcd& (0+255),f,c
  2266  001264  D7FB               	bra	u1817
  2267  001266  D000               	nop2	
  2268  001268  0012               	return		;funcret
  2269  00126A  FFFF               	dw	65535	; errata NOP
  2270  00126C                     __end_of_init_lcd:
  2271                           	opt callstack 0
  2272                           
  2273 ;; *************** function _R_I *****************
  2274 ;; Defined at:
  2275 ;;		line 144 in file "main.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  dato            1    wreg     unsigned char 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  dato            1   54[COMRAM] unsigned char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2289 ;;      Params:         0       0       0       0       0       0       0
  2290 ;;      Locals:         1       0       0       0       0       0       0
  2291 ;;      Temps:          0       0       0       0       0       0       0
  2292 ;;      Totals:         1       0       0       0       0       0       0
  2293 ;;Total ram usage:        1 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    3
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;;		_init_lcd
  2301 ;;		_print_message_onLCD
  2302 ;;		_game_won
  2303 ;;		_clean_screen
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text13
  2308  0014F8                     __ptext13:
  2309                           	opt callstack 0
  2310  0014F8                     _R_I:
  2311                           	opt callstack 0
  2312  0014F8  FFFF               	dw	65535	; assembler added errata NOP
  2313                           
  2314                           ;incstack = 0
  2315                           ;R_I@dato stored from wreg
  2316  0014FA  6E37               	movwf	R_I@dato,c
  2317                           
  2318                           ;main.c: 145: LC3 = 0;
  2319  0014FC  968B               	bcf	3979,3,c	;volatile
  2320                           
  2321                           ;main.c: 146: LC4 = 0;
  2322  0014FE  988B               	bcf	3979,4,c	;volatile
  2323                           
  2324                           ;main.c: 147: LATD = dato;
  2325  001500  C037  FF8C         	movff	R_I@dato,3980	;volatile
  2326                           
  2327                           ;main.c: 148: LC3 = 1;
  2328  001504  868B               	bsf	3979,3,c	;volatile
  2329                           
  2330                           ;main.c: 149: _delay((unsigned long)((100)*(4000000/4000000.0)));
  2331  001506  0E19               	movlw	25
  2332  001508                     u1827:
  2333  001508  FFFF               	dw	65535	; errata NOP
  2334  00150A  2EE8               	decfsz	wreg,f,c
  2335  00150C  D7FD               	bra	u1827
  2336                           
  2337                           ;main.c: 150: LC3 = 0;
  2338  00150E  968B               	bcf	3979,3,c	;volatile
  2339  001510  0012               	return		;funcret
  2340  001512  FFFF               	dw	65535	; errata NOP
  2341  001514                     __end_of_R_I:
  2342                           	opt callstack 0
  2343                           
  2344 ;; *************** function _get_rand_num *****************
  2345 ;; Defined at:
  2346 ;;		line 228 in file "main.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  from            1    wreg     unsigned char 
  2349 ;;  to              1   17[BANK0 ] unsigned char 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  from            1   22[BANK0 ] unsigned char 
  2352 ;;  num             2   20[BANK0 ] int 
  2353 ;;  r               1   23[BANK0 ] unsigned char [1]
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  1    wreg      unsigned char 
  2356 ;; Registers used:
  2357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2363 ;;      Params:         0       1       0       0       0       0       0
  2364 ;;      Locals:         0       4       0       0       0       0       0
  2365 ;;      Temps:          0       2       0       0       0       0       0
  2366 ;;      Totals:         0       7       0       0       0       0       0
  2367 ;;Total ram usage:        7 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    5
  2370 ;; This function calls:
  2371 ;;		___awmod
  2372 ;;		_rand
  2373 ;;		_sprintf
  2374 ;; This function is called by:
  2375 ;;		_main
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text14
  2380  000FD2                     __ptext14:
  2381                           	opt callstack 0
  2382  000FD2                     _get_rand_num:
  2383                           	opt callstack 0
  2384  000FD2  FFFF               	dw	65535	; assembler added errata NOP
  2385                           
  2386                           ;incstack = 0
  2387                           ;get_rand_num@from stored from wreg
  2388  000FD4  0100               	movlb	0	; () banked
  2389  000FD6  6F96               	movwf	get_rand_num@from& (0+255),b
  2390                           
  2391                           ;main.c: 229: int num = rand() % (to-from+1) + from;
  2392  000FD8  EC36  F009         	call	_rand	;wreg free
  2393  000FDC  C03F  F084         	movff	?_rand,___awmod@dividend
  2394  000FE0  C040  F085         	movff	?_rand+1,___awmod@dividend+1
  2395  000FE4  0100               	movlb	0	; () banked
  2396  000FE6  5196               	movf	get_rand_num@from& (0+255),w,b
  2397  000FE8  C091  F092         	movff	get_rand_num@to,??_get_rand_num
  2398  000FEC  6B93               	clrf	(??_get_rand_num+1)& (0+255),b
  2399  000FEE  5F92               	subwf	??_get_rand_num& (0+255),f,b
  2400  000FF0  0E00               	movlw	0
  2401  000FF2  5B93               	subwfb	(??_get_rand_num+1)& (0+255),f,b
  2402  000FF4  0E01               	movlw	1
  2403  000FF6  2592               	addwf	??_get_rand_num& (0+255),w,b
  2404  000FF8  6F86               	movwf	___awmod@divisor& (0+255),b
  2405  000FFA  0E00               	movlw	0
  2406  000FFC  2193               	addwfc	(??_get_rand_num+1)& (0+255),w,b
  2407  000FFE  6F87               	movwf	(___awmod@divisor+1)& (0+255),b
  2408  001000  EC31  F007         	call	___awmod	;wreg free
  2409  001004  0100               	movlb	0	; () banked
  2410  001006  5196               	movf	get_rand_num@from& (0+255),w,b
  2411  001008  2584               	addwf	?___awmod& (0+255),w,b
  2412  00100A  6F94               	movwf	get_rand_num@num& (0+255),b
  2413  00100C  0E00               	movlw	0
  2414  00100E  2185               	addwfc	(?___awmod+1)& (0+255),w,b
  2415  001010  6F95               	movwf	(get_rand_num@num+1)& (0+255),b
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;main.c: 230: char r[1];;main.c: 231: sprintf(r, "%i", num);
  2419  001012  0E97               	movlw	low get_rand_num@r
  2420  001014  6F84               	movwf	sprintf@sp& (0+255),b
  2421  001016  0E00               	movlw	high get_rand_num@r
  2422  001018  6F85               	movwf	(sprintf@sp+1)& (0+255),b
  2423  00101A  0E8E               	movlw	low STR_7
  2424  00101C  6F86               	movwf	sprintf@f& (0+255),b
  2425  00101E  0E06               	movlw	high STR_7
  2426  001020  6F87               	movwf	(sprintf@f+1)& (0+255),b
  2427  001022  C094  F088         	movff	get_rand_num@num,?_sprintf+4
  2428  001026  C095  F089         	movff	get_rand_num@num+1,?_sprintf+5
  2429  00102A  EC46  F004         	call	_sprintf	;wreg free
  2430                           
  2431                           ;main.c: 232: return r[0];
  2432  00102E  0100               	movlb	0	; () banked
  2433  001030  5197               	movf	get_rand_num@r& (0+255),w,b
  2434                           
  2435                           ; BSR set to: 0
  2436  001032  0012               	return		;funcret
  2437  001034  FFFF               	dw	65535	; errata NOP
  2438  001036                     __end_of_get_rand_num:
  2439                           	opt callstack 0
  2440                           
  2441 ;; *************** function _sprintf *****************
  2442 ;; Defined at:
  2443 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;  sp              2    4[BANK0 ] PTR unsigned char 
  2446 ;;		 -> get_rand_num@r(1), capture@m(16), 
  2447 ;;  f               2    6[BANK0 ] PTR const unsigned char 
  2448 ;;		 -> STR_7(3), STR_6(3), 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  tmpval          4    0        struct .
  2451 ;;  cp              3    0        PTR const unsigned char 
  2452 ;;  val             2   14[BANK0 ] unsigned int 
  2453 ;;  ap              2   12[BANK0 ] PTR void [1]
  2454 ;;		 -> ?_sprintf(2), 
  2455 ;;  len             2    0        unsigned int 
  2456 ;;  c               1   16[BANK0 ] unsigned char 
  2457 ;;  prec            1   11[BANK0 ] char 
  2458 ;;  flag            1   10[BANK0 ] unsigned char 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  2    4[BANK0 ] int 
  2461 ;; Registers used:
  2462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2468 ;;      Params:         0       6       0       0       0       0       0
  2469 ;;      Locals:         0       7       0       0       0       0       0
  2470 ;;      Temps:          1       0       0       0       0       0       0
  2471 ;;      Totals:         1      13       0       0       0       0       0
  2472 ;;Total ram usage:       14 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    4
  2475 ;; This function calls:
  2476 ;;		___lwdiv
  2477 ;;		___lwmod
  2478 ;; This function is called by:
  2479 ;;		_get_rand_num
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           	psect	text15
  2484  00088C                     __ptext15:
  2485                           	opt callstack 0
  2486  00088C                     _sprintf:
  2487                           	opt callstack 0
  2488  00088C  FFFF               	dw	65535	; assembler added errata NOP
  2489                           
  2490                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;incstack = 0
  2494  00088E  0E88               	movlw	low (?_sprintf+4)
  2495  000890  0100               	movlb	0	; () banked
  2496  000892  6F8C               	movwf	sprintf@ap& (0+255),b
  2497  000894  0E00               	movlw	high (?_sprintf+4)
  2498  000896  6F8D               	movwf	(sprintf@ap+1)& (0+255),b
  2499                           
  2500                           ;doprnt.c: 548: while((c = *f++)) {
  2501  000898  D0AD               	goto	u1480
  2502  00089A                     l2380:
  2503  00089A  FFFF               	dw	65535	; assembler added errata NOP
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;doprnt.c: 550: if(c != '%')
  2507  00089C  0E25               	movlw	37
  2508  00089E  1990               	xorwf	sprintf@c& (0+255),w,b
  2509  0008A0  B4D8               	btfsc	status,2,c
  2510  0008A2  D00A               	goto	l2386
  2511  0008A4                     u1430:
  2512  0008A4  FFFF               	dw	65535	; assembler added errata NOP
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  2516  0008A6  C084  FFD9         	movff	sprintf@sp,fsr2l
  2517  0008AA  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2518  0008AE  C090  FFDF         	movff	sprintf@c,indf2
  2519                           
  2520                           ; BSR set to: 0
  2521  0008B2  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2522  0008B4  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2523                           
  2524                           ;doprnt.c: 554: continue;
  2525  0008B6  D09E               	goto	u1480
  2526  0008B8                     l2386:
  2527  0008B8  FFFF               	dw	65535	; assembler added errata NOP
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  2531  0008BA  0E00               	movlw	0
  2532  0008BC  6F8A               	movwf	sprintf@flag& (0+255),b
  2533                           
  2534                           ;doprnt.c: 654: switch(c = *f++) {
  2535  0008BE  D00C               	goto	l2398
  2536  0008C0                     l2388:
  2537  0008C0  FFFF               	dw	65535	; assembler added errata NOP
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;doprnt.c: 818: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2541  0008C2  C08C  FFD9         	movff	sprintf@ap,fsr2l
  2542  0008C6  C08D  FFDA         	movff	sprintf@ap+1,fsr2h
  2543  0008CA  50DF               	movf	indf2,w,c
  2544  0008CC  6F90               	movwf	sprintf@c& (0+255),b
  2545                           
  2546                           ; BSR set to: 0
  2547  0008CE  0E02               	movlw	2
  2548  0008D0  278C               	addwf	sprintf@ap& (0+255),f,b
  2549  0008D2  0E00               	movlw	0
  2550  0008D4  238D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2551  0008D6  D7E6               	goto	u1430
  2552  0008D8                     l2398:
  2553  0008D8  FFFF               	dw	65535	; assembler added errata NOP
  2554                           
  2555                           ; BSR set to: 0
  2556  0008DA  C086  FFF6         	movff	sprintf@f,tblptrl
  2557  0008DE  C087  FFF7         	movff	sprintf@f+1,tblptrh
  2558  0008E2  4B86               	infsnz	sprintf@f& (0+255),f,b
  2559  0008E4  2B87               	incf	(sprintf@f+1)& (0+255),f,b
  2560  0008E6                     	if	0	;tblptru may be non-zero
  2561  0008E6                     	endif
  2562  0008E6                     	if	0	;tblptru may be non-zero
  2563  0008E6                     	endif
  2564  0008E6  0008               	tblrd		*
  2565  0008E8  FFFF               	dw	65535	; errata NOP
  2566  0008EA  CFF5 F090          	movff	tablat,sprintf@c
  2567  0008EE  5190               	movf	sprintf@c& (0+255),w,b
  2568                           
  2569                           ; Switch size 1, requested type "simple"
  2570                           ; Number of cases is 4, Range of values is 0 to 105
  2571                           ; switch strategies available:
  2572                           ; Name         Instructions Cycles
  2573                           ; simple_byte           13     7 (average)
  2574                           ;	Chosen strategy is simple_byte
  2575  0008F0  0A00               	xorlw	0	; case 0
  2576  0008F2  B4D8               	btfsc	status,2,c
  2577  0008F4  D08D               	goto	u1490
  2578  0008F6  0A63               	xorlw	99	; case 99
  2579  0008F8  B4D8               	btfsc	status,2,c
  2580  0008FA  D7E2               	goto	l2388
  2581  0008FC  0A07               	xorlw	7	; case 100
  2582  0008FE  B4D8               	btfsc	status,2,c
  2583  000900  D003               	goto	l2400
  2584  000902  0A0D               	xorlw	13	; case 105
  2585  000904  A4D8               	btfss	status,2,c
  2586  000906  D7CE               	goto	u1430
  2587  000908                     l2400:
  2588  000908  FFFF               	dw	65535	; assembler added errata NOP
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2592  00090A  C08C  FFD9         	movff	sprintf@ap,fsr2l
  2593  00090E  C08D  FFDA         	movff	sprintf@ap+1,fsr2h
  2594  000912  CFDE F08E          	movff	postinc2,sprintf@val
  2595  000916  CFDD F08F          	movff	postdec2,sprintf@val+1
  2596                           
  2597                           ; BSR set to: 0
  2598  00091A  0E02               	movlw	2
  2599  00091C  278C               	addwf	sprintf@ap& (0+255),f,b
  2600  00091E  0E00               	movlw	0
  2601  000920  238D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;doprnt.c: 1280: if((int)val < 0) {
  2605  000922  AF8F               	btfss	(sprintf@val+1)& (0+255),7,b
  2606  000924  D006               	goto	l2410
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;doprnt.c: 1281: flag |= 0x03;
  2610  000926  0E03               	movlw	3
  2611  000928  138A               	iorwf	sprintf@flag& (0+255),f,b
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;doprnt.c: 1282: val = -val;
  2615  00092A  6D8E               	negf	sprintf@val& (0+255),b
  2616  00092C  1F8F               	comf	(sprintf@val+1)& (0+255),f,b
  2617  00092E  B0D8               	btfsc	status,0,c
  2618  000930  2B8F               	incf	(sprintf@val+1)& (0+255),f,b
  2619  000932                     l2410:
  2620  000932  FFFF               	dw	65535	; assembler added errata NOP
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  2624  000934  0E01               	movlw	1
  2625  000936  6F90               	movwf	sprintf@c& (0+255),b
  2626  000938                     l2416:
  2627  000938  FFFF               	dw	65535	; assembler added errata NOP
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;doprnt.c: 1325: if(val < dpowers[c])
  2631  00093A  5190               	movf	sprintf@c& (0+255),w,b
  2632  00093C  0D02               	mullw	2
  2633  00093E  0E01               	movlw	low _dpowers
  2634  000940  24F3               	addwf	prodl,w,c
  2635  000942  6EF6               	movwf	tblptrl,c
  2636  000944  0E06               	movlw	high _dpowers
  2637  000946  20F4               	addwfc	prodh,w,c
  2638  000948  6EF7               	movwf	tblptrh,c
  2639  00094A                     	if	0	;There are less than 3 active tblptr bytes
  2640  00094A                     	endif
  2641  00094A  0009               	tblrd		*+
  2642  00094C  FFFF               	dw	65535	; errata NOP
  2643  00094E  50F5               	movf	tablat,w,c
  2644  000950  5D8E               	subwf	sprintf@val& (0+255),w,b
  2645  000952  0009               	tblrd		*+
  2646  000954  FFFF               	dw	65535	; errata NOP
  2647  000956  50F5               	movf	tablat,w,c
  2648  000958  598F               	subwfb	(sprintf@val+1)& (0+255),w,b
  2649  00095A  A0D8               	btfss	status,0,c
  2650  00095C  D005               	goto	u1460
  2651                           
  2652                           ; BSR set to: 0
  2653  00095E  2B90               	incf	sprintf@c& (0+255),f,b
  2654                           
  2655                           ; BSR set to: 0
  2656  000960  0E05               	movlw	5
  2657  000962  1990               	xorwf	sprintf@c& (0+255),w,b
  2658  000964  A4D8               	btfss	status,2,c
  2659  000966  D7E8               	goto	l2416
  2660  000968                     u1460:
  2661  000968  FFFF               	dw	65535	; assembler added errata NOP
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  2665  00096A  C08A  F03F         	movff	sprintf@flag,??_sprintf
  2666  00096E  0E03               	movlw	3
  2667  000970  163F               	andwf	??_sprintf,f,c
  2668  000972  B4D8               	btfsc	status,2,c
  2669  000974  D008               	goto	l2430
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  2673  000976  C084  FFD9         	movff	sprintf@sp,fsr2l
  2674  00097A  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2675  00097E  0E2D               	movlw	45
  2676  000980  6EDF               	movwf	indf2,c
  2677                           
  2678                           ; BSR set to: 0
  2679  000982  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2680  000984  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2681  000986                     l2430:
  2682  000986  FFFF               	dw	65535	; assembler added errata NOP
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  2686  000988  C090  F08B         	movff	sprintf@c,sprintf@prec
  2687                           
  2688                           ;doprnt.c: 1493: while(prec--) {
  2689  00098C  D02E               	goto	l2438
  2690  00098E                     l2432:
  2691  00098E  FFFF               	dw	65535	; assembler added errata NOP
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  2695  000990  518B               	movf	sprintf@prec& (0+255),w,b
  2696  000992  0D02               	mullw	2
  2697  000994  0E01               	movlw	low _dpowers
  2698  000996  24F3               	addwf	prodl,w,c
  2699  000998  6EF6               	movwf	tblptrl,c
  2700  00099A  0E06               	movlw	high _dpowers
  2701  00099C  20F4               	addwfc	prodh,w,c
  2702  00099E  6EF7               	movwf	tblptrh,c
  2703  0009A0                     	if	0	;There are less than 3 active tblptr bytes
  2704  0009A0                     	endif
  2705  0009A0  0009               	tblrd		*+
  2706  0009A2  FFFF               	dw	65535	; errata NOP
  2707  0009A4  CFF5 F039          	movff	tablat,___lwdiv@divisor
  2708  0009A8  000A               	tblrd		*-
  2709  0009AA  FFFF               	dw	65535	; errata NOP
  2710  0009AC  CFF5 F03A          	movff	tablat,___lwdiv@divisor+1
  2711  0009B0  C08E  F037         	movff	sprintf@val,___lwdiv@dividend
  2712  0009B4  C08F  F038         	movff	sprintf@val+1,___lwdiv@dividend+1
  2713  0009B8  EC4C  F008         	call	___lwdiv	;wreg free
  2714  0009BC  C037  F080         	movff	?___lwdiv,___lwmod@dividend
  2715  0009C0  C038  F081         	movff	?___lwdiv+1,___lwmod@dividend+1
  2716  0009C4  0E00               	movlw	0
  2717  0009C6  0100               	movlb	0	; () banked
  2718  0009C8  6F83               	movwf	(___lwmod@divisor+1)& (0+255),b
  2719  0009CA  0E0A               	movlw	10
  2720  0009CC  6F82               	movwf	___lwmod@divisor& (0+255),b
  2721  0009CE  EC61  F009         	call	___lwmod	;wreg free
  2722  0009D2  0100               	movlb	0	; () banked
  2723  0009D4  5180               	movf	?___lwmod& (0+255),w,b
  2724  0009D6  0F30               	addlw	48
  2725  0009D8  6F90               	movwf	sprintf@c& (0+255),b
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  2729  0009DA  C084  FFD9         	movff	sprintf@sp,fsr2l
  2730  0009DE  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2731  0009E2  C090  FFDF         	movff	sprintf@c,indf2
  2732                           
  2733                           ; BSR set to: 0
  2734  0009E6  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2735  0009E8  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2736  0009EA                     l2438:
  2737  0009EA  FFFF               	dw	65535	; assembler added errata NOP
  2738                           
  2739                           ; BSR set to: 0
  2740  0009EC  078B               	decf	sprintf@prec& (0+255),f,b
  2741  0009EE  298B               	incf	sprintf@prec& (0+255),w,b
  2742  0009F0  A4D8               	btfss	status,2,c
  2743  0009F2  D7CD               	goto	l2432
  2744  0009F4                     u1480:
  2745  0009F4  FFFF               	dw	65535	; assembler added errata NOP
  2746                           
  2747                           ; BSR set to: 0
  2748  0009F6  C086  FFF6         	movff	sprintf@f,tblptrl
  2749  0009FA  C087  FFF7         	movff	sprintf@f+1,tblptrh
  2750  0009FE  4B86               	infsnz	sprintf@f& (0+255),f,b
  2751  000A00  2B87               	incf	(sprintf@f+1)& (0+255),f,b
  2752  000A02                     	if	0	;tblptru may be non-zero
  2753  000A02                     	endif
  2754  000A02                     	if	0	;tblptru may be non-zero
  2755  000A02                     	endif
  2756  000A02  0008               	tblrd		*
  2757  000A04  FFFF               	dw	65535	; errata NOP
  2758  000A06  CFF5 F090          	movff	tablat,sprintf@c
  2759  000A0A  5190               	movf	sprintf@c& (0+255),w,b
  2760  000A0C  A4D8               	btfss	status,2,c
  2761  000A0E  D745               	goto	l2380
  2762  000A10                     u1490:
  2763  000A10  FFFF               	dw	65535	; assembler added errata NOP
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;doprnt.c: 1557: *sp = 0;
  2767  000A12  C084  FFD9         	movff	sprintf@sp,fsr2l
  2768  000A16  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2769  000A1A  0E00               	movlw	0
  2770  000A1C  6EDF               	movwf	indf2,c
  2771                           
  2772                           ; BSR set to: 0
  2773  000A1E  0012               	return		;funcret
  2774  000A20  FFFF               	dw	65535	; errata NOP
  2775  000A22                     __end_of_sprintf:
  2776                           	opt callstack 0
  2777                           
  2778 ;; *************** function ___lwmod *****************
  2779 ;; Defined at:
  2780 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  dividend        2    0[BANK0 ] unsigned int 
  2783 ;;  divisor         2    2[BANK0 ] unsigned int 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  counter         1   61[COMRAM] unsigned char 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  2    0[BANK0 ] unsigned int 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2795 ;;      Params:         0       4       0       0       0       0       0
  2796 ;;      Locals:         1       0       0       0       0       0       0
  2797 ;;      Temps:          0       0       0       0       0       0       0
  2798 ;;      Totals:         1       4       0       0       0       0       0
  2799 ;;Total ram usage:        5 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    3
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_sprintf
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text16
  2810  0012C2                     __ptext16:
  2811                           	opt callstack 0
  2812  0012C2                     ___lwmod:
  2813                           	opt callstack 0
  2814  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;incstack = 0
  2818  0012C4  0100               	movlb	0	; () banked
  2819  0012C6  5182               	movf	___lwmod@divisor& (0+255),w,b
  2820  0012C8  1183               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2821  0012CA  B4D8               	btfsc	status,2,c
  2822  0012CC  D01C               	goto	l732
  2823                           
  2824                           ; BSR set to: 0
  2825  0012CE  0E01               	movlw	1
  2826  0012D0  6E3E               	movwf	___lwmod@counter,c
  2827  0012D2  D005               	goto	l2364
  2828  0012D4                     l2362:
  2829  0012D4  FFFF               	dw	65535	; assembler added errata NOP
  2830                           
  2831                           ; BSR set to: 0
  2832  0012D6  90D8               	bcf	status,0,c
  2833  0012D8  3782               	rlcf	___lwmod@divisor& (0+255),f,b
  2834  0012DA  3783               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2835  0012DC  2A3E               	incf	___lwmod@counter,f,c
  2836  0012DE                     l2364:
  2837  0012DE  FFFF               	dw	65535	; assembler added errata NOP
  2838                           
  2839                           ; BSR set to: 0
  2840  0012E0  AF83               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2841  0012E2  D7F8               	goto	l2362
  2842  0012E4                     u1410:
  2843  0012E4  FFFF               	dw	65535	; assembler added errata NOP
  2844                           
  2845                           ; BSR set to: 0
  2846  0012E6  5182               	movf	___lwmod@divisor& (0+255),w,b
  2847  0012E8  5D80               	subwf	___lwmod@dividend& (0+255),w,b
  2848  0012EA  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2849  0012EC  5981               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2850  0012EE  A0D8               	btfss	status,0,c
  2851  0012F0  D004               	goto	l2370
  2852                           
  2853                           ; BSR set to: 0
  2854  0012F2  5182               	movf	___lwmod@divisor& (0+255),w,b
  2855  0012F4  5F80               	subwf	___lwmod@dividend& (0+255),f,b
  2856  0012F6  5183               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2857  0012F8  5B81               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2858  0012FA                     l2370:
  2859  0012FA  FFFF               	dw	65535	; assembler added errata NOP
  2860                           
  2861                           ; BSR set to: 0
  2862  0012FC  90D8               	bcf	status,0,c
  2863  0012FE  3383               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2864  001300  3382               	rrcf	___lwmod@divisor& (0+255),f,b
  2865                           
  2866                           ; BSR set to: 0
  2867  001302  2E3E               	decfsz	___lwmod@counter,f,c
  2868  001304  D7EF               	goto	u1410
  2869  001306                     l732:
  2870  001306  FFFF               	dw	65535	; assembler added errata NOP
  2871                           
  2872                           ; BSR set to: 0
  2873  001308  C080  F080         	movff	___lwmod@dividend,?___lwmod
  2874  00130C  C081  F081         	movff	___lwmod@dividend+1,?___lwmod+1
  2875                           
  2876                           ; BSR set to: 0
  2877  001310  0012               	return		;funcret
  2878  001312  FFFF               	dw	65535	; errata NOP
  2879  001314                     __end_of___lwmod:
  2880                           	opt callstack 0
  2881                           
  2882 ;; *************** function ___lwdiv *****************
  2883 ;; Defined at:
  2884 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  dividend        2   54[COMRAM] unsigned int 
  2887 ;;  divisor         2   56[COMRAM] unsigned int 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  quotient        2   58[COMRAM] unsigned int 
  2890 ;;  counter         1   60[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2   54[COMRAM] unsigned int 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2900 ;;      Params:         4       0       0       0       0       0       0
  2901 ;;      Locals:         3       0       0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0
  2903 ;;      Totals:         7       0       0       0       0       0       0
  2904 ;;Total ram usage:        7 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    3
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_sprintf
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text17
  2915  001098                     __ptext17:
  2916                           	opt callstack 0
  2917  001098                     ___lwdiv:
  2918                           	opt callstack 0
  2919  001098  FFFF               	dw	65535	; assembler added errata NOP
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;incstack = 0
  2923  00109A  0E00               	movlw	0
  2924  00109C  6E3C               	movwf	___lwdiv@quotient+1,c
  2925  00109E  0E00               	movlw	0
  2926  0010A0  6E3B               	movwf	___lwdiv@quotient,c
  2927  0010A2  5039               	movf	___lwdiv@divisor,w,c
  2928  0010A4  103A               	iorwf	___lwdiv@divisor+1,w,c
  2929  0010A6  B4D8               	btfsc	status,2,c
  2930  0010A8  D020               	goto	l722
  2931  0010AA  0E01               	movlw	1
  2932  0010AC  6E3D               	movwf	___lwdiv@counter,c
  2933  0010AE  D005               	goto	l1724
  2934  0010B0                     l1722:
  2935  0010B0  FFFF               	dw	65535	; assembler added errata NOP
  2936  0010B2  90D8               	bcf	status,0,c
  2937  0010B4  3639               	rlcf	___lwdiv@divisor,f,c
  2938  0010B6  363A               	rlcf	___lwdiv@divisor+1,f,c
  2939  0010B8  2A3D               	incf	___lwdiv@counter,f,c
  2940  0010BA                     l1724:
  2941  0010BA  FFFF               	dw	65535	; assembler added errata NOP
  2942  0010BC  AE3A               	btfss	___lwdiv@divisor+1,7,c
  2943  0010BE  D7F8               	goto	l1722
  2944  0010C0                     u760:
  2945  0010C0  FFFF               	dw	65535	; assembler added errata NOP
  2946  0010C2  90D8               	bcf	status,0,c
  2947  0010C4  363B               	rlcf	___lwdiv@quotient,f,c
  2948  0010C6  363C               	rlcf	___lwdiv@quotient+1,f,c
  2949  0010C8  5039               	movf	___lwdiv@divisor,w,c
  2950  0010CA  5C37               	subwf	___lwdiv@dividend,w,c
  2951  0010CC  503A               	movf	___lwdiv@divisor+1,w,c
  2952  0010CE  5838               	subwfb	___lwdiv@dividend+1,w,c
  2953  0010D0  A0D8               	btfss	status,0,c
  2954  0010D2  D005               	goto	l1734
  2955  0010D4  5039               	movf	___lwdiv@divisor,w,c
  2956  0010D6  5E37               	subwf	___lwdiv@dividend,f,c
  2957  0010D8  503A               	movf	___lwdiv@divisor+1,w,c
  2958  0010DA  5A38               	subwfb	___lwdiv@dividend+1,f,c
  2959  0010DC  803B               	bsf	___lwdiv@quotient,0,c
  2960  0010DE                     l1734:
  2961  0010DE  FFFF               	dw	65535	; assembler added errata NOP
  2962  0010E0  90D8               	bcf	status,0,c
  2963  0010E2  323A               	rrcf	___lwdiv@divisor+1,f,c
  2964  0010E4  3239               	rrcf	___lwdiv@divisor,f,c
  2965  0010E6  2E3D               	decfsz	___lwdiv@counter,f,c
  2966  0010E8  D7EB               	goto	u760
  2967  0010EA                     l722:
  2968  0010EA  FFFF               	dw	65535	; assembler added errata NOP
  2969  0010EC  C03B  F037         	movff	___lwdiv@quotient,?___lwdiv
  2970  0010F0  C03C  F038         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2971  0010F4  0012               	return		;funcret
  2972  0010F6  FFFF               	dw	65535	; errata NOP
  2973  0010F8                     __end_of___lwdiv:
  2974                           	opt callstack 0
  2975                           
  2976 ;; *************** function _rand *****************
  2977 ;; Defined at:
  2978 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  2   62[COMRAM] int 
  2985 ;; Registers used:
  2986 ;;		wreg, status,2, status,0, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2992 ;;      Params:         2       0       0       0       0       0       0
  2993 ;;      Locals:         0       0       0       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0
  2995 ;;      Totals:         2       0       0       0       0       0       0
  2996 ;;Total ram usage:        2 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    4
  2999 ;; This function calls:
  3000 ;;		___lmul
  3001 ;; This function is called by:
  3002 ;;		_get_rand_num
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text18
  3007  00126C                     __ptext18:
  3008                           	opt callstack 0
  3009  00126C                     _rand:
  3010                           	opt callstack 0
  3011  00126C  FFFF               	dw	65535	; assembler added errata NOP
  3012                           
  3013                           ;incstack = 0
  3014  00126E  C041  F037         	movff	_randx,___lmul@multiplier
  3015  001272  C042  F038         	movff	_randx+1,___lmul@multiplier+1
  3016  001276  C043  F039         	movff	_randx+2,___lmul@multiplier+2
  3017  00127A  C044  F03A         	movff	_randx+3,___lmul@multiplier+3
  3018  00127E  0E6D               	movlw	109
  3019  001280  6E3B               	movwf	___lmul@multiplicand,c
  3020  001282  0E4E               	movlw	78
  3021  001284  6E3C               	movwf	___lmul@multiplicand+1,c
  3022  001286  0EC6               	movlw	198
  3023  001288  6E3D               	movwf	___lmul@multiplicand+2,c
  3024  00128A  0E41               	movlw	65
  3025  00128C  6E3E               	movwf	___lmul@multiplicand+3,c
  3026  00128E  EC1B  F008         	call	___lmul	;wreg free
  3027  001292  C037  F041         	movff	?___lmul,_randx
  3028  001296  C038  F042         	movff	?___lmul+1,_randx+1
  3029  00129A  C039  F043         	movff	?___lmul+2,_randx+2
  3030  00129E  C03A  F044         	movff	?___lmul+3,_randx+3
  3031  0012A2  0E39               	movlw	57
  3032  0012A4  2641               	addwf	_randx,f,c
  3033  0012A6  0E30               	movlw	48
  3034  0012A8  2242               	addwfc	_randx+1,f,c
  3035  0012AA  0E00               	movlw	0
  3036  0012AC  2243               	addwfc	_randx+2,f,c
  3037  0012AE  0E00               	movlw	0
  3038  0012B0  2244               	addwfc	_randx+3,f,c
  3039  0012B2  0EFF               	movlw	255
  3040  0012B4  1443               	andwf	_randx+2,w,c
  3041  0012B6  6E3F               	movwf	?_rand,c
  3042  0012B8  0E7F               	movlw	127
  3043  0012BA  1444               	andwf	_randx+3,w,c
  3044  0012BC  6E40               	movwf	?_rand+1,c
  3045  0012BE  0012               	return		;funcret
  3046  0012C0  FFFF               	dw	65535	; errata NOP
  3047  0012C2                     __end_of_rand:
  3048                           	opt callstack 0
  3049                           
  3050 ;; *************** function ___lmul *****************
  3051 ;; Defined at:
  3052 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  multiplier      4   54[COMRAM] unsigned long 
  3055 ;;  multiplicand    4   58[COMRAM] unsigned long 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  product         4    0[BANK0 ] unsigned long 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  4   54[COMRAM] unsigned long 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3067 ;;      Params:         8       0       0       0       0       0       0
  3068 ;;      Locals:         0       4       0       0       0       0       0
  3069 ;;      Temps:          0       0       0       0       0       0       0
  3070 ;;      Totals:         8       4       0       0       0       0       0
  3071 ;;Total ram usage:       12 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    3
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_rand
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text19
  3082  001036                     __ptext19:
  3083                           	opt callstack 0
  3084  001036                     ___lmul:
  3085                           	opt callstack 0
  3086  001036  FFFF               	dw	65535	; assembler added errata NOP
  3087                           
  3088                           ;incstack = 0
  3089  001038  0E00               	movlw	0
  3090  00103A  0100               	movlb	0	; () banked
  3091  00103C  6F80               	movwf	___lmul@product& (0+255),b
  3092  00103E  0E00               	movlw	0
  3093  001040  6F81               	movwf	(___lmul@product+1)& (0+255),b
  3094  001042  0E00               	movlw	0
  3095  001044  6F82               	movwf	(___lmul@product+2)& (0+255),b
  3096  001046  0E00               	movlw	0
  3097  001048  6F83               	movwf	(___lmul@product+3)& (0+255),b
  3098  00104A                     l2350:
  3099  00104A  FFFF               	dw	65535	; assembler added errata NOP
  3100  00104C  A037               	btfss	___lmul@multiplier,0,c
  3101  00104E  D009               	goto	l2354
  3102  001050  503B               	movf	___lmul@multiplicand,w,c
  3103  001052  0100               	movlb	0	; () banked
  3104  001054  2780               	addwf	___lmul@product& (0+255),f,b
  3105  001056  503C               	movf	___lmul@multiplicand+1,w,c
  3106  001058  2381               	addwfc	(___lmul@product+1)& (0+255),f,b
  3107  00105A  503D               	movf	___lmul@multiplicand+2,w,c
  3108  00105C  2382               	addwfc	(___lmul@product+2)& (0+255),f,b
  3109  00105E  503E               	movf	___lmul@multiplicand+3,w,c
  3110  001060  2383               	addwfc	(___lmul@product+3)& (0+255),f,b
  3111  001062                     l2354:
  3112  001062  FFFF               	dw	65535	; assembler added errata NOP
  3113  001064  90D8               	bcf	status,0,c
  3114  001066  363B               	rlcf	___lmul@multiplicand,f,c
  3115  001068  363C               	rlcf	___lmul@multiplicand+1,f,c
  3116  00106A  363D               	rlcf	___lmul@multiplicand+2,f,c
  3117  00106C  363E               	rlcf	___lmul@multiplicand+3,f,c
  3118  00106E  90D8               	bcf	status,0,c
  3119  001070  323A               	rrcf	___lmul@multiplier+3,f,c
  3120  001072  3239               	rrcf	___lmul@multiplier+2,f,c
  3121  001074  3238               	rrcf	___lmul@multiplier+1,f,c
  3122  001076  3237               	rrcf	___lmul@multiplier,f,c
  3123  001078  5037               	movf	___lmul@multiplier,w,c
  3124  00107A  1038               	iorwf	___lmul@multiplier+1,w,c
  3125  00107C  1039               	iorwf	___lmul@multiplier+2,w,c
  3126  00107E  103A               	iorwf	___lmul@multiplier+3,w,c
  3127  001080  A4D8               	btfss	status,2,c
  3128  001082  D7E3               	goto	l2350
  3129  001084  C080  F037         	movff	___lmul@product,?___lmul
  3130  001088  C081  F038         	movff	___lmul@product+1,?___lmul+1
  3131  00108C  C082  F039         	movff	___lmul@product+2,?___lmul+2
  3132  001090  C083  F03A         	movff	___lmul@product+3,?___lmul+3
  3133  001094  0012               	return		;funcret
  3134  001096  FFFF               	dw	65535	; errata NOP
  3135  001098                     __end_of___lmul:
  3136                           	opt callstack 0
  3137                           
  3138 ;; *************** function ___awmod *****************
  3139 ;; Defined at:
  3140 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  dividend        2    4[BANK0 ] int 
  3143 ;;  divisor         2    6[BANK0 ] int 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  sign            1    9[BANK0 ] unsigned char 
  3146 ;;  counter         1    8[BANK0 ] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  2    4[BANK0 ] int 
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3156 ;;      Params:         0       4       0       0       0       0       0
  3157 ;;      Locals:         0       2       0       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0
  3159 ;;      Totals:         0       6       0       0       0       0       0
  3160 ;;Total ram usage:        6 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    3
  3163 ;; This function calls:
  3164 ;;		Nothing
  3165 ;; This function is called by:
  3166 ;;		_get_rand_num
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text20
  3171  000E62                     __ptext20:
  3172                           	opt callstack 0
  3173  000E62                     ___awmod:
  3174                           	opt callstack 0
  3175  000E62  FFFF               	dw	65535	; assembler added errata NOP
  3176                           
  3177                           ;incstack = 0
  3178  000E64  0E00               	movlw	0
  3179  000E66  0100               	movlb	0	; () banked
  3180  000E68  6F89               	movwf	___awmod@sign& (0+255),b
  3181                           
  3182                           ; BSR set to: 0
  3183  000E6A  AF85               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3184  000E6C  D006               	goto	l2472
  3185                           
  3186                           ; BSR set to: 0
  3187  000E6E  6D84               	negf	___awmod@dividend& (0+255),b
  3188  000E70  1F85               	comf	(___awmod@dividend+1)& (0+255),f,b
  3189  000E72  B0D8               	btfsc	status,0,c
  3190  000E74  2B85               	incf	(___awmod@dividend+1)& (0+255),f,b
  3191                           
  3192                           ; BSR set to: 0
  3193  000E76  0E01               	movlw	1
  3194  000E78  6F89               	movwf	___awmod@sign& (0+255),b
  3195  000E7A                     l2472:
  3196  000E7A  FFFF               	dw	65535	; assembler added errata NOP
  3197                           
  3198                           ; BSR set to: 0
  3199  000E7C  AF87               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3200  000E7E  D004               	goto	l2476
  3201                           
  3202                           ; BSR set to: 0
  3203  000E80  6D86               	negf	___awmod@divisor& (0+255),b
  3204  000E82  1F87               	comf	(___awmod@divisor+1)& (0+255),f,b
  3205  000E84  B0D8               	btfsc	status,0,c
  3206  000E86  2B87               	incf	(___awmod@divisor+1)& (0+255),f,b
  3207  000E88                     l2476:
  3208  000E88  FFFF               	dw	65535	; assembler added errata NOP
  3209                           
  3210                           ; BSR set to: 0
  3211  000E8A  5186               	movf	___awmod@divisor& (0+255),w,b
  3212  000E8C  1187               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3213  000E8E  B4D8               	btfsc	status,2,c
  3214  000E90  D01C               	goto	l2492
  3215                           
  3216                           ; BSR set to: 0
  3217  000E92  0E01               	movlw	1
  3218  000E94  6F88               	movwf	___awmod@counter& (0+255),b
  3219  000E96  D005               	goto	l2482
  3220  000E98                     l2480:
  3221  000E98  FFFF               	dw	65535	; assembler added errata NOP
  3222                           
  3223                           ; BSR set to: 0
  3224  000E9A  90D8               	bcf	status,0,c
  3225  000E9C  3786               	rlcf	___awmod@divisor& (0+255),f,b
  3226  000E9E  3787               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3227  000EA0  2B88               	incf	___awmod@counter& (0+255),f,b
  3228  000EA2                     l2482:
  3229  000EA2  FFFF               	dw	65535	; assembler added errata NOP
  3230                           
  3231                           ; BSR set to: 0
  3232  000EA4  AF87               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3233  000EA6  D7F8               	goto	l2480
  3234  000EA8                     u1530:
  3235  000EA8  FFFF               	dw	65535	; assembler added errata NOP
  3236                           
  3237                           ; BSR set to: 0
  3238  000EAA  5186               	movf	___awmod@divisor& (0+255),w,b
  3239  000EAC  5D84               	subwf	___awmod@dividend& (0+255),w,b
  3240  000EAE  5187               	movf	(___awmod@divisor+1)& (0+255),w,b
  3241  000EB0  5985               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3242  000EB2  A0D8               	btfss	status,0,c
  3243  000EB4  D004               	goto	l2488
  3244                           
  3245                           ; BSR set to: 0
  3246  000EB6  5186               	movf	___awmod@divisor& (0+255),w,b
  3247  000EB8  5F84               	subwf	___awmod@dividend& (0+255),f,b
  3248  000EBA  5187               	movf	(___awmod@divisor+1)& (0+255),w,b
  3249  000EBC  5B85               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3250  000EBE                     l2488:
  3251  000EBE  FFFF               	dw	65535	; assembler added errata NOP
  3252                           
  3253                           ; BSR set to: 0
  3254  000EC0  90D8               	bcf	status,0,c
  3255  000EC2  3387               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3256  000EC4  3386               	rrcf	___awmod@divisor& (0+255),f,b
  3257                           
  3258                           ; BSR set to: 0
  3259  000EC6  2F88               	decfsz	___awmod@counter& (0+255),f,b
  3260  000EC8  D7EF               	goto	u1530
  3261  000ECA                     l2492:
  3262  000ECA  FFFF               	dw	65535	; assembler added errata NOP
  3263                           
  3264                           ; BSR set to: 0
  3265  000ECC  5189               	movf	___awmod@sign& (0+255),w,b
  3266  000ECE  B4D8               	btfsc	status,2,c
  3267  000ED0  D004               	goto	l2496
  3268                           
  3269                           ; BSR set to: 0
  3270  000ED2  6D84               	negf	___awmod@dividend& (0+255),b
  3271  000ED4  1F85               	comf	(___awmod@dividend+1)& (0+255),f,b
  3272  000ED6  B0D8               	btfsc	status,0,c
  3273  000ED8  2B85               	incf	(___awmod@dividend+1)& (0+255),f,b
  3274  000EDA                     l2496:
  3275  000EDA  FFFF               	dw	65535	; assembler added errata NOP
  3276                           
  3277                           ; BSR set to: 0
  3278  000EDC  C084  F084         	movff	___awmod@dividend,?___awmod
  3279  000EE0  C085  F085         	movff	___awmod@dividend+1,?___awmod+1
  3280                           
  3281                           ; BSR set to: 0
  3282  000EE4  0012               	return		;funcret
  3283  000EE6  FFFF               	dw	65535	; errata NOP
  3284  000EE8                     __end_of___awmod:
  3285                           	opt callstack 0
  3286                           
  3287 ;; *************** function _compare_nums *****************
  3288 ;; Defined at:
  3289 ;;		line 249 in file "main.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  nums            2   58[COMRAM] PTR unsigned char 
  3292 ;;		 -> nums(10), 
  3293 ;;  r               2   60[COMRAM] PTR unsigned char 
  3294 ;;		 -> ans(10), 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  i               1    0[BANK0 ] unsigned char 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      unsigned char 
  3299 ;; Registers used:
  3300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3306 ;;      Params:         4       0       0       0       0       0       0
  3307 ;;      Locals:         0       1       0       0       0       0       0
  3308 ;;      Temps:          2       0       0       0       0       0       0
  3309 ;;      Totals:         6       1       0       0       0       0       0
  3310 ;;Total ram usage:        7 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    4
  3313 ;; This function calls:
  3314 ;;		_strlen
  3315 ;; This function is called by:
  3316 ;;		_main
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text21
  3321  0011B6                     __ptext21:
  3322                           	opt callstack 0
  3323  0011B6                     _compare_nums:
  3324                           	opt callstack 0
  3325  0011B6  FFFF               	dw	65535	; assembler added errata NOP
  3326                           
  3327                           ;main.c: 250: for(char i = 0; i < strlen(r); i++) {
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;incstack = 0
  3331  0011B8  0E00               	movlw	0
  3332  0011BA  0100               	movlb	0	; () banked
  3333  0011BC  6F80               	movwf	compare_nums@i& (0+255),b
  3334  0011BE  D015               	goto	l2526
  3335  0011C0                     l2518:
  3336  0011C0  FFFF               	dw	65535	; assembler added errata NOP
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 251: if (r[i] != nums[i]) {
  3340  0011C2  5180               	movf	compare_nums@i& (0+255),w,b
  3341  0011C4  243B               	addwf	compare_nums@nums,w,c
  3342  0011C6  6ED9               	movwf	fsr2l,c
  3343  0011C8  0E00               	movlw	0
  3344  0011CA  203C               	addwfc	compare_nums@nums+1,w,c
  3345  0011CC  6EDA               	movwf	fsr2h,c
  3346  0011CE  5180               	movf	compare_nums@i& (0+255),w,b
  3347  0011D0  243D               	addwf	compare_nums@r,w,c
  3348  0011D2  6EE1               	movwf	fsr1l,c
  3349  0011D4  0E00               	movlw	0
  3350  0011D6  203E               	addwfc	compare_nums@r+1,w,c
  3351  0011D8  6EE2               	movwf	fsr1h,c
  3352  0011DA  50DE               	movf	postinc2,w,c
  3353  0011DC  18E6               	xorwf	postinc1,w,c
  3354  0011DE  B4D8               	btfsc	status,2,c
  3355  0011E0  D002               	goto	l2524
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;main.c: 252: return 0;
  3359  0011E2  0E00               	movlw	0
  3360  0011E4  D014               	goto	l191
  3361  0011E6                     l2524:
  3362  0011E6  FFFF               	dw	65535	; assembler added errata NOP
  3363                           
  3364                           ; BSR set to: 0
  3365  0011E8  2B80               	incf	compare_nums@i& (0+255),f,b
  3366  0011EA                     l2526:
  3367  0011EA  FFFF               	dw	65535	; assembler added errata NOP
  3368                           
  3369                           ; BSR set to: 0
  3370  0011EC  C03D  F037         	movff	compare_nums@r,strlen@s
  3371  0011F0  C03E  F038         	movff	compare_nums@r+1,strlen@s+1
  3372  0011F4  ECD8  F009         	call	_strlen	;wreg free
  3373  0011F8  0100               	movlb	0	; () banked
  3374  0011FA  5180               	movf	compare_nums@i& (0+255),w,b
  3375  0011FC  6E3F               	movwf	??_compare_nums& (0+255),c
  3376  0011FE  6A40               	clrf	(??_compare_nums+1)& (0+255),c
  3377  001200  5037               	movf	?_strlen,w,c
  3378  001202  5C3F               	subwf	??_compare_nums,w,c
  3379  001204  5038               	movf	?_strlen+1,w,c
  3380  001206  5840               	subwfb	??_compare_nums+1,w,c
  3381  001208  A0D8               	btfss	status,0,c
  3382  00120A  D7DA               	goto	l2518
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;main.c: 253: };main.c: 254: };main.c: 255: return 1;
  3386  00120C  0E01               	movlw	1
  3387  00120E                     l191:
  3388  00120E  FFFF               	dw	65535	; assembler added errata NOP
  3389                           
  3390                           ; BSR set to: 0
  3391  001210  0012               	return		;funcret
  3392  001212  FFFF               	dw	65535	; errata NOP
  3393  001214                     __end_of_compare_nums:
  3394                           	opt callstack 0
  3395                           
  3396 ;; *************** function _strlen *****************
  3397 ;; Defined at:
  3398 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strlen.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  s               2   54[COMRAM] PTR const unsigned char 
  3401 ;;		 -> STR_15(6), STR_14(12), STR_13(9), STR_12(9), 
  3402 ;;		 -> STR_11(6), STR_10(11), STR_9(12), STR_8(8), 
  3403 ;;		 -> capture@m(16), ans(10), STR_5(10), nums(10), 
  3404 ;;		 -> STR_4(13), STR_3(12), STR_2(6), STR_1(14), 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  cp              2   56[COMRAM] PTR const unsigned char 
  3407 ;;		 -> STR_15(6), STR_14(12), STR_13(9), STR_12(9), 
  3408 ;;		 -> STR_11(6), STR_10(11), STR_9(12), STR_8(8), 
  3409 ;;		 -> capture@m(16), ans(10), STR_5(10), nums(10), 
  3410 ;;		 -> STR_4(13), STR_3(12), STR_2(6), STR_1(14), 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  2   54[COMRAM] unsigned int 
  3413 ;; Registers used:
  3414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3420 ;;      Params:         2       0       0       0       0       0       0
  3421 ;;      Locals:         2       0       0       0       0       0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0
  3423 ;;      Totals:         4       0       0       0       0       0       0
  3424 ;;Total ram usage:        4 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    3
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_print_message_onLCD
  3431 ;;		_clear_vec
  3432 ;;		_compare_nums
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text22
  3437  0013B0                     __ptext22:
  3438                           	opt callstack 0
  3439  0013B0                     _strlen:
  3440                           	opt callstack 0
  3441  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;incstack = 0
  3445  0013B2  C037  F039         	movff	strlen@s,strlen@cp
  3446  0013B6  C038  F03A         	movff	strlen@s+1,strlen@cp+1
  3447  0013BA  D003               	goto	l2290
  3448  0013BC                     l2288:
  3449  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  3450  0013BE  4A39               	infsnz	strlen@cp,f,c
  3451  0013C0  2A3A               	incf	strlen@cp+1,f,c
  3452  0013C2                     l2290:
  3453  0013C2  FFFF               	dw	65535	; assembler added errata NOP
  3454  0013C4  C039  FFF6         	movff	strlen@cp,tblptrl
  3455  0013C8  C03A  FFF7         	movff	strlen@cp+1,tblptrh
  3456  0013CC  6AF8               	clrf	tblptru,c
  3457  0013CE  0E05               	movlw	(high __ramtop+-1)
  3458  0013D0  64F7               	cpfsgt	tblptrh,c
  3459  0013D2  D004               	bra	u1317
  3460  0013D4  0008               	tblrd		*
  3461  0013D6  FFFF               	dw	65535	; errata NOP
  3462  0013D8  50F5               	movf	tablat,w,c
  3463  0013DA  D005               	bra	u1310
  3464  0013DC                     u1317:
  3465  0013DC  CFF6 FFE9          	movff	tblptrl,fsr0l
  3466  0013E0  CFF7 FFEA          	movff	tblptrh,fsr0h
  3467  0013E4  50EF               	movf	indf0,w,c
  3468  0013E6                     u1310:
  3469  0013E6  0900               	iorlw	0
  3470  0013E8  A4D8               	btfss	status,2,c
  3471  0013EA  D7E8               	goto	l2288
  3472  0013EC  5037               	movf	strlen@s,w,c
  3473  0013EE  5C39               	subwf	strlen@cp,w,c
  3474  0013F0  6E37               	movwf	?_strlen,c
  3475  0013F2  5038               	movf	strlen@s+1,w,c
  3476  0013F4  583A               	subwfb	strlen@cp+1,w,c
  3477  0013F6  6E38               	movwf	?_strlen+1,c
  3478  0013F8  0012               	return		;funcret
  3479  0013FA  FFFF               	dw	65535	; errata NOP
  3480  0013FC                     __end_of_strlen:
  3481                           	opt callstack 0
  3482                           
  3483 ;; *************** function _capture *****************
  3484 ;; Defined at:
  3485 ;;		line 174 in file "main.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;		None
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  m              16   37[COMRAM] unsigned char [16]
  3490 ;;  p               1   53[COMRAM] unsigned char 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3500 ;;      Params:         0       0       0       0       0       0       0
  3501 ;;      Locals:        17       0       0       0       0       0       0
  3502 ;;      Temps:         11       0       0       0       0       0       0
  3503 ;;      Totals:        28       0       0       0       0       0       0
  3504 ;;Total ram usage:       28 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    2
  3507 ;; This function calls:
  3508 ;;		_erase_letter
  3509 ;;		_get_letter
  3510 ;;		i2_print_message_onLCD
  3511 ;;		i2_sprintf
  3512 ;;		i2_strlen
  3513 ;; This function is called by:
  3514 ;;		Interrupt level 2
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	intcode
  3519  000008                     __pintcode:
  3520                           	opt callstack 0
  3521  000008                     _capture:
  3522                           	opt callstack 0
  3523  000008  FFFF               	dw	65535	; assembler added errata NOP
  3524                           
  3525                           ;incstack = 0
  3526  00000A  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3527  00000C  CFE9 F01C          	movff	fsr0l,??_capture+1
  3528  000010  CFEA F01D          	movff	fsr0h,??_capture+2
  3529  000014  CFD9 F01E          	movff	fsr2l,??_capture+3
  3530  000018  CFDA F01F          	movff	fsr2h,??_capture+4
  3531  00001C  CFF3 F020          	movff	prodl,??_capture+5
  3532  000020  CFF4 F021          	movff	prodh,??_capture+6
  3533  000024  CFF6 F022          	movff	tblptrl,??_capture+7
  3534  000028  CFF7 F023          	movff	tblptrh,??_capture+8
  3535  00002C  CFF8 F024          	movff	tblptru,??_capture+9
  3536  000030  CFF5 F025          	movff	tablat,??_capture+10
  3537                           
  3538                           ;main.c: 175: if (INTCONbits.RBIF) {
  3539  000034  A0F2               	btfss	4082,0,c	;volatile
  3540  000036  D056               	goto	i2l155
  3541                           
  3542                           ;main.c: 176: char p = PORTB;
  3543  000038  CF81 F036          	movff	3969,capture@p	;volatile
  3544  00003C                     i2l2258:
  3545  00003C  FFFF               	dw	65535	; assembler added errata NOP
  3546  00003E  5081               	movf	3969,w,c	;volatile
  3547  000040  0BF0               	andlw	240
  3548  000042  0AF0               	xorlw	240
  3549  000044  A4D8               	btfss	status,2,c
  3550  000046  D7FA               	goto	i2l2258
  3551                           
  3552                           ;main.c: 178: _delay((unsigned long)((50)*(4000000/4000000.0)));
  3553  000048  0E0C               	movlw	12
  3554  00004A                     i2u183_47:
  3555  00004A  FFFF               	dw	65535	; errata NOP
  3556  00004C  2EE8               	decfsz	wreg,f,c
  3557  00004E  D7FD               	bra	i2u183_47
  3558  000050  D000               	nop2	
  3559                           
  3560                           ;main.c: 180: if (!counting_down && !first_exec) {
  3561  000052  5048               	movf	_counting_down,w,c
  3562  000054  A4D8               	btfss	status,2,c
  3563  000056  D044               	goto	i2l151
  3564  000058  5046               	movf	_first_exec,w,c
  3565  00005A  A4D8               	btfss	status,2,c
  3566  00005C  D041               	goto	i2l151
  3567                           
  3568                           ;main.c: 181: char m[16];;main.c: 182: sprintf(m, "%c", get_letter(p));
  3569  00005E  0E26               	movlw	low capture@m
  3570  000060  6E0D               	movwf	i2sprintf@sp,c
  3571  000062  0E00               	movlw	high capture@m
  3572  000064  6E0E               	movwf	i2sprintf@sp+1,c
  3573  000066  0E8B               	movlw	low STR_6
  3574  000068  6E0F               	movwf	i2sprintf@f,c
  3575  00006A  0E06               	movlw	high STR_6
  3576  00006C  6E10               	movwf	i2sprintf@f+1,c
  3577  00006E  5036               	movf	capture@p,w,c
  3578  000070  EC9E  F006         	call	_get_letter
  3579  000074  6E1B               	movwf	??_capture& (0+255),c
  3580  000076  501B               	movf	??_capture,w,c
  3581  000078  6E11               	movwf	?i2_sprintf+4,c
  3582  00007A  6A12               	clrf	?i2_sprintf+5,c
  3583  00007C  EC11  F005         	call	i2_sprintf	;wreg free
  3584                           
  3585                           ;main.c: 183: if (m[0] != 'b' && m[0] != 'e') {
  3586  000080  0E62               	movlw	98
  3587  000082  1826               	xorwf	capture@m,w,c
  3588  000084  B4D8               	btfsc	status,2,c
  3589  000086  D01D               	goto	i2l2276
  3590  000088  0E65               	movlw	101
  3591  00008A  1826               	xorwf	capture@m,w,c
  3592  00008C  B4D8               	btfsc	status,2,c
  3593  00008E  D019               	goto	i2l2276
  3594                           
  3595                           ;main.c: 184: ans[strlen(ans)] = m[0];
  3596  000090  0EA2               	movlw	low _ans
  3597  000092  6E01               	movwf	i2strlen@s,c
  3598  000094  0E00               	movlw	high _ans
  3599  000096  6E02               	movwf	i2strlen@s+1,c
  3600  000098  ECFE  F009         	call	i2_strlen	;wreg free
  3601  00009C  0EA2               	movlw	low _ans
  3602  00009E  2401               	addwf	?i2_strlen,w,c
  3603  0000A0  6ED9               	movwf	fsr2l,c
  3604  0000A2  0E00               	movlw	high _ans
  3605  0000A4  2002               	addwfc	?i2_strlen+1,w,c
  3606  0000A6  6EDA               	movwf	fsr2h,c
  3607  0000A8  C026  FFDF         	movff	capture@m,indf2
  3608                           
  3609                           ;main.c: 185: print_message_onLCD(m, 0, 0);
  3610  0000AC  0E26               	movlw	low capture@m
  3611  0000AE  6E05               	movwf	i2print_message_onLCD@message,c
  3612  0000B0  0E00               	movlw	high capture@m
  3613  0000B2  6E06               	movwf	i2print_message_onLCD@message+1,c
  3614  0000B4  0E00               	movlw	0
  3615  0000B6  6E07               	movwf	i2print_message_onLCD@place,c
  3616  0000B8  0E00               	movlw	0
  3617  0000BA  6E08               	movwf	i2print_message_onLCD@space_bt,c
  3618  0000BC  EC74  F007         	call	i2_print_message_onLCD	;wreg free
  3619                           
  3620                           ;main.c: 186: } else if(m[0] == 'e') {
  3621  0000C0  D00F               	goto	i2l151
  3622  0000C2                     i2l2276:
  3623  0000C2  FFFF               	dw	65535	; assembler added errata NOP
  3624  0000C4  0E65               	movlw	101
  3625  0000C6  1826               	xorwf	capture@m,w,c
  3626  0000C8  A4D8               	btfss	status,2,c
  3627  0000CA  D004               	goto	i2l2280
  3628                           
  3629                           ;main.c: 187: e_pressed = 1;
  3630  0000CC  0E01               	movlw	1
  3631  0000CE  0100               	movlb	0	; () banked
  3632  0000D0  6F9F               	movwf	_e_pressed& (0+255),b
  3633                           
  3634                           ;main.c: 188: } else if(m[0] == 'b') {
  3635  0000D2  D006               	goto	i2l151
  3636  0000D4                     i2l2280:
  3637  0000D4  FFFF               	dw	65535	; assembler added errata NOP
  3638  0000D6  0E62               	movlw	98
  3639  0000D8  1826               	xorwf	capture@m,w,c
  3640  0000DA  B4D8               	btfsc	status,2,c
  3641                           
  3642                           ;main.c: 189: erase_letter();
  3643  0000DC  ECB5  F00A         	call	_erase_letter	;wreg free
  3644  0000E0                     i2l151:
  3645  0000E0  FFFF               	dw	65535	; assembler added errata NOP
  3646                           
  3647                           ;main.c: 190: };main.c: 191: };main.c: 193: INTCONbits.RBIF = 0;
  3648  0000E2  90F2               	bcf	4082,0,c	;volatile
  3649  0000E4                     i2l155:
  3650  0000E4  FFFF               	dw	65535	; assembler added errata NOP
  3651  0000E6  C025  FFF5         	movff	??_capture+10,tablat
  3652  0000EA  C024  FFF8         	movff	??_capture+9,tblptru
  3653  0000EE  C023  FFF7         	movff	??_capture+8,tblptrh
  3654  0000F2  C022  FFF6         	movff	??_capture+7,tblptrl
  3655  0000F6  C021  FFF4         	movff	??_capture+6,prodh
  3656  0000FA  C020  FFF3         	movff	??_capture+5,prodl
  3657  0000FE  C01F  FFDA         	movff	??_capture+4,fsr2h
  3658  000102  C01E  FFD9         	movff	??_capture+3,fsr2l
  3659  000106  C01D  FFEA         	movff	??_capture+2,fsr0h
  3660  00010A  C01C  FFE9         	movff	??_capture+1,fsr0l
  3661  00010E  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3662  000110  0011               	retfie		f
  3663  000112  FFFF               	dw	65535	; errata NOP
  3664  000114                     __end_of_capture:
  3665                           	opt callstack 0
  3666                           
  3667 ;; *************** function i2_sprintf *****************
  3668 ;; Defined at:
  3669 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3672 ;;		 -> get_rand_num@r(1), capture@m(16), 
  3673 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3674 ;;		 -> STR_7(3), STR_6(3), 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;  sprintf         4    0        struct .
  3677 ;;  sprintf         3    0        PTR const unsigned char 
  3678 ;;  sprintf         2   23[COMRAM] unsigned int 
  3679 ;;  sprintf         2   21[COMRAM] PTR void [1]
  3680 ;;		 -> ?i2_sprintf(2), ?_sprintf(2), 
  3681 ;;  sprintf         2    0        unsigned int 
  3682 ;;  sprintf         1   25[COMRAM] unsigned char 
  3683 ;;  sprintf         1   20[COMRAM] char 
  3684 ;;  sprintf         1   19[COMRAM] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  2   12[COMRAM] int 
  3687 ;; Registers used:
  3688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3694 ;;      Params:         6       0       0       0       0       0       0
  3695 ;;      Locals:         7       0       0       0       0       0       0
  3696 ;;      Temps:          1       0       0       0       0       0       0
  3697 ;;      Totals:        14       0       0       0       0       0       0
  3698 ;;Total ram usage:       14 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    1
  3701 ;; This function calls:
  3702 ;;		i2___lwdiv
  3703 ;;		i2___lwmod
  3704 ;; This function is called by:
  3705 ;;		_capture
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text24
  3710  000A22                     __ptext24:
  3711                           	opt callstack 0
  3712  000A22                     i2_sprintf:
  3713                           	opt callstack 0
  3714  000A22  FFFF               	dw	65535	; assembler added errata NOP
  3715                           
  3716                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  3717                           
  3718                           ;incstack = 0
  3719  000A24  0E11               	movlw	low (?i2_sprintf+4)
  3720  000A26  6E16               	movwf	i2sprintf@ap,c
  3721  000A28  0E00               	movlw	high (?i2_sprintf+4)
  3722  000A2A  6E17               	movwf	i2sprintf@ap+1,c
  3723                           
  3724                           ;doprnt.c: 548: while((c = *f++)) {
  3725  000A2C  D0AC               	goto	i2u115_40
  3726  000A2E                     i2l2114:
  3727  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  3728                           
  3729                           ;doprnt.c: 550: if(c != '%')
  3730  000A30  0E25               	movlw	37
  3731  000A32  181A               	xorwf	i2sprintf@c,w,c
  3732  000A34  B4D8               	btfsc	status,2,c
  3733  000A36  D00A               	goto	i2l2120
  3734  000A38                     i2u110_40:
  3735  000A38  FFFF               	dw	65535	; assembler added errata NOP
  3736                           
  3737                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  3738  000A3A  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  3739  000A3E  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  3740  000A42  C01A  FFDF         	movff	i2sprintf@c,indf2
  3741  000A46  4A0D               	infsnz	i2sprintf@sp,f,c
  3742  000A48  2A0E               	incf	i2sprintf@sp+1,f,c
  3743                           
  3744                           ;doprnt.c: 554: continue;
  3745  000A4A  D09D               	goto	i2u115_40
  3746  000A4C                     i2l2120:
  3747  000A4C  FFFF               	dw	65535	; assembler added errata NOP
  3748                           
  3749                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  3750  000A4E  0E00               	movlw	0
  3751  000A50  6E14               	movwf	i2sprintf@flag,c
  3752                           
  3753                           ;doprnt.c: 654: switch(c = *f++) {
  3754  000A52  D00C               	goto	i2l2132
  3755  000A54                     i2l2122:
  3756  000A54  FFFF               	dw	65535	; assembler added errata NOP
  3757                           
  3758                           ;doprnt.c: 818: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3759  000A56  C016  FFD9         	movff	i2sprintf@ap,fsr2l
  3760  000A5A  C017  FFDA         	movff	i2sprintf@ap+1,fsr2h
  3761  000A5E  50DF               	movf	indf2,w,c
  3762  000A60  6E1A               	movwf	i2sprintf@c,c
  3763  000A62  0E02               	movlw	2
  3764  000A64  2616               	addwf	i2sprintf@ap,f,c
  3765  000A66  0E00               	movlw	0
  3766  000A68  2217               	addwfc	i2sprintf@ap+1,f,c
  3767  000A6A  D7E6               	goto	i2u110_40
  3768  000A6C                     i2l2132:
  3769  000A6C  FFFF               	dw	65535	; assembler added errata NOP
  3770  000A6E  C00F  FFF6         	movff	i2sprintf@f,tblptrl
  3771  000A72  C010  FFF7         	movff	i2sprintf@f+1,tblptrh
  3772  000A76  4A0F               	infsnz	i2sprintf@f,f,c
  3773  000A78  2A10               	incf	i2sprintf@f+1,f,c
  3774  000A7A                     	if	0	;tblptru may be non-zero
  3775  000A7A                     	endif
  3776  000A7A                     	if	0	;tblptru may be non-zero
  3777  000A7A                     	endif
  3778  000A7A  0008               	tblrd		*
  3779  000A7C  FFFF               	dw	65535	; errata NOP
  3780  000A7E  CFF5 F01A          	movff	tablat,i2sprintf@c
  3781  000A82  501A               	movf	i2sprintf@c,w,c
  3782                           
  3783                           ; Switch size 1, requested type "simple"
  3784                           ; Number of cases is 4, Range of values is 0 to 105
  3785                           ; switch strategies available:
  3786                           ; Name         Instructions Cycles
  3787                           ; simple_byte           13     7 (average)
  3788                           ;	Chosen strategy is simple_byte
  3789  000A84  0A00               	xorlw	0	; case 0
  3790  000A86  B4D8               	btfsc	status,2,c
  3791  000A88  D08C               	goto	i2u116_40
  3792  000A8A  0A63               	xorlw	99	; case 99
  3793  000A8C  B4D8               	btfsc	status,2,c
  3794  000A8E  D7E2               	goto	i2l2122
  3795  000A90  0A07               	xorlw	7	; case 100
  3796  000A92  B4D8               	btfsc	status,2,c
  3797  000A94  D003               	goto	i2l2134
  3798  000A96  0A0D               	xorlw	13	; case 105
  3799  000A98  A4D8               	btfss	status,2,c
  3800  000A9A  D7CE               	goto	i2u110_40
  3801  000A9C                     i2l2134:
  3802  000A9C  FFFF               	dw	65535	; assembler added errata NOP
  3803                           
  3804                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3805  000A9E  C016  FFD9         	movff	i2sprintf@ap,fsr2l
  3806  000AA2  C017  FFDA         	movff	i2sprintf@ap+1,fsr2h
  3807  000AA6  CFDE F018          	movff	postinc2,i2sprintf@val
  3808  000AAA  CFDD F019          	movff	postdec2,i2sprintf@val+1
  3809  000AAE  0E02               	movlw	2
  3810  000AB0  2616               	addwf	i2sprintf@ap,f,c
  3811  000AB2  0E00               	movlw	0
  3812  000AB4  2217               	addwfc	i2sprintf@ap+1,f,c
  3813                           
  3814                           ;doprnt.c: 1280: if((int)val < 0) {
  3815  000AB6  AE19               	btfss	i2sprintf@val+1,7,c
  3816  000AB8  D006               	goto	i2l2144
  3817                           
  3818                           ;doprnt.c: 1281: flag |= 0x03;
  3819  000ABA  0E03               	movlw	3
  3820  000ABC  1214               	iorwf	i2sprintf@flag,f,c
  3821                           
  3822                           ;doprnt.c: 1282: val = -val;
  3823  000ABE  6C18               	negf	i2sprintf@val,c
  3824  000AC0  1E19               	comf	i2sprintf@val+1,f,c
  3825  000AC2  B0D8               	btfsc	status,0,c
  3826  000AC4  2A19               	incf	i2sprintf@val+1,f,c
  3827  000AC6                     i2l2144:
  3828  000AC6  FFFF               	dw	65535	; assembler added errata NOP
  3829                           
  3830                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  3831  000AC8  0E01               	movlw	1
  3832  000ACA  6E1A               	movwf	i2sprintf@c,c
  3833  000ACC                     i2l2146:
  3834  000ACC  FFFF               	dw	65535	; assembler added errata NOP
  3835  000ACE  0E05               	movlw	5
  3836  000AD0  181A               	xorwf	i2sprintf@c,w,c
  3837  000AD2  B4D8               	btfsc	status,2,c
  3838  000AD4  D014               	goto	i2l2158
  3839                           
  3840                           ;doprnt.c: 1325: if(val < dpowers[c])
  3841  000AD6  501A               	movf	i2sprintf@c,w,c
  3842  000AD8  0D02               	mullw	2
  3843  000ADA  0E01               	movlw	low _dpowers
  3844  000ADC  24F3               	addwf	prodl,w,c
  3845  000ADE  6EF6               	movwf	tblptrl,c
  3846  000AE0  0E06               	movlw	high _dpowers
  3847  000AE2  20F4               	addwfc	prodh,w,c
  3848  000AE4  6EF7               	movwf	tblptrh,c
  3849  000AE6                     	if	0	;There are less than 3 active tblptr bytes
  3850  000AE6                     	endif
  3851  000AE6  0009               	tblrd		*+
  3852  000AE8  FFFF               	dw	65535	; errata NOP
  3853  000AEA  50F5               	movf	tablat,w,c
  3854  000AEC  5C18               	subwf	i2sprintf@val,w,c
  3855  000AEE  0009               	tblrd		*+
  3856  000AF0  FFFF               	dw	65535	; errata NOP
  3857  000AF2  50F5               	movf	tablat,w,c
  3858  000AF4  5819               	subwfb	i2sprintf@val+1,w,c
  3859  000AF6  A0D8               	btfss	status,0,c
  3860  000AF8  D002               	goto	i2l2158
  3861  000AFA  2A1A               	incf	i2sprintf@c,f,c
  3862  000AFC  D7E7               	goto	i2l2146
  3863  000AFE                     i2l2158:
  3864  000AFE  FFFF               	dw	65535	; assembler added errata NOP
  3865                           
  3866                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  3867  000B00  C014  F013         	movff	i2sprintf@flag,??i2_sprintf
  3868  000B04  0E03               	movlw	3
  3869  000B06  1613               	andwf	??i2_sprintf,f,c
  3870  000B08  B4D8               	btfsc	status,2,c
  3871  000B0A  D008               	goto	i2l2164
  3872                           
  3873                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  3874  000B0C  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  3875  000B10  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  3876  000B14  0E2D               	movlw	45
  3877  000B16  6EDF               	movwf	indf2,c
  3878  000B18  4A0D               	infsnz	i2sprintf@sp,f,c
  3879  000B1A  2A0E               	incf	i2sprintf@sp+1,f,c
  3880  000B1C                     i2l2164:
  3881  000B1C  FFFF               	dw	65535	; assembler added errata NOP
  3882                           
  3883                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  3884  000B1E  C01A  F015         	movff	i2sprintf@c,i2sprintf@prec
  3885                           
  3886                           ;doprnt.c: 1493: while(prec--) {
  3887  000B22  D02C               	goto	i2l2172
  3888  000B24                     i2l2166:
  3889  000B24  FFFF               	dw	65535	; assembler added errata NOP
  3890                           
  3891                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  3892  000B26  5015               	movf	i2sprintf@prec,w,c
  3893  000B28  0D02               	mullw	2
  3894  000B2A  0E01               	movlw	low _dpowers
  3895  000B2C  24F3               	addwf	prodl,w,c
  3896  000B2E  6EF6               	movwf	tblptrl,c
  3897  000B30  0E06               	movlw	high _dpowers
  3898  000B32  20F4               	addwfc	prodh,w,c
  3899  000B34  6EF7               	movwf	tblptrh,c
  3900  000B36                     	if	0	;There are less than 3 active tblptr bytes
  3901  000B36                     	endif
  3902  000B36  0009               	tblrd		*+
  3903  000B38  FFFF               	dw	65535	; errata NOP
  3904  000B3A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3905  000B3E  000A               	tblrd		*-
  3906  000B40  FFFF               	dw	65535	; errata NOP
  3907  000B42  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3908  000B46  C018  F001         	movff	i2sprintf@val,i2___lwdiv@dividend
  3909  000B4A  C019  F002         	movff	i2sprintf@val+1,i2___lwdiv@dividend+1
  3910  000B4E  EC7C  F008         	call	i2___lwdiv	;wreg free
  3911  000B52  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  3912  000B56  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  3913  000B5A  0E00               	movlw	0
  3914  000B5C  6E0B               	movwf	i2___lwmod@divisor+1,c
  3915  000B5E  0E0A               	movlw	10
  3916  000B60  6E0A               	movwf	i2___lwmod@divisor,c
  3917  000B62  EC8A  F009         	call	i2___lwmod	;wreg free
  3918  000B66  5008               	movf	?i2___lwmod,w,c
  3919  000B68  0F30               	addlw	48
  3920  000B6A  6E1A               	movwf	i2sprintf@c,c
  3921                           
  3922                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  3923  000B6C  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  3924  000B70  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  3925  000B74  C01A  FFDF         	movff	i2sprintf@c,indf2
  3926  000B78  4A0D               	infsnz	i2sprintf@sp,f,c
  3927  000B7A  2A0E               	incf	i2sprintf@sp+1,f,c
  3928  000B7C                     i2l2172:
  3929  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  3930  000B7E  0615               	decf	i2sprintf@prec,f,c
  3931  000B80  2815               	incf	i2sprintf@prec,w,c
  3932  000B82  A4D8               	btfss	status,2,c
  3933  000B84  D7CF               	goto	i2l2166
  3934  000B86                     i2u115_40:
  3935  000B86  FFFF               	dw	65535	; assembler added errata NOP
  3936  000B88  C00F  FFF6         	movff	i2sprintf@f,tblptrl
  3937  000B8C  C010  FFF7         	movff	i2sprintf@f+1,tblptrh
  3938  000B90  4A0F               	infsnz	i2sprintf@f,f,c
  3939  000B92  2A10               	incf	i2sprintf@f+1,f,c
  3940  000B94                     	if	0	;tblptru may be non-zero
  3941  000B94                     	endif
  3942  000B94                     	if	0	;tblptru may be non-zero
  3943  000B94                     	endif
  3944  000B94  0008               	tblrd		*
  3945  000B96  FFFF               	dw	65535	; errata NOP
  3946  000B98  CFF5 F01A          	movff	tablat,i2sprintf@c
  3947  000B9C  501A               	movf	i2sprintf@c,w,c
  3948  000B9E  A4D8               	btfss	status,2,c
  3949  000BA0  D746               	goto	i2l2114
  3950  000BA2                     i2u116_40:
  3951  000BA2  FFFF               	dw	65535	; assembler added errata NOP
  3952                           
  3953                           ;doprnt.c: 1557: *sp = 0;
  3954  000BA4  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  3955  000BA8  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  3956  000BAC  0E00               	movlw	0
  3957  000BAE  6EDF               	movwf	indf2,c
  3958  000BB0  0012               	return		;funcret
  3959  000BB2  FFFF               	dw	65535	; errata NOP
  3960  000BB4                     __end_ofi2_sprintf:
  3961                           	opt callstack 0
  3962                           
  3963 ;; *************** function i2___lwmod *****************
  3964 ;; Defined at:
  3965 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  dividend        2    7[COMRAM] unsigned int 
  3968 ;;  divisor         2    9[COMRAM] unsigned int 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  __lwmod         1   11[COMRAM] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  2    7[COMRAM] unsigned int 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3980 ;;      Params:         4       0       0       0       0       0       0
  3981 ;;      Locals:         1       0       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0
  3983 ;;      Totals:         5       0       0       0       0       0       0
  3984 ;;Total ram usage:        5 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; This function calls:
  3987 ;;		Nothing
  3988 ;; This function is called by:
  3989 ;;		i2_sprintf
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text25
  3994  001314                     __ptext25:
  3995                           	opt callstack 0
  3996  001314                     i2___lwmod:
  3997                           	opt callstack 0
  3998  001314  FFFF               	dw	65535	; assembler added errata NOP
  3999                           
  4000                           ;incstack = 0
  4001  001316  500A               	movf	i2___lwmod@divisor,w,c
  4002  001318  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4003  00131A  B4D8               	btfsc	status,2,c
  4004  00131C  D01C               	goto	i2l732
  4005  00131E  0E01               	movlw	1
  4006  001320  6E0C               	movwf	i2___lwmod@counter,c
  4007  001322  D005               	goto	i2l1928
  4008  001324                     i2l1926:
  4009  001324  FFFF               	dw	65535	; assembler added errata NOP
  4010  001326  90D8               	bcf	status,0,c
  4011  001328  360A               	rlcf	i2___lwmod@divisor,f,c
  4012  00132A  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4013  00132C  2A0C               	incf	i2___lwmod@counter,f,c
  4014  00132E                     i2l1928:
  4015  00132E  FFFF               	dw	65535	; assembler added errata NOP
  4016  001330  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4017  001332  D7F8               	goto	i2l1926
  4018  001334                     i2u98_40:
  4019  001334  FFFF               	dw	65535	; assembler added errata NOP
  4020  001336  500A               	movf	i2___lwmod@divisor,w,c
  4021  001338  5C08               	subwf	i2___lwmod@dividend,w,c
  4022  00133A  500B               	movf	i2___lwmod@divisor+1,w,c
  4023  00133C  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4024  00133E  A0D8               	btfss	status,0,c
  4025  001340  D004               	goto	i2l1934
  4026  001342  500A               	movf	i2___lwmod@divisor,w,c
  4027  001344  5E08               	subwf	i2___lwmod@dividend,f,c
  4028  001346  500B               	movf	i2___lwmod@divisor+1,w,c
  4029  001348  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4030  00134A                     i2l1934:
  4031  00134A  FFFF               	dw	65535	; assembler added errata NOP
  4032  00134C  90D8               	bcf	status,0,c
  4033  00134E  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4034  001350  320A               	rrcf	i2___lwmod@divisor,f,c
  4035  001352  2E0C               	decfsz	i2___lwmod@counter,f,c
  4036  001354  D7EF               	goto	i2u98_40
  4037  001356                     i2l732:
  4038  001356  FFFF               	dw	65535	; assembler added errata NOP
  4039  001358  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4040  00135C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4041  001360  0012               	return		;funcret
  4042  001362  FFFF               	dw	65535	; errata NOP
  4043  001364                     __end_ofi2___lwmod:
  4044                           	opt callstack 0
  4045                           
  4046 ;; *************** function i2___lwdiv *****************
  4047 ;; Defined at:
  4048 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  dividend        2    0[COMRAM] unsigned int 
  4051 ;;  divisor         2    2[COMRAM] unsigned int 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4054 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  2    0[COMRAM] unsigned int 
  4057 ;; Registers used:
  4058 ;;		wreg, status,2, status,0
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4064 ;;      Params:         4       0       0       0       0       0       0
  4065 ;;      Locals:         3       0       0       0       0       0       0
  4066 ;;      Temps:          0       0       0       0       0       0       0
  4067 ;;      Totals:         7       0       0       0       0       0       0
  4068 ;;Total ram usage:        7 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; This function calls:
  4071 ;;		Nothing
  4072 ;; This function is called by:
  4073 ;;		i2_sprintf
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text26
  4078  0010F8                     __ptext26:
  4079                           	opt callstack 0
  4080  0010F8                     i2___lwdiv:
  4081                           	opt callstack 0
  4082  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  4083                           
  4084                           ;incstack = 0
  4085  0010FA  0E00               	movlw	0
  4086  0010FC  6E06               	movwf	i2___lwdiv@quotient+1,c
  4087  0010FE  0E00               	movlw	0
  4088  001100  6E05               	movwf	i2___lwdiv@quotient,c
  4089  001102  5003               	movf	i2___lwdiv@divisor,w,c
  4090  001104  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4091  001106  B4D8               	btfsc	status,2,c
  4092  001108  D020               	goto	i2l722
  4093  00110A  0E01               	movlw	1
  4094  00110C  6E07               	movwf	i2___lwdiv@counter,c
  4095  00110E  D005               	goto	i2l1908
  4096  001110                     i2l1906:
  4097  001110  FFFF               	dw	65535	; assembler added errata NOP
  4098  001112  90D8               	bcf	status,0,c
  4099  001114  3603               	rlcf	i2___lwdiv@divisor,f,c
  4100  001116  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4101  001118  2A07               	incf	i2___lwdiv@counter,f,c
  4102  00111A                     i2l1908:
  4103  00111A  FFFF               	dw	65535	; assembler added errata NOP
  4104  00111C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4105  00111E  D7F8               	goto	i2l1906
  4106  001120                     i2u95_40:
  4107  001120  FFFF               	dw	65535	; assembler added errata NOP
  4108  001122  90D8               	bcf	status,0,c
  4109  001124  3605               	rlcf	i2___lwdiv@quotient,f,c
  4110  001126  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4111  001128  5003               	movf	i2___lwdiv@divisor,w,c
  4112  00112A  5C01               	subwf	i2___lwdiv@dividend,w,c
  4113  00112C  5004               	movf	i2___lwdiv@divisor+1,w,c
  4114  00112E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4115  001130  A0D8               	btfss	status,0,c
  4116  001132  D005               	goto	i2l1918
  4117  001134  5003               	movf	i2___lwdiv@divisor,w,c
  4118  001136  5E01               	subwf	i2___lwdiv@dividend,f,c
  4119  001138  5004               	movf	i2___lwdiv@divisor+1,w,c
  4120  00113A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4121  00113C  8005               	bsf	i2___lwdiv@quotient,0,c
  4122  00113E                     i2l1918:
  4123  00113E  FFFF               	dw	65535	; assembler added errata NOP
  4124  001140  90D8               	bcf	status,0,c
  4125  001142  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4126  001144  3203               	rrcf	i2___lwdiv@divisor,f,c
  4127  001146  2E07               	decfsz	i2___lwdiv@counter,f,c
  4128  001148  D7EB               	goto	i2u95_40
  4129  00114A                     i2l722:
  4130  00114A  FFFF               	dw	65535	; assembler added errata NOP
  4131  00114C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4132  001150  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4133  001154  0012               	return		;funcret
  4134  001156  FFFF               	dw	65535	; errata NOP
  4135  001158                     __end_ofi2___lwdiv:
  4136                           	opt callstack 0
  4137                           
  4138 ;; *************** function i2_print_message_onLCD *****************
  4139 ;; Defined at:
  4140 ;;		line 162 in file "main.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  message         2    4[COMRAM] PTR unsigned char 
  4143 ;;		 -> STR_15(6), STR_14(12), STR_13(9), STR_12(9), 
  4144 ;;		 -> STR_11(6), STR_10(11), STR_9(12), STR_8(8), 
  4145 ;;		 -> capture@m(16), ans(10), STR_5(10), nums(10), 
  4146 ;;		 -> STR_4(13), STR_3(12), STR_2(6), STR_1(14), 
  4147 ;;  place           1    6[COMRAM] unsigned char 
  4148 ;;  space_bt        1    7[COMRAM] unsigned char 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;  print_messag    1   10[COMRAM] unsigned char 
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4160 ;;      Params:         4       0       0       0       0       0       0
  4161 ;;      Locals:         1       0       0       0       0       0       0
  4162 ;;      Temps:          2       0       0       0       0       0       0
  4163 ;;      Totals:         7       0       0       0       0       0       0
  4164 ;;Total ram usage:        7 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    1
  4167 ;; This function calls:
  4168 ;;		i2_R_D
  4169 ;;		i2_R_I
  4170 ;;		i2_strlen
  4171 ;; This function is called by:
  4172 ;;		_capture
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text27
  4177  000EE8                     __ptext27:
  4178                           	opt callstack 0
  4179  000EE8                     i2_print_message_onLCD:
  4180                           	opt callstack 0
  4181  000EE8  FFFF               	dw	65535	; assembler added errata NOP
  4182                           
  4183                           ;main.c: 163: if (place > 0) {
  4184                           
  4185                           ;incstack = 0
  4186  000EEA  5007               	movf	i2print_message_onLCD@place,w,c
  4187  000EEC  B4D8               	btfsc	status,2,c
  4188  000EEE  D003               	goto	i2l2100
  4189                           
  4190                           ;main.c: 164: R_I(place);
  4191  000EF0  5007               	movf	i2print_message_onLCD@place,w,c
  4192  000EF2  EC8A  F00A         	call	i2_R_I
  4193  000EF6                     i2l2100:
  4194  000EF6  FFFF               	dw	65535	; assembler added errata NOP
  4195                           
  4196                           ;main.c: 165: };main.c: 166: for (char i = 0; i < strlen(message); i++) {
  4197  000EF8  0E00               	movlw	0
  4198  000EFA  6E0B               	movwf	i2print_message_onLCD@i,c
  4199  000EFC  D022               	goto	i2l2110
  4200  000EFE                     i2l2102:
  4201  000EFE  FFFF               	dw	65535	; assembler added errata NOP
  4202                           
  4203                           ;main.c: 167: R_D(message[i]);
  4204  000F00  500B               	movf	i2print_message_onLCD@i,w,c
  4205  000F02  2405               	addwf	i2print_message_onLCD@message,w,c
  4206  000F04  6E09               	movwf	??i2_print_message_onLCD& (0+255),c
  4207  000F06  0E00               	movlw	0
  4208  000F08  2006               	addwfc	i2print_message_onLCD@message+1,w,c
  4209  000F0A  6E0A               	movwf	(??i2_print_message_onLCD+1)& (0+255),c
  4210  000F0C  C009  FFF6         	movff	??i2_print_message_onLCD,tblptrl
  4211  000F10  C00A  FFF7         	movff	??i2_print_message_onLCD+1,tblptrh
  4212  000F14  6AF8               	clrf	tblptru,c
  4213  000F16  0E05               	movlw	(high __ramtop+-1)
  4214  000F18  64F7               	cpfsgt	tblptrh,c
  4215  000F1A  D004               	bra	i2u107_47
  4216  000F1C  0008               	tblrd		*
  4217  000F1E  FFFF               	dw	65535	; errata NOP
  4218  000F20  50F5               	movf	tablat,w,c
  4219  000F22  D005               	bra	i2u107_40
  4220  000F24                     i2u107_47:
  4221  000F24  CFF6 FFE9          	movff	tblptrl,fsr0l
  4222  000F28  CFF7 FFEA          	movff	tblptrh,fsr0h
  4223  000F2C  50EF               	movf	indf0,w,c
  4224  000F2E                     i2u107_40:
  4225  000F2E  EC98  F00A         	call	i2_R_D
  4226                           
  4227                           ;main.c: 168: if (space_bt) {
  4228  000F32  5008               	movf	i2print_message_onLCD@space_bt,w,c
  4229  000F34  B4D8               	btfsc	status,2,c
  4230  000F36  D003               	goto	i2l2108
  4231                           
  4232                           ;main.c: 169: R_D(' ');
  4233  000F38  0E20               	movlw	32
  4234  000F3A  EC98  F00A         	call	i2_R_D
  4235  000F3E                     i2l2108:
  4236  000F3E  FFFF               	dw	65535	; assembler added errata NOP
  4237  000F40  2A0B               	incf	i2print_message_onLCD@i,f,c
  4238  000F42                     i2l2110:
  4239  000F42  FFFF               	dw	65535	; assembler added errata NOP
  4240  000F44  C005  F001         	movff	i2print_message_onLCD@message,i2strlen@s
  4241  000F48  C006  F002         	movff	i2print_message_onLCD@message+1,i2strlen@s+1
  4242  000F4C  ECFE  F009         	call	i2_strlen	;wreg free
  4243  000F50  500B               	movf	i2print_message_onLCD@i,w,c
  4244  000F52  6E09               	movwf	??i2_print_message_onLCD& (0+255),c
  4245  000F54  6A0A               	clrf	(??i2_print_message_onLCD+1)& (0+255),c
  4246  000F56  5001               	movf	?i2_strlen,w,c
  4247  000F58  5C09               	subwf	??i2_print_message_onLCD,w,c
  4248  000F5A  5002               	movf	?i2_strlen+1,w,c
  4249  000F5C  580A               	subwfb	??i2_print_message_onLCD+1,w,c
  4250  000F5E  B0D8               	btfsc	status,0,c
  4251  000F60  0012               	return		;funcret
  4252  000F62  FFFF               	dw	65535	; assembler added errata NOP
  4253  000F64  D7CC               	goto	i2l2102
  4254  000F66  FFFF               	dw	65535	; errata NOP
  4255  000F68                     __end_ofi2_print_message_onLCD:
  4256                           	opt callstack 0
  4257                           
  4258 ;; *************** function i2_strlen *****************
  4259 ;; Defined at:
  4260 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\strlen.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  s               2    0[COMRAM] PTR const unsigned char 
  4263 ;;		 -> STR_15(6), STR_14(12), STR_13(9), STR_12(9), 
  4264 ;;		 -> STR_11(6), STR_10(11), STR_9(12), STR_8(8), 
  4265 ;;		 -> capture@m(16), ans(10), STR_5(10), nums(10), 
  4266 ;;		 -> STR_4(13), STR_3(12), STR_2(6), STR_1(14), 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  strlen          2    2[COMRAM] PTR const unsigned char 
  4269 ;;		 -> STR_15(6), STR_14(12), STR_13(9), STR_12(9), 
  4270 ;;		 -> STR_11(6), STR_10(11), STR_9(12), STR_8(8), 
  4271 ;;		 -> capture@m(16), ans(10), STR_5(10), nums(10), 
  4272 ;;		 -> STR_4(13), STR_3(12), STR_2(6), STR_1(14), 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  2    0[COMRAM] unsigned int 
  4275 ;; Registers used:
  4276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4282 ;;      Params:         2       0       0       0       0       0       0
  4283 ;;      Locals:         2       0       0       0       0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0
  4285 ;;      Totals:         4       0       0       0       0       0       0
  4286 ;;Total ram usage:        4 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_capture
  4292 ;;		i2_print_message_onLCD
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text28
  4297  0013FC                     __ptext28:
  4298                           	opt callstack 0
  4299  0013FC                     i2_strlen:
  4300                           	opt callstack 0
  4301  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  4302                           
  4303                           ;incstack = 0
  4304  0013FE  C001  F003         	movff	i2strlen@s,i2strlen@cp
  4305  001402  C002  F004         	movff	i2strlen@s+1,i2strlen@cp+1
  4306  001406  D003               	goto	i2l1942
  4307  001408                     i2l1940:
  4308  001408  FFFF               	dw	65535	; assembler added errata NOP
  4309  00140A  4A03               	infsnz	i2strlen@cp,f,c
  4310  00140C  2A04               	incf	i2strlen@cp+1,f,c
  4311  00140E                     i2l1942:
  4312  00140E  FFFF               	dw	65535	; assembler added errata NOP
  4313  001410  C003  FFF6         	movff	i2strlen@cp,tblptrl
  4314  001414  C004  FFF7         	movff	i2strlen@cp+1,tblptrh
  4315  001418  6AF8               	clrf	tblptru,c
  4316  00141A  0E05               	movlw	(high __ramtop+-1)
  4317  00141C  64F7               	cpfsgt	tblptrh,c
  4318  00141E  D004               	bra	i2u100_47
  4319  001420  0008               	tblrd		*
  4320  001422  FFFF               	dw	65535	; errata NOP
  4321  001424  50F5               	movf	tablat,w,c
  4322  001426  D005               	bra	i2u100_40
  4323  001428                     i2u100_47:
  4324  001428  CFF6 FFE9          	movff	tblptrl,fsr0l
  4325  00142C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4326  001430  50EF               	movf	indf0,w,c
  4327  001432                     i2u100_40:
  4328  001432  0900               	iorlw	0
  4329  001434  A4D8               	btfss	status,2,c
  4330  001436  D7E8               	goto	i2l1940
  4331  001438  5001               	movf	i2strlen@s,w,c
  4332  00143A  5C03               	subwf	i2strlen@cp,w,c
  4333  00143C  6E01               	movwf	?i2_strlen,c
  4334  00143E  5002               	movf	i2strlen@s+1,w,c
  4335  001440  5804               	subwfb	i2strlen@cp+1,w,c
  4336  001442  6E02               	movwf	?i2_strlen+1,c
  4337  001444  0012               	return		;funcret
  4338  001446  FFFF               	dw	65535	; errata NOP
  4339  001448                     __end_ofi2_strlen:
  4340                           	opt callstack 0
  4341                           
  4342 ;; *************** function i2_R_I *****************
  4343 ;; Defined at:
  4344 ;;		line 144 in file "main.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  dato            1    wreg     unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  dato            1    0[COMRAM] unsigned char 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4358 ;;      Params:         0       0       0       0       0       0       0
  4359 ;;      Locals:         1       0       0       0       0       0       0
  4360 ;;      Temps:          0       0       0       0       0       0       0
  4361 ;;      Totals:         1       0       0       0       0       0       0
  4362 ;;Total ram usage:        1 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; This function calls:
  4365 ;;		Nothing
  4366 ;; This function is called by:
  4367 ;;		i2_print_message_onLCD
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text29
  4372  001514                     __ptext29:
  4373                           	opt callstack 0
  4374  001514                     i2_R_I:
  4375                           	opt callstack 0
  4376  001514  FFFF               	dw	65535	; assembler added errata NOP
  4377                           
  4378                           ;incstack = 0
  4379                           ;i2R_I@dato stored from wreg
  4380  001516  6E01               	movwf	i2R_I@dato,c
  4381                           
  4382                           ;main.c: 145: LC3 = 0;
  4383  001518  968B               	bcf	3979,3,c	;volatile
  4384                           
  4385                           ;main.c: 146: LC4 = 0;
  4386  00151A  988B               	bcf	3979,4,c	;volatile
  4387                           
  4388                           ;main.c: 147: LATD = dato;
  4389  00151C  C001  FF8C         	movff	i2R_I@dato,3980	;volatile
  4390                           
  4391                           ;main.c: 148: LC3 = 1;
  4392  001520  868B               	bsf	3979,3,c	;volatile
  4393                           
  4394                           ;main.c: 149: _delay((unsigned long)((100)*(4000000/4000000.0)));
  4395  001522  0E19               	movlw	25
  4396  001524                     i2u184_47:
  4397  001524  FFFF               	dw	65535	; errata NOP
  4398  001526  2EE8               	decfsz	wreg,f,c
  4399  001528  D7FD               	bra	i2u184_47
  4400                           
  4401                           ;main.c: 150: LC3 = 0;
  4402  00152A  968B               	bcf	3979,3,c	;volatile
  4403  00152C  0012               	return		;funcret
  4404  00152E  FFFF               	dw	65535	; errata NOP
  4405  001530                     __end_ofi2_R_I:
  4406                           	opt callstack 0
  4407                           
  4408 ;; *************** function i2_R_D *****************
  4409 ;; Defined at:
  4410 ;;		line 153 in file "main.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  dato            1    wreg     unsigned char 
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  dato            1    0[COMRAM] unsigned char 
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  1    wreg      void 
  4417 ;; Registers used:
  4418 ;;		wreg, status,2, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4424 ;;      Params:         0       0       0       0       0       0       0
  4425 ;;      Locals:         1       0       0       0       0       0       0
  4426 ;;      Temps:          0       0       0       0       0       0       0
  4427 ;;      Totals:         1       0       0       0       0       0       0
  4428 ;;Total ram usage:        1 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; This function calls:
  4431 ;;		Nothing
  4432 ;; This function is called by:
  4433 ;;		i2_print_message_onLCD
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text30
  4438  001530                     __ptext30:
  4439                           	opt callstack 0
  4440  001530                     i2_R_D:
  4441                           	opt callstack 0
  4442  001530  FFFF               	dw	65535	; assembler added errata NOP
  4443                           
  4444                           ;incstack = 0
  4445                           ;i2R_D@dato stored from wreg
  4446  001532  6E01               	movwf	i2R_D@dato,c
  4447                           
  4448                           ;main.c: 154: LC3 = 0;
  4449  001534  968B               	bcf	3979,3,c	;volatile
  4450                           
  4451                           ;main.c: 155: LC4 = 1;
  4452  001536  888B               	bsf	3979,4,c	;volatile
  4453                           
  4454                           ;main.c: 156: LATD = dato;
  4455  001538  C001  FF8C         	movff	i2R_D@dato,3980	;volatile
  4456                           
  4457                           ;main.c: 157: LC3 = 1;
  4458  00153C  868B               	bsf	3979,3,c	;volatile
  4459                           
  4460                           ;main.c: 158: _delay((unsigned long)((100)*(4000000/4000000.0)));
  4461  00153E  0E19               	movlw	25
  4462  001540                     i2u185_47:
  4463  001540  FFFF               	dw	65535	; errata NOP
  4464  001542  2EE8               	decfsz	wreg,f,c
  4465  001544  D7FD               	bra	i2u185_47
  4466                           
  4467                           ;main.c: 159: LC3 = 0;
  4468  001546  968B               	bcf	3979,3,c	;volatile
  4469  001548  0012               	return		;funcret
  4470  00154A  FFFF               	dw	65535	; errata NOP
  4471  00154C                     __end_ofi2_R_D:
  4472                           	opt callstack 0
  4473                           
  4474 ;; *************** function _get_letter *****************
  4475 ;; Defined at:
  4476 ;;		line 197 in file "main.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  code            1    wreg     unsigned char 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  code            1    0[COMRAM] unsigned char 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      unsigned char 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4490 ;;      Params:         0       0       0       0       0       0       0
  4491 ;;      Locals:         1       0       0       0       0       0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0
  4493 ;;      Totals:         1       0       0       0       0       0       0
  4494 ;;Total ram usage:        1 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_capture
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           	psect	text31
  4504  000D3C                     __ptext31:
  4505                           	opt callstack 0
  4506  000D3C                     _get_letter:
  4507                           	opt callstack 0
  4508  000D3C  FFFF               	dw	65535	; assembler added errata NOP
  4509                           
  4510                           ;incstack = 0
  4511                           ;get_letter@code stored from wreg
  4512  000D3E  6E01               	movwf	get_letter@code,c
  4513                           
  4514                           ;main.c: 198: switch(code) {
  4515  000D40  D024               	goto	i2l2094
  4516  000D42                     i2l2044:
  4517  000D42  FFFF               	dw	65535	; assembler added errata NOP
  4518                           
  4519                           ;main.c: 200: return '1';
  4520  000D44  0E31               	movlw	49
  4521  000D46  D047               	goto	i2l160
  4522  000D48                     i2l2048:
  4523  000D48  FFFF               	dw	65535	; assembler added errata NOP
  4524                           
  4525                           ;main.c: 202: return '2';
  4526  000D4A  0E32               	movlw	50
  4527  000D4C  D044               	goto	i2l160
  4528  000D4E                     i2l2052:
  4529  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  4530                           
  4531                           ;main.c: 204: return '3';
  4532  000D50  0E33               	movlw	51
  4533  000D52  D041               	goto	i2l160
  4534  000D54                     i2l2056:
  4535  000D54  FFFF               	dw	65535	; assembler added errata NOP
  4536                           
  4537                           ;main.c: 206: return '4';
  4538  000D56  0E34               	movlw	52
  4539  000D58  D03E               	goto	i2l160
  4540  000D5A                     i2l2060:
  4541  000D5A  FFFF               	dw	65535	; assembler added errata NOP
  4542                           
  4543                           ;main.c: 208: return '5';
  4544  000D5C  0E35               	movlw	53
  4545  000D5E  D03B               	goto	i2l160
  4546  000D60                     i2l2064:
  4547  000D60  FFFF               	dw	65535	; assembler added errata NOP
  4548                           
  4549                           ;main.c: 210: return '6';
  4550  000D62  0E36               	movlw	54
  4551  000D64  D038               	goto	i2l160
  4552  000D66                     i2l2068:
  4553  000D66  FFFF               	dw	65535	; assembler added errata NOP
  4554                           
  4555                           ;main.c: 212: return '7';
  4556  000D68  0E37               	movlw	55
  4557  000D6A  D035               	goto	i2l160
  4558  000D6C                     i2l2072:
  4559  000D6C  FFFF               	dw	65535	; assembler added errata NOP
  4560                           
  4561                           ;main.c: 214: return '8';
  4562  000D6E  0E38               	movlw	56
  4563  000D70  D032               	goto	i2l160
  4564  000D72                     i2l2076:
  4565  000D72  FFFF               	dw	65535	; assembler added errata NOP
  4566                           
  4567                           ;main.c: 216: return '9';
  4568  000D74  0E39               	movlw	57
  4569  000D76  D02F               	goto	i2l160
  4570  000D78                     i2l2080:
  4571  000D78  FFFF               	dw	65535	; assembler added errata NOP
  4572                           
  4573                           ;main.c: 218: return '0';
  4574  000D7A  0E30               	movlw	48
  4575  000D7C  D02C               	goto	i2l160
  4576  000D7E                     i2l2084:
  4577  000D7E  FFFF               	dw	65535	; assembler added errata NOP
  4578                           
  4579                           ;main.c: 220: return 'e';
  4580  000D80  0E65               	movlw	101
  4581  000D82  D029               	goto	i2l160
  4582  000D84                     i2l2088:
  4583  000D84  FFFF               	dw	65535	; assembler added errata NOP
  4584                           
  4585                           ;main.c: 222: return 'b';
  4586  000D86  0E62               	movlw	98
  4587  000D88  D026               	goto	i2l160
  4588  000D8A                     i2l2094:
  4589  000D8A  FFFF               	dw	65535	; assembler added errata NOP
  4590  000D8C  5001               	movf	get_letter@code,w,c
  4591                           
  4592                           ; Switch size 1, requested type "simple"
  4593                           ; Number of cases is 12, Range of values is 119 to 238
  4594                           ; switch strategies available:
  4595                           ; Name         Instructions Cycles
  4596                           ; simple_byte           37    19 (average)
  4597                           ;	Chosen strategy is simple_byte
  4598  000D8E  0A77               	xorlw	119	; case 119
  4599  000D90  B4D8               	btfsc	status,2,c
  4600  000D92  D7F5               	goto	i2l2084
  4601  000D94  0A09               	xorlw	9	; case 126
  4602  000D96  B4D8               	btfsc	status,2,c
  4603  000D98  D7F5               	goto	i2l2088
  4604  000D9A  0AC5               	xorlw	197	; case 187
  4605  000D9C  B4D8               	btfsc	status,2,c
  4606  000D9E  D7E9               	goto	i2l2076
  4607  000DA0  0A06               	xorlw	6	; case 189
  4608  000DA2  B4D8               	btfsc	status,2,c
  4609  000DA4  D7DD               	goto	i2l2064
  4610  000DA6  0A03               	xorlw	3	; case 190
  4611  000DA8  B4D8               	btfsc	status,2,c
  4612  000DAA  D7D1               	goto	i2l2052
  4613  000DAC  0A69               	xorlw	105	; case 215
  4614  000DAE  B4D8               	btfsc	status,2,c
  4615  000DB0  D7E3               	goto	i2l2080
  4616  000DB2  0A0C               	xorlw	12	; case 219
  4617  000DB4  B4D8               	btfsc	status,2,c
  4618  000DB6  D7DA               	goto	i2l2072
  4619  000DB8  0A06               	xorlw	6	; case 221
  4620  000DBA  B4D8               	btfsc	status,2,c
  4621  000DBC  D7CE               	goto	i2l2060
  4622  000DBE  0A03               	xorlw	3	; case 222
  4623  000DC0  B4D8               	btfsc	status,2,c
  4624  000DC2  D7C2               	goto	i2l2048
  4625  000DC4  0A35               	xorlw	53	; case 235
  4626  000DC6  B4D8               	btfsc	status,2,c
  4627  000DC8  D7CE               	goto	i2l2068
  4628  000DCA  0A06               	xorlw	6	; case 237
  4629  000DCC  B4D8               	btfsc	status,2,c
  4630  000DCE  D7C2               	goto	i2l2056
  4631  000DD0  0A03               	xorlw	3	; case 238
  4632  000DD2  B4D8               	btfsc	status,2,c
  4633  000DD4  D7B6               	goto	i2l2044
  4634  000DD6                     i2l160:
  4635  000DD6  FFFF               	dw	65535	; assembler added errata NOP
  4636  000DD8  0012               	return		;funcret
  4637  000DDA  FFFF               	dw	65535	; errata NOP
  4638  000DDC                     __end_of_get_letter:
  4639                           	opt callstack 0
  4640                           
  4641 ;; *************** function _erase_letter *****************
  4642 ;; Defined at:
  4643 ;;		line 306 in file "main.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		None
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4657 ;;      Params:         0       0       0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0       0       0
  4660 ;;      Totals:         0       0       0       0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_capture
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text32
  4671  00156A                     __ptext32:
  4672                           	opt callstack 0
  4673  00156A                     _erase_letter:
  4674                           	opt callstack 0
  4675  00156A  FFFF               	dw	65535	; assembler added errata NOP
  4676                           
  4677                           ;incstack = 0
  4678  00156C  0012               	return		;funcret
  4679  00156E  FFFF               	dw	65535	; errata NOP
  4680  001570                     __end_of_erase_letter:
  4681                           	opt callstack 0
  4682                           
  4683                           	psect	rparam
  4684  0000                     
  4685                           	psect	temp
  4686  000049                     btemp:
  4687                           	opt callstack 0
  4688  000049                     	ds	1
  4689  0000                     int$flags	set	btemp
  4690  0000                     wtemp8	set	btemp+1
  4691  0000                     ttemp5	set	btemp+1
  4692  0000                     ttemp6	set	btemp+4
  4693  0000                     ttemp7	set	btemp+8
  4694                           tosu	equ	0xFFF
  4695                           tosh	equ	0xFFE
  4696                           tosl	equ	0xFFD
  4697                           stkptr	equ	0xFFC
  4698                           pclatu	equ	0xFFB
  4699                           pclath	equ	0xFFA
  4700                           pcl	equ	0xFF9
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           indf0	equ	0xFEF
  4708                           postinc0	equ	0xFEE
  4709                           postdec0	equ	0xFED
  4710                           preinc0	equ	0xFEC
  4711                           plusw0	equ	0xFEB
  4712                           fsr0h	equ	0xFEA
  4713                           fsr0l	equ	0xFE9
  4714                           wreg	equ	0xFE8
  4715                           indf1	equ	0xFE7
  4716                           postinc1	equ	0xFE6
  4717                           postdec1	equ	0xFE5
  4718                           preinc1	equ	0xFE4
  4719                           plusw1	equ	0xFE3
  4720                           fsr1h	equ	0xFE2
  4721                           fsr1l	equ	0xFE1
  4722                           bsr	equ	0xFE0
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           preinc2	equ	0xFDC
  4727                           plusw2	equ	0xFDB
  4728                           fsr2h	equ	0xFDA
  4729                           fsr2l	equ	0xFD9
  4730                           status	equ	0xFD8


Data Sizes:
    Strings     134
    Constant    10
    Data        12
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     64      72
    BANK0           128     31      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_15(CODE[6]), STR_14(CODE[12]), STR_13(CODE[9]), STR_12(CODE[9]), 
		 -> STR_11(CODE[6]), STR_10(CODE[11]), STR_9(CODE[12]), STR_8(CODE[8]), 
		 -> capture@m(COMRAM[16]), ans(BANK0[10]), STR_5(CODE[10]), nums(BANK0[10]), 
		 -> STR_4(CODE[13]), STR_3(CODE[12]), STR_2(CODE[6]), STR_1(CODE[14]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_15(CODE[6]), STR_14(CODE[12]), STR_13(CODE[9]), STR_12(CODE[9]), 
		 -> STR_11(CODE[6]), STR_10(CODE[11]), STR_9(CODE[12]), STR_8(CODE[8]), 
		 -> capture@m(COMRAM[16]), ans(BANK0[10]), STR_5(CODE[10]), nums(BANK0[10]), 
		 -> STR_4(CODE[13]), STR_3(CODE[12]), STR_2(CODE[6]), STR_1(CODE[14]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_7(CODE[3]), STR_6(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> get_rand_num@r(BANK0[1]), capture@m(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    compare_nums@nums	PTR unsigned char  size(2) Largest target is 10
		 -> nums(BANK0[10]), 

    compare_nums@r	PTR unsigned char  size(2) Largest target is 10
		 -> ans(BANK0[10]), 

    clear_vec@vec	PTR PTR int  size(2) Largest target is 10
		 -> ans(BANK0[10]), nums(BANK0[10]), 

    print_message_onLCD@message	PTR unsigned char  size(2) Largest target is 16
		 -> STR_15(CODE[6]), STR_14(CODE[12]), STR_13(CODE[9]), STR_12(CODE[9]), 
		 -> STR_11(CODE[6]), STR_10(CODE[11]), STR_9(CODE[12]), STR_8(CODE[8]), 
		 -> capture@m(COMRAM[16]), ans(BANK0[10]), STR_5(CODE[10]), nums(BANK0[10]), 
		 -> STR_4(CODE[13]), STR_3(CODE[12]), STR_2(CODE[6]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_compare_nums
    _main->_print_message_onLCD
    _win_protocol->_clear_vec
    _win_protocol->_print_message_onLCD
    _game_won->_print_message_onLCD
    _loss_protocol->_print_message_onLCD
    _reset_game->_clear_vec
    _clear_vec->_strlen
    _print_message_onLCD->_strlen
    _clean_screen->_R_I
    _init_lcd->_R_I
    _get_rand_num->_rand
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _rand->___lmul
    ___awmod->_rand
    _compare_nums->_strlen

Critical Paths under _capture in COMRAM

    _capture->i2_sprintf
    i2_sprintf->i2___lwmod
    i2___lwmod->i2___lwdiv
    i2_print_message_onLCD->i2_strlen

Critical Paths under _main in BANK0

    _main->_get_rand_num
    _win_protocol->_game_won
    _game_won->_print_message_onLCD
    _loss_protocol->_print_message_onLCD
    _get_rand_num->_sprintf
    _sprintf->___lwmod
    _rand->___lmul

Critical Paths under _capture in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _capture in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _capture in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _capture in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _capture in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _capture in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   28067
                                             24 BANK0      7     7      0
                                _R_I
                       _clean_screen
                       _compare_nums
                       _get_rand_num
                           _init_lcd
                    _init_serial_com
                     _initial_config
                      _loss_protocol
                _print_message_onLCD
                              _srand
                       _win_protocol
 ---------------------------------------------------------------------------------
 (1) _win_protocol                                         2     2      0   12290
                                              3 BANK0      2     2      0
                       _clean_screen
                          _clear_vec
                           _game_won
                _print_message_onLCD
 ---------------------------------------------------------------------------------
 (2) _game_won                                             2     2      0    6145
                                              1 BANK0      2     2      0
                                _R_I
                _print_message_onLCD
                         _reset_game
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      98
                                             54 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _loss_protocol                                        2     2      0    6145
                                              1 BANK0      2     2      0
                       _clean_screen
                _print_message_onLCD
                         _reset_game
 ---------------------------------------------------------------------------------
 (3) _reset_game                                           0     0      0     889
                          _clear_vec
 ---------------------------------------------------------------------------------
 (4) _clear_vec                                            6     4      2     889
                                             58 COMRAM     6     4      2
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _print_message_onLCD                                  7     3      4    5225
                                             58 COMRAM     6     2      4
                                              0 BANK0      1     1      0
                                _R_D
                                _R_I
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _R_D                                                  1     1      0      31
                                             54 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clean_screen                                         1     1      0      31
                                             55 COMRAM     1     1      0
                                _R_I
 ---------------------------------------------------------------------------------
 (1) _initial_config                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_serial_com                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0      31
                                             55 COMRAM     1     1      0
                                _R_I
 ---------------------------------------------------------------------------------
 (3) _R_I                                                  1     1      0      31
                                             54 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_rand_num                                         7     6      1    3222
                                             17 BANK0      7     6      1
                            ___awmod
                               _rand
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    1814
                                             62 COMRAM     1     1      0
                                              4 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             61 COMRAM     1     1      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             54 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     456
                                             62 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     456
                                             54 COMRAM     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     613
                                              4 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _compare_nums                                         7     3      4     827
                                             58 COMRAM     6     2      4
                                              0 BANK0      1     1      0
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     455
                                             54 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _capture                                             28    28      0    1808
                                             26 COMRAM    28    28      0
                       _erase_letter
                         _get_letter
              i2_print_message_onLCD
                          i2_sprintf
                           i2_strlen
 ---------------------------------------------------------------------------------
 (7) i2_sprintf                                           23    17      6    1023
                                             12 COMRAM    14     8      6
                         _get_letter (ARG)
                          i2___lwdiv
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_print_message_onLCD                                7     3      4     420
                                              4 COMRAM     7     3      4
                              i2_R_D
                              i2_R_I
                           i2_strlen
 ---------------------------------------------------------------------------------
 (7) i2_strlen                                             4     2      2     142
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2_R_I                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_R_D                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _get_letter                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _erase_letter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _R_I
   _clean_screen
     _R_I
   _compare_nums
     _strlen
   _get_rand_num
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _init_lcd
     _R_I
   _init_serial_com
   _initial_config
   _loss_protocol
     _clean_screen
       _R_I
     _print_message_onLCD
       _R_D
       _R_I
       _strlen
     _reset_game
       _clear_vec
         _strlen
   _print_message_onLCD
     _R_D
     _R_I
     _strlen
   _srand
   _win_protocol
     _clean_screen
       _R_I
     _clear_vec
       _strlen
     _game_won
       _R_I
       _print_message_onLCD
         _R_D
         _R_I
         _strlen
       _reset_game
         _clear_vec
           _strlen
     _print_message_onLCD
       _R_D
       _R_I
       _strlen

 _capture (ROOT)
   _erase_letter
   _get_letter
   i2_print_message_onLCD
     i2_R_D
     i2_R_I
     i2_strlen
   i2_sprintf
     _get_letter (ARG)
     i2___lwdiv (ARG)
     i2___lwmod (ARG)
       i2___lwdiv (ARG)
   i2_strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1F      3C       5       46.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     40      48       1       57.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      84      15        0.0%
DATA                 0      0      84       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 28 12:27:52 2020

                                                i2___lwdiv@dividend 0001  
                                                       __CFG_OSC$XT 000000  
                                                               l191 120E  
                                                               l198 0D36  
                                                               l722 10EA  
                                                               l732 1306  
                                                               _LC3 007C5B  
                                                               _LC4 007C5C  
                                                               u760 10C0  
                                                               _R_D 14DC  
                                                               _R_I 14F8  
                                                     ?_compare_nums 003B  
                                                      __CFG_BOR$OFF 000000  
                                                               _ans 00A2  
                                                               _lvl 00A1  
                                                      ___awmod@sign 0089  
                                                               prod 000FF3  
                                                               wreg 000FE8  
                                                  ??_initial_config 0037  
                                                      __CFG_LVP$OFF 000000  
                                                              ?_R_D 0001  
                                                              ?_R_I 0001  
                                                      __CFG_WDT$OFF 000000  
                                                              l2400 0908  
                                                              l2320 137C  
                                                              l2410 0932  
                                                              l2330 0DEA  
                                                              l2332 0DF4  
                                                              l2340 0E3A  
                                                              l2324 13A0  
                                                              l2350 104A  
                                                              l2430 0986  
                                                              l2432 098E  
                                                              l2416 0938  
                                                              l2290 13C2  
                                                              l2354 1062  
                                                              l1722 10B0  
                                                              l2370 12FA  
                                                              l2362 12D4  
                                                              l2338 0E34  
                                                              l2602 0746  
                                                              l2524 11E6  
                                                              l1724 10BA  
                                                              l2364 12DE  
                                                              l2380 089A  
                                                              l2604 074E  
                                                              l2518 11C0  
                                                              l2526 11EA  
                                                              l1734 10DE  
                                                              l2438 09EA  
                                                              l2542 0CD8  
                                                              l2622 07BA  
                                                              l2614 078A  
                                                              l2288 13BC  
                                                              l2480 0E98  
                                                              l2472 0E7A  
                                                              l2608 0758  
                                                              l2482 0EA2  
                                                              l2386 08B8  
                                                              l2554 0CF0  
                                                              l2650 0876  
                                                              l2618 0798  
                                                              l2634 0836  
                                                              l2492 0ECA  
                                                              l2476 0E88  
                                                              l2388 08C0  
                                                              l2556 0D06  
                                                              l2652 087C  
                                                              l2398 08D8  
                                                              l2654 0884  
                                                              l2496 0EDA  
                                                              l2488 0EBE  
                                                              STR_1 060B  
                                                              STR_2 0679  
                                                              STR_3 0632  
                                                              STR_4 0619  
                                                              STR_5 0655  
                                                              STR_6 068B  
                                                              STR_7 068E  
                                                              STR_8 0671  
                                                              STR_9 0626  
                                                              u1310 13E6  
                                                              u1410 12E4  
                                                              u1317 13DC  
                                                              u1430 08A4  
                                                              u1350 0E24  
                                                              _LATB 000F8A  
                                                              _LATC 000F8B  
                                                              _LATD 000F8C  
                                                              u1530 0EA8  
                                                              u1460 0968  
                                                              u1357 0E1A  
                                                              u1614 076C  
                                                              u1615 0766  
                                                              u1480 09F4  
                                                              u1490 0A10  
                                                              u1707 0CA8  
                                                              u1717 0D20  
                                                              _IPR1 000F9F  
                                                              u1807 1234  
                                                              u1727 0FA2  
                                                              _PIE1 000F9D  
                                                              u1817 125C  
                                                              u1737 0FC2  
                                                              u1827 1508  
                                                              u1747 0BD6  
                                                              u1667 06D4  
                                                              u1757 0C1E  
                                                              u1677 071E  
                                                              u1767 0C68  
                                                              u1687 077C  
                                                              u1777 14EC  
                                                              u1697 0806  
                                                              u1787 14CC  
                                                              u1797 121C  
                                                              _PIR1 000F9E  
                                                      _win_protocol 0C86  
                                                      __CFG_PWRT$ON 000000  
                                                     ?_erase_letter 0001  
                                                              _main 0692  
                                                              _rand 126C  
                                                              _next 0047  
                                                 ??_init_serial_com 0037  
                                                              _nums 00AC  
                                                              fsr0h 000FEA  
                                                i2___lwdiv@quotient 0005  
                                                              indf0 000FEF  
                                                              fsr2h 000FDA  
                                                              fsr0l 000FE9  
                                                              indf2 000FDF  
                                                              fsr1l 000FE1  
                                                              fsr2l 000FD9  
                                                              btemp 0049  
                                                              prodh 000FF4  
                                                              prodl 000FF3  
                                                              start 0114  
                                                    ??_get_rand_num 0092  
                                                      ___param_bank 000000  
                                                             ??_R_D 0037  
                                                             ??_R_I 0037  
                                           ??i2_print_message_onLCD 0009  
                                                             ?_main 0001  
                                                             ?_rand 003F  
                                                             STR_10 064A  
                                                             STR_11 0685  
                                                             STR_12 065F  
                                                             STR_13 0668  
                                                             STR_14 063E  
                                                             STR_15 067F  
                                                   __end_of___awmod 0EE8  
                                                    ??_compare_nums 003F  
                                                   __end_of___lwdiv 10F8  
                                                   __end_of___lwmod 1314  
                                                             i2l151 00E0  
                                                             i2l160 0DD6  
                                                             i2l155 00E4  
                                                             i2l722 114A  
                                                             i2l732 1356  
                                              __end_of_clean_screen 14DC  
                                                             _RCSTA 000FAB  
                                                             i2_R_D 1530  
                                                             _SPBRG 000FAF  
                                                             i2_R_I 1514  
                                                             _PORTB 000F81  
                                                             _PORTC 000F82  
                                                             _PORTD 000F83  
                                                             _TRISB 000F93  
                                                             _TRISC 000F94  
                                                             _TRISD 000F95  
                                                             _TXSTA 000FAC  
                                                   __end_of_capture 0114  
                                               ___lmul@multiplicand 003B  
                                                   __end_of_dpowers 060B  
                                                             _randx 0041  
                                                             _lvl_n 00B6  
                                                             _srand 154C  
                                                             main@i 009E  
                                                    ??_erase_letter 0001  
                                                             tablat 000FF5  
                                                             ttemp5 004A  
                                                             ttemp6 004D  
                                                             ttemp7 0051  
                                                             status 000FD8  
                                                             wtemp8 004A  
                                                   __end_of_sprintf 0A22  
                                                __size_ofi2___lwdiv 0060  
                                                __size_ofi2___lwmod 0050  
                                                  __end_ofi2_strlen 1448  
                                                   __initialization 1158  
                                                      __end_of_main 088C  
                                                      __end_of_rand 12C2  
                                              print_message_onLCD@i 0080  
                                                     get_rand_num@r 0097  
                                                  get_rand_num@from 0096  
                                                            ??_main 0098  
                                                            ??_rand 0041  
                                                     __activetblptr 000002  
                                                        i2sprintf@c 001A  
                                                        i2sprintf@f 000F  
                                                            ?i2_R_D 0001  
                                                            ?i2_R_I 0001  
                                                __size_ofi2_sprintf 0192  
                                                        i2strlen@cp 0003  
                                                     _counting_down 0048  
                                                            ?_srand 0037  
                                                            i2l2100 0EF6  
                                                            i2l2102 0EFE  
                                                            i2l2110 0F42  
                                                            i2l2120 0A4C  
                                                            i2l2122 0A54  
                                                            i2l2114 0A2E  
                                                            i2l2060 0D5A  
                                                            i2l2052 0D4E  
                                                            i2l2044 0D42  
                                                            i2l2108 0F3E  
                                                            i2l2132 0A6C  
                                                            i2l2134 0A9C  
                                                            i2l2080 0D78  
                                                            i2l2072 0D6C  
                                                            i2l2064 0D60  
                                                            i2l2056 0D54  
                                                            i2l2048 0D48  
                                                            i2l2144 0AC6  
                                                            i2l2146 0ACC  
                                                            i2l2084 0D7E  
                                                            i2l2076 0D72  
                                                            i2l2068 0D66  
                                                            i2l2172 0B7C  
                                                            i2l2164 0B1C  
                                                            i2l2094 0D8A  
                                                            i2l2166 0B24  
                                                            i2l2158 0AFE  
                                                            i2l2088 0D84  
                                                            i2l2280 00D4  
                                                            i2l2258 003C  
                                                            i2l2276 00C2  
                                                            i2l1906 1110  
                                                            i2l1940 1408  
                                                            i2l1908 111A  
                                                            i2l1942 140E  
                                                            i2l1918 113E  
                                                            i2l1934 134A  
                                                            i2l1926 1324  
                                                            i2l1928 132E  
                                                            _INTCON 000FF2  
                                                  __end_of_game_won 0FD2  
                                                            ___lmul 1036  
                                                         ??___awmod 0041  
                                                         ??___lwdiv 003B  
                                                         ??___lwmod 003E  
                                                  __end_of_init_lcd 126C  
                                                            clear_0 119E  
                                                   ___awmod@divisor 0086  
                                                         ??_capture 001B  
                                                   ___awmod@counter 0088  
                                                            _strlen 13B0  
                                                            _typing 00A0  
                                          print_message_onLCD@place 003D  
                                                      __pdataCOMRAM 0041  
                                                 __end_ofi2___lwdiv 1158  
                                                      __mediumconst 0000  
                                                 __end_ofi2___lwmod 1364  
                                                            tblptrh 000FF7  
                                                            tblptrl 000FF6  
                                                            tblptru 000FF8  
                                              __end_of_get_rand_num 1036  
                                                            srand@x 0037  
                                                         ??_sprintf 003F  
                                                     compare_nums@i 0080  
                                                     compare_nums@r 003D  
                                                        __accesstop 0080  
                                           __end_of__initialization 11A8  
                                                     i2sprintf@flag 0014  
                                              __end_of_compare_nums 1214  
                                                     ___rparam_used 000001  
                                                     i2sprintf@prec 0015  
                                                 __end_ofi2_sprintf 0BB4  
                                             __end_of_loss_protocol 0C86  
                                                     __end_ofi2_R_D 154C  
                                                     __end_ofi2_R_I 1530  
                                                i2___lwmod@dividend 0008  
                                                    __pcstackCOMRAM 0001  
                                                      __pidataBANK0 1564  
                                                    get_letter@code 0001  
                                             __size_of_clean_screen 001E  
                                                     __end_of_srand 155E  
                                              __end_of_erase_letter 1570  
                                                __size_of_clear_vec 004C  
                                                    get_rand_num@to 0091  
                                                           ??i2_R_D 0001  
                                                           ??i2_R_I 0001  
                                                   _init_serial_com 1470  
                                                         ?i2_strlen 0001  
                                       __end_of_print_message_onLCD 0E62  
                                                           ??_srand 0039  
                                                        __pbssBANK0 009F  
                                                       i2sprintf@ap 0016  
                                                       i2sprintf@sp 000D  
                                                      _clean_screen 14BE  
                                       print_message_onLCD@space_bt 003E  
                                                           ?___lmul 0037  
                                    __size_ofi2_print_message_onLCD 0080  
                                                    ___lmul@product 0080  
                                     __end_ofi2_print_message_onLCD 0F68  
                                                           R_D@dato 0037  
                                                           ?_strlen 0037  
                                                           R_I@dato 0037  
                                                           _INTCON2 000FF1  
                                                        _get_letter 0D3C  
                                                         ?_game_won 0001  
                                                           i2u95_40 1120  
                                                           i2u98_40 1334  
                                                        ??i2_strlen 0003  
                                                         ?_init_lcd 0001  
                                                 __end_of_clear_vec 13B0  
                                                        _first_exec 0046  
                                                           __Hparam 0000  
                                                           __Lparam 0000  
                                                   __size_of___lmul 0062  
                                                           ___awmod 0E62  
                                                           ___lwdiv 1098  
                                                           ___lwmod 12C2  
                                                      __psmallconst 0600  
                                                           __pcinit 1158  
                                           __end_of_init_serial_com 1498  
                                                           __ramtop 0600  
                                                           _capture 0008  
                                                           __ptext0 0692  
                                                           __ptext1 0C86  
                                                           __ptext2 0F68  
                                                           __ptext3 154C  
                                                           __ptext4 0BB4  
                                                           __ptext5 1448  
                                                           __ptext6 1364  
                                                           __ptext7 0DDC  
                                                           __ptext8 14DC  
                                                           __ptext9 14BE  
                                             __size_of_get_rand_num 0064  
                                                   __size_of_strlen 004C  
                                                           _attempt 0045  
                                                      __size_of_R_D 001C  
                                                      __size_of_R_I 001C  
                                                           _dpowers 0601  
                                                  ___awmod@dividend 0084  
                                                        ??_game_won 0081  
                                                           _sprintf 088C  
                                              end_of_initialization 11A8  
                                             __size_of_compare_nums 005E  
                                                        clear_vec@i 0040  
                                                     __Lmediumconst 0000  
                                                        ??_init_lcd 0038  
                                                         i2R_D@dato 0001  
                                           __size_of_initial_config 0026  
                                                         i2R_I@dato 0001  
                                                        _reset_game 1448  
                                             __size_of_erase_letter 0006  
                                                      _get_rand_num 0FD2  
                                                           postdec1 000FE5  
                                                           postdec2 000FDD  
                                                           postinc0 000FEE  
                                                           postinc1 000FE6  
                                                           postinc2 000FDE  
                                                           strlen@s 0037  
                                                      _compare_nums 11B6  
                                                       ?_get_letter 0001  
                                                 i2___lwdiv@divisor 0003  
                                                         i2___lwdiv 10F8  
                                                         i2___lwmod 1314  
                                                 i2___lwdiv@counter 0007  
                                                      _erase_letter 156A  
                                                         i2_sprintf 0A22  
                                                    __end_of___lmul 1098  
                                                     __pidataCOMRAM 155E  
                                                  ?_init_serial_com 0001  
                                                    __end_of_strlen 13FC  
                                               start_initialization 1158  
                                                       __end_of_R_D 14F8  
                                                       __end_of_R_I 1514  
                                                   get_rand_num@num 0094  
                                                        ?i2___lwdiv 0001  
                                                        ?i2___lwmod 0008  
                                                     ?_win_protocol 0001  
                                                 __size_ofi2_strlen 004C  
                                                         i2strlen@s 0001  
                                      i2print_message_onLCD@message 0005  
                                                       ?_reset_game 0001  
                                                          ??___lmul 003F  
                                               __size_of_get_letter 00A0  
                                                        ?i2_sprintf 000D  
                                                       __pdataBANK0 00B6  
                                                          ??_strlen 0039  
                                                       __pbssCOMRAM 0047  
                                                      i2sprintf@val 0018  
                                                     __pcstackBANK0 0080  
                                            __size_of_loss_protocol 00D2  
                                                 i2___lwmod@divisor 000A  
                                                 i2___lwmod@counter 000C  
                                                    ??_win_protocol 0083  
                                                 __size_of_game_won 006A  
                                                       sprintf@flag 008A  
                                                    _initial_config 1498  
                                                       sprintf@prec 008B  
                                      __size_of_print_message_onLCD 0086  
                                                 __size_of_init_lcd 0058  
                                        print_message_onLCD@message 003B  
                                                  ___lwdiv@dividend 0037  
                                                         _clear_vec 1364  
                                                         _e_pressed 009F  
                                                         __pintcode 0008  
                                                          ?___awmod 0084  
                                                          ?___lwdiv 0037  
                                                          ?___lwmod 0080  
                                                          ?_capture 0001  
                                             i2_print_message_onLCD 0EE8  
                                                       __smallconst 0600  
                                                    __size_ofi2_R_D 001C  
                                                    __size_ofi2_R_I 001C  
                                               __size_of_reset_game 0028  
                                                  ___lwdiv@quotient 003B  
                                                          ?_sprintf 0084  
                                                       ??i2___lwdiv 0005  
                                                       ??i2___lwmod 000C  
                                                    __size_of_srand 0012  
                                            __end_of_initial_config 14BE  
                                                          i2u100_40 1432  
                                                          i2u100_47 1428  
                                                          i2u110_40 0A38  
                                                          i2u107_40 0F2E  
                                                          i2u115_40 0B86  
                                                          i2u107_47 0F24  
                                                          i2u116_40 0BA2  
                                                          i2u183_47 004A  
                                                          i2u184_47 1524  
                                                          i2u185_47 1540  
                                                     _loss_protocol 0BB4  
                                                        ?_clear_vec 003B  
                                            i2print_message_onLCD@i 000B  
                                                          _RCONbits 000FD0  
                                                       ??i2_sprintf 0013  
                                                         main@i_280 009D  
                                                      ??_get_letter 0001  
                                                          i2_strlen 13FC  
                                                 ___lmul@multiplier 0037  
                                                         copy_data0 116C  
                                                         copy_data1 118C  
                                     i2print_message_onLCD@space_bt 0008  
                                                   ?_initial_config 0001  
                                                    ?_loss_protocol 0001  
                                                          __Hrparam 0000  
                                                          __Lrparam 0000  
                                                      clear_vec@vec 003B  
                                                __end_of_get_letter 0DDC  
                                              __end_of_win_protocol 0D3C  
                                                  __size_of___awmod 0086  
                                                  __size_of___lwdiv 0060  
                                                  __size_of___lwmod 0052  
                                                  clear_vec@vec_len 003F  
                                            ?i2_print_message_onLCD 0005  
                                                  __size_of_capture 010C  
                                                        sprintf@val 008E  
                                                   ___lwdiv@divisor 0039  
                                                          _game_won 0F68  
                                                   ___lwdiv@counter 003D  
                                                          __ptext10 1498  
                                                          __ptext11 1470  
                                                          __ptext20 0E62  
                                                          __ptext12 1214  
                                                          __ptext21 11B6  
                                                          __ptext13 14F8  
                                                          __ptext30 1530  
                                                          __ptext22 13B0  
                                                          __ptext14 0FD2  
                                                          __ptext31 0D3C  
                                                          __ptext15 088C  
                                                          __ptext32 156A  
                                                          __ptext24 0A22  
                                                          __ptext16 12C2  
                                                          __ptext25 1314  
                                                          __ptext17 1098  
                                                          __ptext26 10F8  
                                                          __ptext18 126C  
                                                          __ptext27 0EE8  
                                                          __ptext19 1036  
                                                          __ptext28 13FC  
                                                          __ptext29 1514  
                                                  __size_of_sprintf 0196  
                                                          _init_lcd 1214  
                                                     __size_of_main 01FA  
                                                     __size_of_rand 0056  
                                                     ?_clean_screen 0001  
                                                          capture@m 0026  
                                                          capture@p 0036  
                                                      ??_reset_game 0041  
                                                       ??_clear_vec 003D  
                                                          int$flags 0049  
                                               _print_message_onLCD 0DDC  
                                                        _INTCONbits 000FF2  
                                          __size_of_init_serial_com 0028  
                                                __end_of_reset_game 1470  
                                                          intlevel2 1570  
                                                         sprintf@ap 008C  
                                                         sprintf@sp 0084  
                                                  ___lwmod@dividend 0080  
                                                    ??_clean_screen 0038  
                                                   ??_loss_protocol 0081  
                                              ?_print_message_onLCD 003B  
                                                  compare_nums@nums 003B  
                                        i2print_message_onLCD@place 0007  
                                                          sprintf@c 0090  
                                                          sprintf@f 0086  
                                                   ___lwmod@divisor 0082  
                                                          strlen@cp 0039  
                                                   ___lwmod@counter 003E  
                                             ??_print_message_onLCD 003F  
                                             __size_of_win_protocol 00B6  
                                                     ?_get_rand_num 0091  
