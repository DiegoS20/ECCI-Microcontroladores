

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Feb 24 08:36:03 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 2.10
    32                           ; Generated 31/07/2019 GMT
    33                           ; 
    34                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F452 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  003BA7                     __pidataCOMRAM:
    68                           	opt callstack 0
    69                           
    70                           ;initializer for _NUMERO
    71  003BA7  F8                 	db	248
    72  003BA8  88                 	db	136
    73  003BA9  F8                 	db	248
    74  003BAA  40                 	db	64
    75  003BAB  F8                 	db	248
    76  003BAC  00                 	db	0
    77  003BAD  B8                 	db	184
    78  003BAE  A8                 	db	168
    79  003BAF  E8                 	db	232
    80  003BB0  A8                 	db	168
    81  003BB1  A8                 	db	168
    82  003BB2  F8                 	db	248
    83  003BB3  E0                 	db	224
    84  003BB4  20                 	db	32
    85  003BB5  F8                 	db	248
    86  003BB6  E8                 	db	232
    87  003BB7  A8                 	db	168
    88  003BB8  B8                 	db	184
    89  003BB9  F8                 	db	248
    90  003BBA  A8                 	db	168
    91  003BBB  B8                 	db	184
    92  003BBC  80                 	db	128
    93  003BBD  80                 	db	128
    94  003BBE  F8                 	db	248
    95  003BBF  F8                 	db	248
    96  003BC0  A8                 	db	168
    97  003BC1  F8                 	db	248
    98  003BC2  E0                 	db	224
    99  003BC3  A0                 	db	160
   100  003BC4  F8                 	db	248
   101  003BC5  F8                 	db	248
   102  003BC6  A0                 	db	160
   103  003BC7  F8                 	db	248
   104  003BC8  F8                 	db	248
   105  003BC9  28                 	db	40
   106  003BCA  38                 	db	56
   107  003BCB  F8                 	db	248
   108  003BCC  88                 	db	136
   109  003BCD  88                 	db	136
   110  003BCE  38                 	db	56
   111  003BCF  28                 	db	40
   112  003BD0  F8                 	db	248
   113  003BD1  F8                 	db	248
   114  003BD2  A8                 	db	168
   115  003BD3  A8                 	db	168
   116  003BD4  F8                 	db	248
   117  003BD5  A0                 	db	160
   118  003BD6  A0                 	db	160
   119                           
   120                           ;initializer for _SIMBOLO
   121  003BD7  20                 	db	32
   122  003BD8  70                 	db	112
   123  003BD9  20                 	db	32
   124  003BDA  20                 	db	32
   125  003BDB  20                 	db	32
   126  003BDC  20                 	db	32
   127  003BDD  50                 	db	80
   128  003BDE  20                 	db	32
   129  003BDF  50                 	db	80
   130  003BE0  10                 	db	16
   131  003BE1  20                 	db	32
   132  003BE2  40                 	db	64
   133  003BE3  70                 	db	112
   134  003BE4  20                 	db	32
   135  003BE5  70                 	db	112
   136  003BE6  20                 	db	32
   137  003BE7  40                 	db	64
   138  003BE8  20                 	db	32
   139  003BE9  40                 	db	64
   140  003BEA  20                 	db	32
   141  003BEB  40                 	db	64
   142  003BEC  50                 	db	80
   143  003BED  60                 	db	96
   144  003BEE  50                 	db	80
   145  003BEF  60                 	db	96
   146  003BF0  50                 	db	80
   147  003BF1  60                 	db	96
   148  003BF2  80                 	db	128
   149  003BF3  F8                 	db	248
   150  003BF4  80                 	db	128
   151  003BF5  50                 	db	80
   152  003BF6  50                 	db	80
   153  003BF7  50                 	db	80
   154                           
   155                           	psect	nvCOMRAM
   156  00006E                     __pnvCOMRAM:
   157                           	opt callstack 0
   158  00006E                     _resultado:
   159                           	opt callstack 0
   160  00006E                     	ds	1
   161  00006F                     _oper:
   162                           	opt callstack 0
   163  00006F                     	ds	1
   164  000070                     _oper_2:
   165                           	opt callstack 0
   166  000070                     	ds	1
   167  000071                     _oper_1:
   168                           	opt callstack 0
   169  000071                     	ds	1
   170  000072                     _input:
   171                           	opt callstack 0
   172  000072                     	ds	1
   173  0000                     _PORTE	set	3972
   174  0000                     _LATE	set	3981
   175  0000                     _TRISE	set	3990
   176  0000                     _PORTD	set	3971
   177  0000                     _LATD	set	3980
   178  0000                     _TRISD	set	3989
   179  0000                     _LATC	set	3979
   180  0000                     _TRISC	set	3988
   181  0000                     _LATB	set	3978
   182  0000                     _TRISB	set	3987
   183  0000                     _ADCON1	set	4033
   184  0000                     _PORTC	set	3970
   185  0000                     _PORTB	set	3969
   186                           
   187                           ; #config settings
   188  0000                     
   189                           	psect	cinit
   190  003A82                     __pcinit:
   191                           	opt callstack 0
   192  003A82                     start_initialization:
   193                           	opt callstack 0
   194  003A82                     __initialization:
   195                           	opt callstack 0
   196                           
   197                           ; Initialize objects allocated to COMRAM (81 bytes)
   198                           ; load TBLPTR registers with __pidataCOMRAM
   199  003A82  0EA7               	movlw	low __pidataCOMRAM
   200  003A84  6EF6               	movwf	tblptrl,c
   201  003A86  0E3B               	movlw	high __pidataCOMRAM
   202  003A88  6EF7               	movwf	tblptrh,c
   203  003A8A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   204  003A8C  6EF8               	movwf	tblptru,c
   205  003A8E  EE00  F001         	lfsr	0,__pdataCOMRAM
   206  003A92  EE10 F051          	lfsr	1,81
   207  003A96                     copy_data0:
   208  003A96  0009               	tblrd		*+
   209  003A98  CFF5 FFEE          	movff	tablat,postinc0
   210  003A9C  50E5               	movf	postdec1,w,c
   211  003A9E  50E1               	movf	fsr1l,w,c
   212  003AA0  E1FA               	bnz	copy_data0
   213  003AA2                     end_of_initialization:
   214                           	opt callstack 0
   215  003AA2                     __end_of__initialization:
   216                           	opt callstack 0
   217  003AA2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   218  003AA4  6EF8               	movwf	tblptru,c
   219  003AA6  0100               	movlb	0
   220  003AA8  EFCE  F01E         	goto	_main	;jump to C main() function
   221                           
   222                           	psect	dataCOMRAM
   223  000001                     __pdataCOMRAM:
   224                           	opt callstack 0
   225  000001                     _NUMERO:
   226                           	opt callstack 0
   227  000001                     	ds	48
   228  000031                     _SIMBOLO:
   229                           	opt callstack 0
   230  000031                     	ds	33
   231                           
   232                           	psect	cstackCOMRAM
   233  000052                     __pcstackCOMRAM:
   234                           	opt callstack 0
   235  000052                     ?_suma:
   236                           	opt callstack 0
   237  000052                     ?_resta:
   238                           	opt callstack 0
   239  000052                     ?_multi:
   240                           	opt callstack 0
   241  000052                     ?_and:
   242                           	opt callstack 0
   243  000052                     ?_or:
   244                           	opt callstack 0
   245  000052                     ?_xor:
   246                           	opt callstack 0
   247  000052                     ?_isupper:
   248                           	opt callstack 0
   249  000052                     suma@oper_2:
   250                           	opt callstack 0
   251  000052                     resta@oper_2:
   252                           	opt callstack 0
   253  000052                     multi@oper_2:
   254                           	opt callstack 0
   255  000052                     and@oper_2:
   256                           	opt callstack 0
   257  000052                     or@oper_2:
   258                           	opt callstack 0
   259  000052                     xor@oper_2:
   260                           	opt callstack 0
   261  000052                     ___lbdiv@divisor:
   262                           	opt callstack 0
   263  000052                     ___lbmod@divisor:
   264                           	opt callstack 0
   265  000052                     isupper@c:
   266                           	opt callstack 0
   267                           
   268                           ; 2 bytes @ 0x0
   269  000052                     	ds	1
   270  000053                     ___lbdiv@dividend:
   271                           	opt callstack 0
   272  000053                     ___lbmod@dividend:
   273                           	opt callstack 0
   274                           
   275                           ; 1 bytes @ 0x1
   276  000053                     	ds	1
   277  000054                     ??_and:
   278  000054                     ??_or:
   279  000054                     ??_xor:
   280  000054                     ??_isupper:
   281  000054                     suma@oper_1:
   282                           	opt callstack 0
   283  000054                     multi@oper_1:
   284                           	opt callstack 0
   285  000054                     ___lbdiv@counter:
   286                           	opt callstack 0
   287  000054                     ___lbmod@counter:
   288                           	opt callstack 0
   289                           
   290                           ; 1 bytes @ 0x2
   291  000054                     	ds	1
   292  000055                     resta@oper_1:
   293                           	opt callstack 0
   294  000055                     and@oper_1:
   295                           	opt callstack 0
   296  000055                     or@oper_1:
   297                           	opt callstack 0
   298  000055                     xor@oper_1:
   299                           	opt callstack 0
   300  000055                     ___lbdiv@quotient:
   301                           	opt callstack 0
   302  000055                     ___lbmod@rem:
   303                           	opt callstack 0
   304                           
   305                           ; 1 bytes @ 0x3
   306  000055                     	ds	1
   307  000056                     ?_division:
   308                           	opt callstack 0
   309  000056                     ?_module:
   310                           	opt callstack 0
   311  000056                     ?_nand:
   312                           	opt callstack 0
   313  000056                     division@oper_2:
   314                           	opt callstack 0
   315  000056                     module@oper_2:
   316                           	opt callstack 0
   317  000056                     nand@oper_2:
   318                           	opt callstack 0
   319                           
   320                           ; 1 bytes @ 0x4
   321  000056                     	ds	2
   322  000058                     ??_module:
   323  000058                     ?_tolower:
   324                           	opt callstack 0
   325  000058                     division@oper_1:
   326                           	opt callstack 0
   327  000058                     nand@oper_1:
   328                           	opt callstack 0
   329  000058                     tolower@c:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x6
   333  000058                     	ds	1
   334  000059                     division@result:
   335                           	opt callstack 0
   336  000059                     module@oper_1:
   337                           	opt callstack 0
   338                           
   339                           ; 1 bytes @ 0x7
   340  000059                     	ds	1
   341  00005A                     ??_tolower:
   342  00005A                     ?_no_es_primo:
   343                           	opt callstack 0
   344  00005A                     no_es_primo@num:
   345                           	opt callstack 0
   346                           
   347                           ; 2 bytes @ 0x8
   348  00005A                     	ds	2
   349  00005C                     ?_operar:
   350                           	opt callstack 0
   351  00005C                     operar@oper_1:
   352                           	opt callstack 0
   353                           
   354                           ; 1 bytes @ 0xA
   355  00005C                     	ds	1
   356  00005D                     operar@oper_2:
   357                           	opt callstack 0
   358                           
   359                           ; 1 bytes @ 0xB
   360  00005D                     	ds	1
   361  00005E                     ??_operar:
   362  00005E                     _tolower$633:
   363                           	opt callstack 0
   364                           
   365                           ; 2 bytes @ 0xC
   366  00005E                     	ds	2
   367  000060                     operar@oper:
   368                           	opt callstack 0
   369  000060                     visualizar@SoN:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0xE
   373  000060                     	ds	2
   374  000062                     visualizar@position:
   375                           	opt callstack 0
   376                           
   377                           ; 1 bytes @ 0x10
   378  000062                     	ds	1
   379  000063                     visualizar@from:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0x11
   383  000063                     	ds	2
   384  000065                     visualizar@enable:
   385                           	opt callstack 0
   386                           
   387                           ; 2 bytes @ 0x13
   388  000065                     	ds	2
   389  000067                     ??_visualizar:
   390                           
   391                           ; 1 bytes @ 0x15
   392  000067                     	ds	3
   393  00006A                     _visualizar$149:
   394                           	opt callstack 0
   395                           
   396                           ; 2 bytes @ 0x18
   397  00006A                     	ds	2
   398  00006C                     visualizar@x:
   399                           	opt callstack 0
   400                           
   401                           ; 1 bytes @ 0x1A
   402  00006C                     	ds	1
   403  00006D                     ??_main:
   404                           
   405                           ; 1 bytes @ 0x1B
   406  00006D                     	ds	1
   407                           
   408 ;;
   409 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   410 ;;
   411 ;; *************** function _main *****************
   412 ;; Defined at:
   413 ;;		line 63 in file "main.c"
   414 ;; Parameters:    Size  Location     Type
   415 ;;		None
   416 ;; Auto vars:     Size  Location     Type
   417 ;;  es_menos        2    0        int 
   418 ;; Return value:  Size  Location     Type
   419 ;;                  1    wreg      void 
   420 ;; Registers used:
   421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   422 ;; Tracked objects:
   423 ;;		On entry : 0/0
   424 ;;		On exit  : 0/0
   425 ;;		Unchanged: 0/0
   426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   427 ;;      Params:         0       0       0       0       0       0       0
   428 ;;      Locals:         2       0       0       0       0       0       0
   429 ;;      Temps:          1       0       0       0       0       0       0
   430 ;;      Totals:         3       0       0       0       0       0       0
   431 ;;Total ram usage:        3 bytes
   432 ;; Hardware stack levels required when called:    4
   433 ;; This function calls:
   434 ;;		_init_config
   435 ;;		_operar
   436 ;;		_visualizar
   437 ;; This function is called by:
   438 ;;		Startup code after reset
   439 ;; This function uses a non-reentrant model
   440 ;;
   441                           
   442                           	psect	text0
   443  003D9C                     __ptext0:
   444                           	opt callstack 0
   445  003D9C                     _main:
   446                           	opt callstack 27
   447  003D9C  FFFF               	dw	65535	; assembler added errata NOP
   448                           
   449                           ;main.c: 65: void init_config(void) {
   450  003D9E  EC56  F01D         	call	_init_config	;wreg free
   451  003DA2                     l1278:
   452  003DA2  FFFF               	dw	65535	; assembler added errata NOP
   453                           
   454                           ;main.c: 67:     TRISB = 0B00000000;
   455  003DA4  CF81 F072          	movff	3969,_input	;volatile
   456  003DA8                     
   457                           ;main.c: 68:     LATB = 0;
   458  003DA8  3872               	swapf	_input^0,w,c
   459  003DAA  0B0F               	andlw	15
   460  003DAC  6E71               	movwf	_oper_1^0,c
   461  003DAE                     
   462                           ;main.c: 69:     PORTB = 0;
   463  003DAE  5072               	movf	_input^0,w,c
   464  003DB0  0B0F               	andlw	15
   465  003DB2  6E70               	movwf	_oper_2^0,c
   466  003DB4                     
   467                           ;main.c: 70:     TRISC = 0B00000000;
   468  003DB4  5082               	movf	130,w,c	;volatile
   469  003DB6  0B0F               	andlw	15
   470  003DB8  6E6F               	movwf	_oper^0,c
   471  003DBA                     
   472                           ;main.c: 71:     LATC = 0;
   473  003DBA  C071  F05C         	movff	_oper_1,operar@oper_1
   474  003DBE  C070  F05D         	movff	_oper_2,operar@oper_2
   475  003DC2  506F               	movf	_oper^0,w,c
   476  003DC4  EC33  F01F         	call	_operar
   477  003DC8  505C               	movf	?_operar^0,w,c
   478  003DCA  6E6E               	movwf	_resultado^0,c
   479  003DCC                     
   480                           ;main.c: 72:     PORTC = 0;
   481  003DCC  0E6E               	movlw	110
   482  003DCE  6E60               	movwf	visualizar@SoN^0,c
   483  003DD0  0E00               	movlw	0
   484  003DD2  6E61               	movwf	(visualizar@SoN+1)^0,c
   485  003DD4  C071  F062         	movff	_oper_1,visualizar@position
   486  003DD8  0E00               	movlw	0
   487  003DDA  6E64               	movwf	(visualizar@from+1)^0,c
   488  003DDC  0E00               	movlw	0
   489  003DDE  6E63               	movwf	visualizar@from^0,c
   490  003DE0  0E00               	movlw	0
   491  003DE2  6E66               	movwf	(visualizar@enable+1)^0,c
   492  003DE4  0E01               	movlw	1
   493  003DE6  6E65               	movwf	visualizar@enable^0,c
   494  003DE8  EC70  F01E         	call	_visualizar	;wreg free
   495  003DEC                     
   496                           ;main.c: 73:     TRISD = 0B11111111;
   497  003DEC  0E73               	movlw	115
   498  003DEE  6E60               	movwf	visualizar@SoN^0,c
   499  003DF0  0E00               	movlw	0
   500  003DF2  6E61               	movwf	(visualizar@SoN+1)^0,c
   501  003DF4  C06F  F062         	movff	_oper,visualizar@position
   502  003DF8  0E00               	movlw	0
   503  003DFA  6E64               	movwf	(visualizar@from+1)^0,c
   504  003DFC  0E04               	movlw	4
   505  003DFE  6E63               	movwf	visualizar@from^0,c
   506  003E00  0E00               	movlw	0
   507  003E02  6E66               	movwf	(visualizar@enable+1)^0,c
   508  003E04  0E01               	movlw	1
   509  003E06  6E65               	movwf	visualizar@enable^0,c
   510  003E08  EC70  F01E         	call	_visualizar	;wreg free
   511  003E0C                     
   512                           ;main.c: 74:     LATD = 0;
   513  003E0C  0E6E               	movlw	110
   514  003E0E  6E60               	movwf	visualizar@SoN^0,c
   515  003E10  0E00               	movlw	0
   516  003E12  6E61               	movwf	(visualizar@SoN+1)^0,c
   517  003E14  C070  F062         	movff	_oper_2,visualizar@position
   518  003E18  0E00               	movlw	0
   519  003E1A  6E64               	movwf	(visualizar@from+1)^0,c
   520  003E1C  0E00               	movlw	0
   521  003E1E  6E63               	movwf	visualizar@from^0,c
   522  003E20  0E00               	movlw	0
   523  003E22  6E66               	movwf	(visualizar@enable+1)^0,c
   524  003E24  0E02               	movlw	2
   525  003E26  6E65               	movwf	visualizar@enable^0,c
   526  003E28  EC70  F01E         	call	_visualizar	;wreg free
   527  003E2C                     
   528                           ;main.c: 75:     PORTD = 0;
   529  003E2C  0E73               	movlw	115
   530  003E2E  6E60               	movwf	visualizar@SoN^0,c
   531  003E30  0E00               	movlw	0
   532  003E32  6E61               	movwf	(visualizar@SoN+1)^0,c
   533  003E34  0E0B               	movlw	11
   534  003E36  6E62               	movwf	visualizar@position^0,c
   535  003E38  0E00               	movlw	0
   536  003E3A  6E64               	movwf	(visualizar@from+1)^0,c
   537  003E3C  0E04               	movlw	4
   538  003E3E  6E63               	movwf	visualizar@from^0,c
   539  003E40  0E00               	movlw	0
   540  003E42  6E66               	movwf	(visualizar@enable+1)^0,c
   541  003E44  0E02               	movlw	2
   542  003E46  6E65               	movwf	visualizar@enable^0,c
   543  003E48  EC70  F01E         	call	_visualizar	;wreg free
   544  003E4C                     
   545                           ;main.c: 76:     TRISE = 0B11111111;
   546  003E4C  0E0A               	movlw	10
   547  003E4E  6E6D               	movwf	??_main^0,c
   548  003E50  0EBE               	movlw	190
   549  003E52                     u297:
   550  003E52  FFFF               	dw	65535	; errata NOP
   551  003E54  2EE8               	decfsz	wreg,f,c
   552  003E56  D7FD               	bra	u297
   553  003E58  2E6D               	decfsz	??_main^0,f,c
   554  003E5A  D7FB               	bra	u297
   555  003E5C  D000               	nop2	
   556  003E5E                     
   557                           ;main.c: 78:     PORTE = 0;
   558  003E5E  EFD1  F01E         	goto	l1278
   559  003E62  EF01  F000         	goto	start
   560  003E66                     __end_of_main:
   561                           	opt callstack 0
   562                           
   563 ;; *************** function _visualizar *****************
   564 ;; Defined at:
   565 ;;		line 108 in file "main.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;  SoN             2   14[COMRAM] PTR unsigned char 
   568 ;;		 -> RAM(1535), 
   569 ;;  position        1   16[COMRAM] unsigned char 
   570 ;;  from            2   17[COMRAM] int 
   571 ;;  enable          2   19[COMRAM] int 
   572 ;; Auto vars:     Size  Location     Type
   573 ;;  x               1   26[COMRAM] unsigned char 
   574 ;; Return value:  Size  Location     Type
   575 ;;                  1    wreg      void 
   576 ;; Registers used:
   577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   578 ;; Tracked objects:
   579 ;;		On entry : 0/0
   580 ;;		On exit  : 0/0
   581 ;;		Unchanged: 0/0
   582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   583 ;;      Params:         7       0       0       0       0       0       0
   584 ;;      Locals:         3       0       0       0       0       0       0
   585 ;;      Temps:          3       0       0       0       0       0       0
   586 ;;      Totals:        13       0       0       0       0       0       0
   587 ;;Total ram usage:       13 bytes
   588 ;; Hardware stack levels used:    1
   589 ;; Hardware stack levels required when called:    2
   590 ;; This function calls:
   591 ;;		_tolower
   592 ;; This function is called by:
   593 ;;		_main
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           	psect	text1
   598  003CE0                     __ptext1:
   599                           	opt callstack 0
   600  003CE0                     _visualizar:
   601                           	opt callstack 0
   602  003CE0  FFFF               	dw	65535	; assembler added errata NOP
   603  003CE2                     
   604                           ;main.c: 110:     for (char x = 0; x < 3; x++) {
   605  003CE2  0E00               	movlw	0
   606  003CE4  6E6C               	movwf	visualizar@x^0,c
   607  003CE6                     l1260:
   608  003CE6  FFFF               	dw	65535	; assembler added errata NOP
   609                           
   610                           ;main.c: 111:         LATD = tolower((int)SoN) == 's' ? SIMBOLO[position][x] : NUMERO[po
      +                          sition][x];
   611  003CE8  C060  F058         	movff	visualizar@SoN,tolower@c
   612  003CEC  C061  F059         	movff	visualizar@SoN+1,tolower@c+1
   613  003CF0  ECFC  F01D         	call	_tolower	;wreg free
   614  003CF4  0E73               	movlw	115
   615  003CF6  1858               	xorwf	?_tolower^0,w,c
   616  003CF8  1059               	iorwf	(?_tolower+1)^0,w,c
   617  003CFA  B4D8               	btfsc	status,2,c
   618  003CFC  EF82  F01E         	goto	u271
   619  003D00  EF85  F01E         	goto	u270
   620  003D04                     u271:
   621  003D04  FFFF               	dw	65535	; assembler added errata NOP
   622  003D06  EF9D  F01E         	goto	l1264
   623  003D0A                     u270:
   624  003D0A  FFFF               	dw	65535	; assembler added errata NOP
   625  003D0C  5062               	movf	visualizar@position^0,w,c
   626  003D0E  0D03               	mullw	3
   627  003D10  0E01               	movlw	low _NUMERO
   628  003D12  6E67               	movwf	??_visualizar^0,c
   629  003D14  0E00               	movlw	high _NUMERO
   630  003D16  6E68               	movwf	(??_visualizar+1)^0,c
   631  003D18  50F3               	movf	243,w,c
   632  003D1A  2667               	addwf	??_visualizar^0,f,c
   633  003D1C  50F4               	movf	244,w,c
   634  003D1E  2268               	addwfc	(??_visualizar+1)^0,f,c
   635  003D20  506C               	movf	visualizar@x^0,w,c
   636  003D22  2467               	addwf	??_visualizar^0,w,c
   637  003D24  6ED9               	movwf	fsr2l,c
   638  003D26  0E00               	movlw	0
   639  003D28  2068               	addwfc	(??_visualizar+1)^0,w,c
   640  003D2A  6EDA               	movwf	fsr2h,c
   641  003D2C  50DF               	movf	indf2,w,c
   642  003D2E  6E69               	movwf	(??_visualizar+2)^0,c
   643  003D30  5069               	movf	(??_visualizar+2)^0,w,c
   644  003D32  6E6A               	movwf	_visualizar$149^0,c
   645  003D34  6A6B               	clrf	(_visualizar$149+1)^0,c
   646  003D36  EFB3  F01E         	goto	l1266
   647  003D3A                     l1264:
   648  003D3A  FFFF               	dw	65535	; assembler added errata NOP
   649  003D3C  5062               	movf	visualizar@position^0,w,c
   650  003D3E  0D03               	mullw	3
   651  003D40  0E31               	movlw	low _SIMBOLO
   652  003D42  6E67               	movwf	??_visualizar^0,c
   653  003D44  0E00               	movlw	high _SIMBOLO
   654  003D46  6E68               	movwf	(??_visualizar+1)^0,c
   655  003D48  50F3               	movf	243,w,c
   656  003D4A  2667               	addwf	??_visualizar^0,f,c
   657  003D4C  50F4               	movf	244,w,c
   658  003D4E  2268               	addwfc	(??_visualizar+1)^0,f,c
   659  003D50  506C               	movf	visualizar@x^0,w,c
   660  003D52  2467               	addwf	??_visualizar^0,w,c
   661  003D54  6ED9               	movwf	fsr2l,c
   662  003D56  0E00               	movlw	0
   663  003D58  2068               	addwfc	(??_visualizar+1)^0,w,c
   664  003D5A  6EDA               	movwf	fsr2h,c
   665  003D5C  50DF               	movf	indf2,w,c
   666  003D5E  6E69               	movwf	(??_visualizar+2)^0,c
   667  003D60  5069               	movf	(??_visualizar+2)^0,w,c
   668  003D62  6E6A               	movwf	_visualizar$149^0,c
   669  003D64  6A6B               	clrf	(_visualizar$149+1)^0,c
   670  003D66                     l1266:
   671  003D66  FFFF               	dw	65535	; assembler added errata NOP
   672  003D68  C06A  FF8C         	movff	_visualizar$149,3980	;volatile
   673  003D6C                     
   674                           ;main.c: 112:         LATE = x + from;
   675  003D6C  506C               	movf	visualizar@x^0,w,c
   676  003D6E  2463               	addwf	visualizar@from^0,w,c
   677  003D70  6E8D               	movwf	141,c	;volatile
   678  003D72                     
   679                           ;main.c: 113:         _delay((unsigned long)((5)*(4000000/4000.0)));
   680  003D72  0E05               	movlw	5
   681  003D74  6E67               	movwf	??_visualizar^0,c
   682  003D76  0EDF               	movlw	223
   683  003D78                     u307:
   684  003D78  FFFF               	dw	65535	; errata NOP
   685  003D7A  2EE8               	decfsz	wreg,f,c
   686  003D7C  D7FD               	bra	u307
   687  003D7E  2E67               	decfsz	??_visualizar^0,f,c
   688  003D80  D7FB               	bra	u307
   689  003D82                     
   690                           ;main.c: 114:     }
   691  003D82  2A6C               	incf	visualizar@x^0,f,c
   692  003D84  0E02               	movlw	2
   693  003D86  646C               	cpfsgt	visualizar@x^0,c
   694  003D88  EFC8  F01E         	goto	u281
   695  003D8C  EFCB  F01E         	goto	u280
   696  003D90                     u281:
   697  003D90  FFFF               	dw	65535	; assembler added errata NOP
   698  003D92  EF73  F01E         	goto	l1260
   699  003D96                     u280:
   700  003D96  FFFF               	dw	65535	; assembler added errata NOP
   701  003D98  0012               	return		;funcret
   702  003D9A  FFFF               	dw	65535	; errata NOP
   703  003D9C                     __end_of_visualizar:
   704                           	opt callstack 0
   705                           
   706 ;; *************** function _tolower *****************
   707 ;; Defined at:
   708 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\tolower.c"
   709 ;; Parameters:    Size  Location     Type
   710 ;;  c               2    6[COMRAM] int 
   711 ;; Auto vars:     Size  Location     Type
   712 ;;		None
   713 ;; Return value:  Size  Location     Type
   714 ;;                  2    6[COMRAM] int 
   715 ;; Registers used:
   716 ;;		wreg, status,2, status,0
   717 ;; Tracked objects:
   718 ;;		On entry : 0/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   722 ;;      Params:         2       0       0       0       0       0       0
   723 ;;      Locals:         2       0       0       0       0       0       0
   724 ;;      Temps:          4       0       0       0       0       0       0
   725 ;;      Totals:         8       0       0       0       0       0       0
   726 ;;Total ram usage:        8 bytes
   727 ;; Hardware stack levels used:    1
   728 ;; Hardware stack levels required when called:    1
   729 ;; This function calls:
   730 ;;		_isupper
   731 ;; This function is called by:
   732 ;;		_visualizar
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text2
   737  003BF8                     __ptext2:
   738                           	opt callstack 0
   739  003BF8                     _tolower:
   740                           	opt callstack 0
   741  003BF8  FFFF               	dw	65535	; assembler added errata NOP
   742  003BFA  0EBF               	movlw	191
   743  003BFC  6E5A               	movwf	??_tolower^0,c
   744  003BFE  0EFF               	movlw	255
   745  003C00  6E5B               	movwf	(??_tolower+1)^0,c
   746  003C02  C058  F05C         	movff	tolower@c,??_tolower+2
   747  003C06  C059  F05D         	movff	tolower@c+1,??_tolower+3
   748  003C0A  505A               	movf	??_tolower^0,w,c
   749  003C0C  265C               	addwf	(??_tolower+2)^0,f,c
   750  003C0E  505B               	movf	(??_tolower+1)^0,w,c
   751  003C10  225D               	addwfc	(??_tolower+3)^0,f,c
   752  003C12  505D               	movf	(??_tolower+3)^0,w,c
   753  003C14  E10B               	bnz	u210
   754  003C16  0E1A               	movlw	26
   755  003C18  5C5C               	subwf	(??_tolower+2)^0,w,c
   756  003C1A  A0D8               	btfss	status,0,c
   757  003C1C  EF12  F01E         	goto	u211
   758  003C20  EF16  F01E         	goto	u210
   759  003C24                     u211:
   760  003C24  FFFF               	dw	65535	; assembler added errata NOP
   761  003C26  0E01               	movlw	1
   762  003C28  EF18  F01E         	goto	u220
   763  003C2C                     u210:
   764  003C2C  FFFF               	dw	65535	; assembler added errata NOP
   765  003C2E  0E00               	movlw	0
   766  003C30                     u220:
   767  003C30  FFFF               	dw	65535	; assembler added errata NOP
   768  003C32  6E5E               	movwf	_tolower$633^0,c
   769  003C34  6A5F               	clrf	(_tolower$633+1)^0,c
   770  003C36  505E               	movf	_tolower$633^0,w,c
   771  003C38  105F               	iorwf	(_tolower$633+1)^0,w,c
   772  003C3A  B4D8               	btfsc	status,2,c
   773  003C3C  EF22  F01E         	goto	u231
   774  003C40  EF25  F01E         	goto	u230
   775  003C44                     u231:
   776  003C44  FFFF               	dw	65535	; assembler added errata NOP
   777  003C46  EF2D  F01E         	goto	l818
   778  003C4A                     u230:
   779  003C4A  FFFF               	dw	65535	; assembler added errata NOP
   780  003C4C  0E20               	movlw	32
   781  003C4E  1058               	iorwf	tolower@c^0,w,c
   782  003C50  6E58               	movwf	?_tolower^0,c
   783  003C52  5059               	movf	(tolower@c+1)^0,w,c
   784  003C54  6E59               	movwf	(?_tolower+1)^0,c
   785  003C56  EF32  F01E         	goto	l823
   786  003C5A                     l818:
   787  003C5A  FFFF               	dw	65535	; assembler added errata NOP
   788  003C5C  C058  F058         	movff	tolower@c,?_tolower
   789  003C60  C059  F059         	movff	tolower@c+1,?_tolower+1
   790  003C64                     l823:
   791  003C64  FFFF               	dw	65535	; assembler added errata NOP
   792  003C66  0012               	return		;funcret
   793  003C68  FFFF               	dw	65535	; errata NOP
   794  003C6A                     __end_of_tolower:
   795                           	opt callstack 0
   796                           
   797 ;; *************** function _isupper *****************
   798 ;; Defined at:
   799 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isupper.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  c               2    0[COMRAM] int 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;		None
   804 ;; Return value:  Size  Location     Type
   805 ;;                  2    0[COMRAM] int 
   806 ;; Registers used:
   807 ;;		wreg, status,2, status,0
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   813 ;;      Params:         2       0       0       0       0       0       0
   814 ;;      Locals:         0       0       0       0       0       0       0
   815 ;;      Temps:          4       0       0       0       0       0       0
   816 ;;      Totals:         6       0       0       0       0       0       0
   817 ;;Total ram usage:        6 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; This function calls:
   820 ;;		Nothing
   821 ;; This function is called by:
   822 ;;		_tolower
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text3
   827  003B64                     __ptext3:
   828                           	opt callstack 0
   829  003B64                     _isupper:
   830                           	opt callstack 28
   831  003B64  FFFF               	dw	65535	; assembler added errata NOP
   832  003B66  0EBF               	movlw	191
   833  003B68  6E54               	movwf	??_isupper^0,c
   834  003B6A  0EFF               	movlw	255
   835  003B6C  6E55               	movwf	(??_isupper+1)^0,c
   836  003B6E  C052  F056         	movff	isupper@c,??_isupper+2
   837  003B72  C053  F057         	movff	isupper@c+1,??_isupper+3
   838  003B76  5054               	movf	??_isupper^0,w,c
   839  003B78  2656               	addwf	(??_isupper+2)^0,f,c
   840  003B7A  5055               	movf	(??_isupper+1)^0,w,c
   841  003B7C  2257               	addwfc	(??_isupper+3)^0,f,c
   842  003B7E  5057               	movf	(??_isupper+3)^0,w,c
   843  003B80  E10B               	bnz	u190
   844  003B82  0E1A               	movlw	26
   845  003B84  5C56               	subwf	(??_isupper+2)^0,w,c
   846  003B86  A0D8               	btfss	status,0,c
   847  003B88  EFC8  F01D         	goto	u191
   848  003B8C  EFCC  F01D         	goto	u190
   849  003B90                     u191:
   850  003B90  FFFF               	dw	65535	; assembler added errata NOP
   851  003B92  0E01               	movlw	1
   852  003B94  EFCE  F01D         	goto	u200
   853  003B98                     u190:
   854  003B98  FFFF               	dw	65535	; assembler added errata NOP
   855  003B9A  0E00               	movlw	0
   856  003B9C                     u200:
   857  003B9C  FFFF               	dw	65535	; assembler added errata NOP
   858  003B9E  6E52               	movwf	?_isupper^0,c
   859  003BA0  6A53               	clrf	(?_isupper+1)^0,c
   860  003BA2  0012               	return		;funcret
   861  003BA4  FFFF               	dw	65535	; errata NOP
   862  003BA6                     __end_of_isupper:
   863                           	opt callstack 0
   864                           
   865 ;; *************** function _operar *****************
   866 ;; Defined at:
   867 ;;		line 117 in file "main.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;  oper            1    wreg     unsigned char 
   870 ;;  oper_1          1   10[COMRAM] unsigned char 
   871 ;;  oper_2          1   11[COMRAM] unsigned char 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  oper            1   14[COMRAM] unsigned char 
   874 ;; Return value:  Size  Location     Type
   875 ;;                  2   10[COMRAM] int 
   876 ;; Registers used:
   877 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   883 ;;      Params:         2       0       0       0       0       0       0
   884 ;;      Locals:         1       0       0       0       0       0       0
   885 ;;      Temps:          2       0       0       0       0       0       0
   886 ;;      Totals:         5       0       0       0       0       0       0
   887 ;;Total ram usage:        5 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    3
   890 ;; This function calls:
   891 ;;		_and
   892 ;;		_division
   893 ;;		_module
   894 ;;		_multi
   895 ;;		_nand
   896 ;;		_no_es_primo
   897 ;;		_or
   898 ;;		_resta
   899 ;;		_suma
   900 ;;		_xor
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text4
   907  003E66                     __ptext4:
   908                           	opt callstack 0
   909  003E66                     _operar:
   910                           	opt callstack 0
   911  003E66  FFFF               	dw	65535	; assembler added errata NOP
   912                           
   913                           ;incstack = 0
   914                           ;operar@oper stored from wreg
   915  003E68  6E60               	movwf	operar@oper^0,c
   916  003E6A                     
   917                           ;main.c: 118:     switch (oper) {
   918  003E6A  EFC2  F01F         	goto	l1248
   919  003E6E                     l1180:
   920  003E6E  FFFF               	dw	65535	; assembler added errata NOP
   921                           
   922                           ;main.c: 120:             return suma(oper_1, oper_2);
   923  003E70  C05D  F052         	movff	operar@oper_2,suma@oper_2
   924  003E74  505C               	movf	operar@oper_1^0,w,c
   925  003E76  ECDF  F01C         	call	_suma
   926  003E7A  C052  F05C         	movff	?_suma,?_operar
   927  003E7E  C053  F05D         	movff	?_suma+1,?_operar+1
   928  003E82  EFFD  F01F         	goto	l96
   929  003E86                     l1186:
   930  003E86  FFFF               	dw	65535	; assembler added errata NOP
   931                           
   932                           ;main.c: 123:             return resta(oper_1, oper_2);
   933  003E88  C05D  F052         	movff	operar@oper_2,resta@oper_2
   934  003E8C  505C               	movf	operar@oper_1^0,w,c
   935  003E8E  EC06  F01D         	call	_resta
   936  003E92  C052  F05C         	movff	?_resta,?_operar
   937  003E96  C053  F05D         	movff	?_resta+1,?_operar+1
   938  003E9A  EFFD  F01F         	goto	l96
   939  003E9E                     l1192:
   940  003E9E  FFFF               	dw	65535	; assembler added errata NOP
   941                           
   942                           ;main.c: 126:             return multi(oper_1, oper_2);
   943  003EA0  C05D  F052         	movff	operar@oper_2,multi@oper_2
   944  003EA4  505C               	movf	operar@oper_1^0,w,c
   945  003EA6  ECE8  F01C         	call	_multi
   946  003EAA  C052  F05C         	movff	?_multi,?_operar
   947  003EAE  C053  F05D         	movff	?_multi+1,?_operar+1
   948  003EB2  EFFD  F01F         	goto	l96
   949  003EB6                     l1198:
   950  003EB6  FFFF               	dw	65535	; assembler added errata NOP
   951                           
   952                           ;main.c: 129:             return division(oper_1, oper_2);
   953  003EB8  C05D  F056         	movff	operar@oper_2,division@oper_2
   954  003EBC  505C               	movf	operar@oper_1^0,w,c
   955  003EBE  EC1A  F01D         	call	_division
   956  003EC2  C056  F05C         	movff	?_division,?_operar
   957  003EC6  C057  F05D         	movff	?_division+1,?_operar+1
   958  003ECA  EFFD  F01F         	goto	l96
   959  003ECE                     l1204:
   960  003ECE  FFFF               	dw	65535	; assembler added errata NOP
   961                           
   962                           ;main.c: 132:             return module(oper_1, oper_2);
   963  003ED0  C05D  F056         	movff	operar@oper_2,module@oper_2
   964  003ED4  505C               	movf	operar@oper_1^0,w,c
   965  003ED6  EC34  F01D         	call	_module
   966  003EDA  C056  F05C         	movff	?_module,?_operar
   967  003EDE  C057  F05D         	movff	?_module+1,?_operar+1
   968  003EE2  EFFD  F01F         	goto	l96
   969  003EE6                     l1210:
   970  003EE6  FFFF               	dw	65535	; assembler added errata NOP
   971                           
   972                           ;main.c: 135:             return and(oper_1, oper_2);
   973  003EE8  C05D  F052         	movff	operar@oper_2,and@oper_2
   974  003EEC  505C               	movf	operar@oper_1^0,w,c
   975  003EEE  ECF2  F01C         	call	_and
   976  003EF2  C052  F05C         	movff	?_and,?_operar
   977  003EF6  C053  F05D         	movff	?_and+1,?_operar+1
   978  003EFA  EFFD  F01F         	goto	l96
   979  003EFE                     l1216:
   980  003EFE  FFFF               	dw	65535	; assembler added errata NOP
   981                           
   982                           ;main.c: 138:             return or(oper_1, oper_2);
   983  003F00  C05D  F052         	movff	operar@oper_2,or@oper_2
   984  003F04  505C               	movf	operar@oper_1^0,w,c
   985  003F06  ECFC  F01C         	call	_or
   986  003F0A  C052  F05C         	movff	?_or,?_operar
   987  003F0E  C053  F05D         	movff	?_or+1,?_operar+1
   988  003F12  EFFD  F01F         	goto	l96
   989  003F16                     l1222:
   990  003F16  FFFF               	dw	65535	; assembler added errata NOP
   991                           
   992                           ;main.c: 141:             return nand(oper_1, oper_2);
   993  003F18  C05D  F056         	movff	operar@oper_2,nand@oper_2
   994  003F1C  505C               	movf	operar@oper_1^0,w,c
   995  003F1E  EC27  F01D         	call	_nand
   996  003F22  C056  F05C         	movff	?_nand,?_operar
   997  003F26  C057  F05D         	movff	?_nand+1,?_operar+1
   998  003F2A  EFFD  F01F         	goto	l96
   999  003F2E                     l1228:
  1000  003F2E  FFFF               	dw	65535	; assembler added errata NOP
  1001                           
  1002                           ;main.c: 144:             return xor(oper_1, oper_2);
  1003  003F30  C05D  F052         	movff	operar@oper_2,xor@oper_2
  1004  003F34  505C               	movf	operar@oper_1^0,w,c
  1005  003F36  EC10  F01D         	call	_xor
  1006  003F3A  C052  F05C         	movff	?_xor,?_operar
  1007  003F3E  C053  F05D         	movff	?_xor+1,?_operar+1
  1008  003F42  EFFD  F01F         	goto	l96
  1009  003F46                     l1234:
  1010  003F46  FFFF               	dw	65535	; assembler added errata NOP
  1011                           
  1012                           ;main.c: 147:             return no_es_primo(oper_1);
  1013  003F48  C05C  F05A         	movff	operar@oper_1,no_es_primo@num
  1014  003F4C  6A5B               	clrf	(no_es_primo@num+1)^0,c
  1015  003F4E  EC72  F01D         	call	_no_es_primo	;wreg free
  1016  003F52  C05A  F05C         	movff	?_no_es_primo,?_operar
  1017  003F56  C05B  F05D         	movff	?_no_es_primo+1,?_operar+1
  1018  003F5A  EFFD  F01F         	goto	l96
  1019  003F5E                     l1240:
  1020  003F5E  FFFF               	dw	65535	; assembler added errata NOP
  1021                           
  1022                           ;main.c: 150:             return oper_1 == 2;
  1023  003F60  0E02               	movlw	2
  1024  003F62  185C               	xorwf	operar@oper_1^0,w,c
  1025  003F64  B4D8               	btfsc	status,2,c
  1026  003F66  EFB7  F01F         	goto	u251
  1027  003F6A  EFBB  F01F         	goto	u250
  1028  003F6E                     u251:
  1029  003F6E  FFFF               	dw	65535	; assembler added errata NOP
  1030  003F70  0E01               	movlw	1
  1031  003F72  EFBD  F01F         	goto	u260
  1032  003F76                     u250:
  1033  003F76  FFFF               	dw	65535	; assembler added errata NOP
  1034  003F78  0E00               	movlw	0
  1035  003F7A                     u260:
  1036  003F7A  FFFF               	dw	65535	; assembler added errata NOP
  1037  003F7C  6E5C               	movwf	?_operar^0,c
  1038  003F7E  6A5D               	clrf	(?_operar+1)^0,c
  1039  003F80  EFFD  F01F         	goto	l96
  1040  003F84                     l1248:
  1041  003F84  FFFF               	dw	65535	; assembler added errata NOP
  1042  003F86  5060               	movf	operar@oper^0,w,c
  1043  003F88  6E5E               	movwf	??_operar^0,c
  1044  003F8A  6A5F               	clrf	(??_operar+1)^0,c
  1045                           
  1046                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1047                           ; Switch size 1, requested type "simple"
  1048                           ; Number of cases is 1, Range of values is 0 to 0
  1049                           ; switch strategies available:
  1050                           ; Name         Instructions Cycles
  1051                           ; simple_byte            4     3 (average)
  1052                           ;	Chosen strategy is simple_byte
  1053  003F8C  505F               	movf	(??_operar+1)^0,w,c
  1054  003F8E  0A00               	xorlw	0	; case 0
  1055  003F90  B4D8               	btfsc	status,2,c
  1056  003F92  EFCD  F01F         	goto	l1308
  1057  003F96  EFFD  F01F         	goto	l96
  1058  003F9A                     l1308:
  1059  003F9A  FFFF               	dw	65535	; assembler added errata NOP
  1060                           
  1061                           ; Switch size 1, requested type "simple"
  1062                           ; Number of cases is 11, Range of values is 0 to 10
  1063                           ; switch strategies available:
  1064                           ; Name         Instructions Cycles
  1065                           ; simple_byte           34    18 (average)
  1066                           ;	Chosen strategy is simple_byte
  1067  003F9C  505E               	movf	??_operar^0,w,c
  1068  003F9E  0A00               	xorlw	0	; case 0
  1069  003FA0  B4D8               	btfsc	status,2,c
  1070  003FA2  EF37  F01F         	goto	l1180
  1071  003FA6  0A01               	xorlw	1	; case 1
  1072  003FA8  B4D8               	btfsc	status,2,c
  1073  003FAA  EF43  F01F         	goto	l1186
  1074  003FAE  0A03               	xorlw	3	; case 2
  1075  003FB0  B4D8               	btfsc	status,2,c
  1076  003FB2  EF4F  F01F         	goto	l1192
  1077  003FB6  0A01               	xorlw	1	; case 3
  1078  003FB8  B4D8               	btfsc	status,2,c
  1079  003FBA  EF5B  F01F         	goto	l1198
  1080  003FBE  0A07               	xorlw	7	; case 4
  1081  003FC0  B4D8               	btfsc	status,2,c
  1082  003FC2  EF67  F01F         	goto	l1204
  1083  003FC6  0A01               	xorlw	1	; case 5
  1084  003FC8  B4D8               	btfsc	status,2,c
  1085  003FCA  EF73  F01F         	goto	l1210
  1086  003FCE  0A03               	xorlw	3	; case 6
  1087  003FD0  B4D8               	btfsc	status,2,c
  1088  003FD2  EF7F  F01F         	goto	l1216
  1089  003FD6  0A01               	xorlw	1	; case 7
  1090  003FD8  B4D8               	btfsc	status,2,c
  1091  003FDA  EF8B  F01F         	goto	l1222
  1092  003FDE  0A0F               	xorlw	15	; case 8
  1093  003FE0  B4D8               	btfsc	status,2,c
  1094  003FE2  EF97  F01F         	goto	l1228
  1095  003FE6  0A01               	xorlw	1	; case 9
  1096  003FE8  B4D8               	btfsc	status,2,c
  1097  003FEA  EFA3  F01F         	goto	l1234
  1098  003FEE  0A03               	xorlw	3	; case 10
  1099  003FF0  B4D8               	btfsc	status,2,c
  1100  003FF2  EFAF  F01F         	goto	l1240
  1101  003FF6  EFFD  F01F         	goto	l96
  1102  003FFA                     l96:
  1103  003FFA  FFFF               	dw	65535	; assembler added errata NOP
  1104  003FFC  0012               	return		;funcret
  1105  003FFE  FFFF               	dw	65535	; errata NOP
  1106  004000                     __end_of_operar:
  1107                           	opt callstack 0
  1108                           
  1109 ;; *************** function _xor *****************
  1110 ;; Defined at:
  1111 ;;		line 194 in file "main.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  oper_1          1    wreg     unsigned char 
  1114 ;;  oper_2          1    0[COMRAM] unsigned char 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  oper_1          1    3[COMRAM] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  2    0[COMRAM] int 
  1119 ;; Registers used:
  1120 ;;		wreg, status,2, status,0
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1126 ;;      Params:         2       0       0       0       0       0       0
  1127 ;;      Locals:         1       0       0       0       0       0       0
  1128 ;;      Temps:          1       0       0       0       0       0       0
  1129 ;;      Totals:         4       0       0       0       0       0       0
  1130 ;;Total ram usage:        4 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; This function calls:
  1133 ;;		Nothing
  1134 ;; This function is called by:
  1135 ;;		_operar
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text5
  1140  003A20                     __ptext5:
  1141                           	opt callstack 0
  1142  003A20                     _xor:
  1143                           	opt callstack 0
  1144  003A20  FFFF               	dw	65535	; assembler added errata NOP
  1145                           
  1146                           ;incstack = 0
  1147                           ;xor@oper_1 stored from wreg
  1148  003A22  6E55               	movwf	xor@oper_1^0,c
  1149  003A24                     
  1150                           ;main.c: 195:     return oper_1 ^ oper_2;
  1151  003A24  5055               	movf	xor@oper_1^0,w,c
  1152  003A26  1852               	xorwf	xor@oper_2^0,w,c
  1153  003A28  6E54               	movwf	??_xor^0,c
  1154  003A2A  5054               	movf	??_xor^0,w,c
  1155  003A2C  6E52               	movwf	?_xor^0,c
  1156  003A2E  6A53               	clrf	(?_xor+1)^0,c
  1157  003A30  0012               	return		;funcret
  1158  003A32  FFFF               	dw	65535	; errata NOP
  1159  003A34                     __end_of_xor:
  1160                           	opt callstack 0
  1161                           
  1162 ;; *************** function _suma *****************
  1163 ;; Defined at:
  1164 ;;		line 157 in file "main.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;  oper_1          1    wreg     unsigned char 
  1167 ;;  oper_2          1    0[COMRAM] unsigned char 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  oper_1          1    2[COMRAM] unsigned char 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  2    0[COMRAM] int 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, status,0
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1179 ;;      Params:         2       0       0       0       0       0       0
  1180 ;;      Locals:         1       0       0       0       0       0       0
  1181 ;;      Temps:          0       0       0       0       0       0       0
  1182 ;;      Totals:         3       0       0       0       0       0       0
  1183 ;;Total ram usage:        3 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_operar
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text6
  1193  0039BE                     __ptext6:
  1194                           	opt callstack 0
  1195  0039BE                     _suma:
  1196                           	opt callstack 0
  1197  0039BE  FFFF               	dw	65535	; assembler added errata NOP
  1198                           
  1199                           ;incstack = 0
  1200                           ;suma@oper_1 stored from wreg
  1201  0039C0  6E54               	movwf	suma@oper_1^0,c
  1202  0039C2                     
  1203                           ;main.c: 158:     return oper_1 + oper_2;
  1204  0039C2  5054               	movf	suma@oper_1^0,w,c
  1205  0039C4  2452               	addwf	suma@oper_2^0,w,c
  1206  0039C6  6E52               	movwf	?_suma^0,c
  1207  0039C8  6A53               	clrf	(?_suma+1)^0,c
  1208  0039CA  3653               	rlcf	(?_suma+1)^0,f,c
  1209  0039CC  0012               	return		;funcret
  1210  0039CE  FFFF               	dw	65535	; errata NOP
  1211  0039D0                     __end_of_suma:
  1212                           	opt callstack 0
  1213                           
  1214 ;; *************** function _resta *****************
  1215 ;; Defined at:
  1216 ;;		line 161 in file "main.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  oper_1          1    wreg     unsigned char 
  1219 ;;  oper_2          1    0[COMRAM] unsigned char 
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  oper_1          1    3[COMRAM] unsigned char 
  1222 ;;  result          1    0        unsigned char 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  2    0[COMRAM] int 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2, status,0
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1232 ;;      Params:         2       0       0       0       0       0       0
  1233 ;;      Locals:         2       0       0       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0       0       0
  1235 ;;      Totals:         4       0       0       0       0       0       0
  1236 ;;Total ram usage:        4 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; This function calls:
  1239 ;;		Nothing
  1240 ;; This function is called by:
  1241 ;;		_operar
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text7
  1246  003A0C                     __ptext7:
  1247                           	opt callstack 0
  1248  003A0C                     _resta:
  1249                           	opt callstack 0
  1250  003A0C  FFFF               	dw	65535	; assembler added errata NOP
  1251                           
  1252                           ;incstack = 0
  1253                           ;resta@oper_1 stored from wreg
  1254  003A0E  6E55               	movwf	resta@oper_1^0,c
  1255  003A10                     
  1256                           ;main.c: 166:     return oper_1 - oper_2;
  1257  003A10  5052               	movf	resta@oper_2^0,w,c
  1258  003A12  5C55               	subwf	resta@oper_1^0,w,c
  1259  003A14  6E52               	movwf	?_resta^0,c
  1260  003A16  6A53               	clrf	(?_resta+1)^0,c
  1261  003A18  A0D8               	btfss	status,0,c
  1262  003A1A  0653               	decf	(?_resta+1)^0,f,c
  1263  003A1C  0012               	return		;funcret
  1264  003A1E  FFFF               	dw	65535	; errata NOP
  1265  003A20                     __end_of_resta:
  1266                           	opt callstack 0
  1267                           
  1268 ;; *************** function _or *****************
  1269 ;; Defined at:
  1270 ;;		line 186 in file "main.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;  oper_1          1    wreg     unsigned char 
  1273 ;;  oper_2          1    0[COMRAM] unsigned char 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  oper_1          1    3[COMRAM] unsigned char 
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  2    0[COMRAM] int 
  1278 ;; Registers used:
  1279 ;;		wreg, status,2, status,0
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1285 ;;      Params:         2       0       0       0       0       0       0
  1286 ;;      Locals:         1       0       0       0       0       0       0
  1287 ;;      Temps:          1       0       0       0       0       0       0
  1288 ;;      Totals:         4       0       0       0       0       0       0
  1289 ;;Total ram usage:        4 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; This function calls:
  1292 ;;		Nothing
  1293 ;; This function is called by:
  1294 ;;		_operar
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text8
  1299  0039F8                     __ptext8:
  1300                           	opt callstack 0
  1301  0039F8                     _or:
  1302                           	opt callstack 0
  1303  0039F8  FFFF               	dw	65535	; assembler added errata NOP
  1304                           
  1305                           ;incstack = 0
  1306                           ;or@oper_1 stored from wreg
  1307  0039FA  6E55               	movwf	or@oper_1^0,c
  1308  0039FC                     
  1309                           ;main.c: 187:     return oper_1 | oper_2;
  1310  0039FC  5055               	movf	or@oper_1^0,w,c
  1311  0039FE  1052               	iorwf	or@oper_2^0,w,c
  1312  003A00  6E54               	movwf	??_or^0,c
  1313  003A02  5054               	movf	??_or^0,w,c
  1314  003A04  6E52               	movwf	?_or^0,c
  1315  003A06  6A53               	clrf	(?_or+1)^0,c
  1316  003A08  0012               	return		;funcret
  1317  003A0A  FFFF               	dw	65535	; errata NOP
  1318  003A0C                     __end_of_or:
  1319                           	opt callstack 0
  1320                           
  1321 ;; *************** function _no_es_primo *****************
  1322 ;; Defined at:
  1323 ;;		line 198 in file "main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  num             2    8[COMRAM] int 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  2    8[COMRAM] int 
  1330 ;; Registers used:
  1331 ;;		wreg, status,2, status,0, cstack
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1337 ;;      Params:         2       0       0       0       0       0       0
  1338 ;;      Locals:         0       0       0       0       0       0       0
  1339 ;;      Temps:          0       0       0       0       0       0       0
  1340 ;;      Totals:         2       0       0       0       0       0       0
  1341 ;;Total ram usage:        2 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; Hardware stack levels required when called:    2
  1344 ;; This function calls:
  1345 ;;		_module
  1346 ;; This function is called by:
  1347 ;;		_operar
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text9
  1352  003AE4                     __ptext9:
  1353                           	opt callstack 0
  1354  003AE4                     _no_es_primo:
  1355                           	opt callstack 0
  1356  003AE4  FFFF               	dw	65535	; assembler added errata NOP
  1357  003AE6                     
  1358                           ;main.c: 199:     if (!module(num, 2)) {
  1359  003AE6  0E02               	movlw	2
  1360  003AE8  6E56               	movwf	module@oper_2^0,c
  1361  003AEA  505A               	movf	no_es_primo@num^0,w,c
  1362  003AEC  EC34  F01D         	call	_module
  1363  003AF0  5056               	movf	?_module^0,w,c
  1364  003AF2  1057               	iorwf	(?_module+1)^0,w,c
  1365  003AF4  A4D8               	btfss	status,2,c
  1366  003AF6  EF7F  F01D         	goto	u241
  1367  003AFA  EF82  F01D         	goto	u240
  1368  003AFE                     u241:
  1369  003AFE  FFFF               	dw	65535	; assembler added errata NOP
  1370  003B00  EF89  F01D         	goto	l1174
  1371  003B04                     u240:
  1372  003B04  FFFF               	dw	65535	; assembler added errata NOP
  1373  003B06                     
  1374                           ;main.c: 200:         return 0;
  1375  003B06  0E00               	movlw	0
  1376  003B08  6E5B               	movwf	(?_no_es_primo+1)^0,c
  1377  003B0A  0E00               	movlw	0
  1378  003B0C  6E5A               	movwf	?_no_es_primo^0,c
  1379  003B0E  EF8E  F01D         	goto	l139
  1380  003B12                     l1174:
  1381  003B12  FFFF               	dw	65535	; assembler added errata NOP
  1382                           
  1383                           ;main.c: 202:     return 1;
  1384  003B14  0E00               	movlw	0
  1385  003B16  6E5B               	movwf	(?_no_es_primo+1)^0,c
  1386  003B18  0E01               	movlw	1
  1387  003B1A  6E5A               	movwf	?_no_es_primo^0,c
  1388  003B1C                     l139:
  1389  003B1C  FFFF               	dw	65535	; assembler added errata NOP
  1390  003B1E  0012               	return		;funcret
  1391  003B20  FFFF               	dw	65535	; errata NOP
  1392  003B22                     __end_of_no_es_primo:
  1393                           	opt callstack 0
  1394                           
  1395 ;; *************** function _module *****************
  1396 ;; Defined at:
  1397 ;;		line 178 in file "main.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  oper_1          1    wreg     unsigned char 
  1400 ;;  oper_2          1    4[COMRAM] unsigned char 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  oper_1          1    7[COMRAM] unsigned char 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  2    4[COMRAM] int 
  1405 ;; Registers used:
  1406 ;;		wreg, status,2, status,0, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1412 ;;      Params:         2       0       0       0       0       0       0
  1413 ;;      Locals:         1       0       0       0       0       0       0
  1414 ;;      Temps:          1       0       0       0       0       0       0
  1415 ;;      Totals:         4       0       0       0       0       0       0
  1416 ;;Total ram usage:        4 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    1
  1419 ;; This function calls:
  1420 ;;		___lbmod
  1421 ;; This function is called by:
  1422 ;;		_operar
  1423 ;;		_no_es_primo
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text10
  1428  003A68                     __ptext10:
  1429                           	opt callstack 0
  1430  003A68                     _module:
  1431                           	opt callstack 0
  1432  003A68  FFFF               	dw	65535	; assembler added errata NOP
  1433                           
  1434                           ;incstack = 0
  1435                           ;module@oper_1 stored from wreg
  1436  003A6A  6E59               	movwf	module@oper_1^0,c
  1437  003A6C                     
  1438                           ;main.c: 179:     return oper_1 % oper_2;
  1439  003A6C  C056  F052         	movff	module@oper_2,___lbmod@divisor
  1440  003A70  5059               	movf	module@oper_1^0,w,c
  1441  003A72  EC91  F01D         	call	___lbmod
  1442  003A76  6E58               	movwf	??_module^0,c
  1443  003A78  5058               	movf	??_module^0,w,c
  1444  003A7A  6E56               	movwf	?_module^0,c
  1445  003A7C  6A57               	clrf	(?_module+1)^0,c
  1446  003A7E  0012               	return		;funcret
  1447  003A80  FFFF               	dw	65535	; errata NOP
  1448  003A82                     __end_of_module:
  1449                           	opt callstack 0
  1450                           
  1451 ;; *************** function ___lbmod *****************
  1452 ;; Defined at:
  1453 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbmod.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  dividend        1    wreg     unsigned char 
  1456 ;;  divisor         1    0[COMRAM] unsigned char 
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;  dividend        1    1[COMRAM] unsigned char 
  1459 ;;  rem             1    3[COMRAM] unsigned char 
  1460 ;;  counter         1    2[COMRAM] unsigned char 
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      unsigned char 
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, status,0
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1470 ;;      Params:         1       0       0       0       0       0       0
  1471 ;;      Locals:         3       0       0       0       0       0       0
  1472 ;;      Temps:          0       0       0       0       0       0       0
  1473 ;;      Totals:         4       0       0       0       0       0       0
  1474 ;;Total ram usage:        4 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_module
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text11
  1484  003B22                     __ptext11:
  1485                           	opt callstack 0
  1486  003B22                     ___lbmod:
  1487                           	opt callstack 0
  1488  003B22  FFFF               	dw	65535	; assembler added errata NOP
  1489                           
  1490                           ;incstack = 0
  1491                           ;___lbmod@dividend stored from wreg
  1492  003B24  6E53               	movwf	___lbmod@dividend^0,c
  1493  003B26  0E08               	movlw	8
  1494  003B28  6E54               	movwf	___lbmod@counter^0,c
  1495  003B2A  0E00               	movlw	0
  1496  003B2C  6E55               	movwf	___lbmod@rem^0,c
  1497  003B2E                     l1076:
  1498  003B2E  FFFF               	dw	65535	; assembler added errata NOP
  1499  003B30  90D8               	bcf	status,0,c
  1500  003B32  3453               	rlcf	___lbmod@dividend^0,w,c
  1501  003B34  3455               	rlcf	___lbmod@rem^0,w,c
  1502  003B36  6E55               	movwf	___lbmod@rem^0,c
  1503  003B38  90D8               	bcf	status,0,c
  1504  003B3A  3653               	rlcf	___lbmod@dividend^0,f,c
  1505  003B3C  5052               	movf	___lbmod@divisor^0,w,c
  1506  003B3E  5C55               	subwf	___lbmod@rem^0,w,c
  1507  003B40  A0D8               	btfss	status,0,c
  1508  003B42  EFA5  F01D         	goto	u151
  1509  003B46  EFA8  F01D         	goto	u150
  1510  003B4A                     u151:
  1511  003B4A  FFFF               	dw	65535	; assembler added errata NOP
  1512  003B4C  EFAB  F01D         	goto	l1084
  1513  003B50                     u150:
  1514  003B50  FFFF               	dw	65535	; assembler added errata NOP
  1515  003B52  5052               	movf	___lbmod@divisor^0,w,c
  1516  003B54  5E55               	subwf	___lbmod@rem^0,f,c
  1517  003B56                     l1084:
  1518  003B56  FFFF               	dw	65535	; assembler added errata NOP
  1519  003B58  2E54               	decfsz	___lbmod@counter^0,f,c
  1520  003B5A  EF97  F01D         	goto	l1076
  1521  003B5E  5055               	movf	___lbmod@rem^0,w,c
  1522  003B60  0012               	return		;funcret
  1523  003B62  FFFF               	dw	65535	; errata NOP
  1524  003B64                     __end_of___lbmod:
  1525                           	opt callstack 0
  1526                           
  1527 ;; *************** function _nand *****************
  1528 ;; Defined at:
  1529 ;;		line 190 in file "main.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  oper_1          1    wreg     unsigned char 
  1532 ;;  oper_2          1    4[COMRAM] unsigned char 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  oper_1          1    6[COMRAM] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  2    4[COMRAM] int 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2, status,0, cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1544 ;;      Params:         2       0       0       0       0       0       0
  1545 ;;      Locals:         1       0       0       0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0       0       0
  1547 ;;      Totals:         3       0       0       0       0       0       0
  1548 ;;Total ram usage:        3 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    1
  1551 ;; This function calls:
  1552 ;;		_and
  1553 ;; This function is called by:
  1554 ;;		_operar
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text12
  1559  003A4E                     __ptext12:
  1560                           	opt callstack 0
  1561  003A4E                     _nand:
  1562                           	opt callstack 0
  1563  003A4E  FFFF               	dw	65535	; assembler added errata NOP
  1564                           
  1565                           ;incstack = 0
  1566                           ;nand@oper_1 stored from wreg
  1567  003A50  6E58               	movwf	nand@oper_1^0,c
  1568  003A52                     
  1569                           ;main.c: 191:     return ~(and(oper_1, oper_2));
  1570  003A52  C056  F052         	movff	nand@oper_2,and@oper_2
  1571  003A56  5058               	movf	nand@oper_1^0,w,c
  1572  003A58  ECF2  F01C         	call	_and
  1573  003A5C  1C52               	comf	?_and^0,w,c
  1574  003A5E  6E56               	movwf	?_nand^0,c
  1575  003A60  1C53               	comf	(?_and+1)^0,w,c
  1576  003A62  6E57               	movwf	(?_nand+1)^0,c
  1577  003A64  0012               	return		;funcret
  1578  003A66  FFFF               	dw	65535	; errata NOP
  1579  003A68                     __end_of_nand:
  1580                           	opt callstack 0
  1581                           
  1582 ;; *************** function _and *****************
  1583 ;; Defined at:
  1584 ;;		line 182 in file "main.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;  oper_1          1    wreg     unsigned char 
  1587 ;;  oper_2          1    0[COMRAM] unsigned char 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  oper_1          1    3[COMRAM] unsigned char 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  2    0[COMRAM] int 
  1592 ;; Registers used:
  1593 ;;		wreg, status,2, status,0
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1599 ;;      Params:         2       0       0       0       0       0       0
  1600 ;;      Locals:         1       0       0       0       0       0       0
  1601 ;;      Temps:          1       0       0       0       0       0       0
  1602 ;;      Totals:         4       0       0       0       0       0       0
  1603 ;;Total ram usage:        4 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_operar
  1609 ;;		_nand
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text13
  1614  0039E4                     __ptext13:
  1615                           	opt callstack 0
  1616  0039E4                     _and:
  1617                           	opt callstack 0
  1618  0039E4  FFFF               	dw	65535	; assembler added errata NOP
  1619                           
  1620                           ;incstack = 0
  1621                           ;and@oper_1 stored from wreg
  1622  0039E6  6E55               	movwf	and@oper_1^0,c
  1623  0039E8                     
  1624                           ;main.c: 183:     return oper_1 & oper_2;
  1625  0039E8  5055               	movf	and@oper_1^0,w,c
  1626  0039EA  1452               	andwf	and@oper_2^0,w,c
  1627  0039EC  6E54               	movwf	??_and^0,c
  1628  0039EE  5054               	movf	??_and^0,w,c
  1629  0039F0  6E52               	movwf	?_and^0,c
  1630  0039F2  6A53               	clrf	(?_and+1)^0,c
  1631  0039F4  0012               	return		;funcret
  1632  0039F6  FFFF               	dw	65535	; errata NOP
  1633  0039F8                     __end_of_and:
  1634                           	opt callstack 0
  1635                           
  1636 ;; *************** function _multi *****************
  1637 ;; Defined at:
  1638 ;;		line 169 in file "main.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  oper_1          1    wreg     unsigned char 
  1641 ;;  oper_2          1    0[COMRAM] unsigned char 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  oper_1          1    2[COMRAM] unsigned char 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  2    0[COMRAM] int 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, status,0, prodl, prodh
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1653 ;;      Params:         2       0       0       0       0       0       0
  1654 ;;      Locals:         1       0       0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0
  1656 ;;      Totals:         3       0       0       0       0       0       0
  1657 ;;Total ram usage:        3 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_operar
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text14
  1667  0039D0                     __ptext14:
  1668                           	opt callstack 0
  1669  0039D0                     _multi:
  1670                           	opt callstack 0
  1671  0039D0  FFFF               	dw	65535	; assembler added errata NOP
  1672                           
  1673                           ;incstack = 0
  1674                           ;multi@oper_1 stored from wreg
  1675  0039D2  6E54               	movwf	multi@oper_1^0,c
  1676  0039D4                     
  1677                           ;main.c: 170:     return oper_1 * oper_2;
  1678  0039D4  5054               	movf	multi@oper_1^0,w,c
  1679  0039D6  0252               	mulwf	multi@oper_2^0,c
  1680  0039D8  CFF3 F052          	movff	prodl,?_multi
  1681  0039DC  CFF4 F053          	movff	prodh,?_multi+1
  1682  0039E0  0012               	return		;funcret
  1683  0039E2  FFFF               	dw	65535	; errata NOP
  1684  0039E4                     __end_of_multi:
  1685                           	opt callstack 0
  1686                           
  1687 ;; *************** function _division *****************
  1688 ;; Defined at:
  1689 ;;		line 173 in file "main.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  oper_1          1    wreg     unsigned char 
  1692 ;;  oper_2          1    4[COMRAM] unsigned char 
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;  oper_1          1    6[COMRAM] unsigned char 
  1695 ;;  result          1    7[COMRAM] unsigned char 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  2    4[COMRAM] int 
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0, cstack
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1705 ;;      Params:         2       0       0       0       0       0       0
  1706 ;;      Locals:         2       0       0       0       0       0       0
  1707 ;;      Temps:          0       0       0       0       0       0       0
  1708 ;;      Totals:         4       0       0       0       0       0       0
  1709 ;;Total ram usage:        4 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    1
  1712 ;; This function calls:
  1713 ;;		___lbdiv
  1714 ;; This function is called by:
  1715 ;;		_operar
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           	psect	text15
  1720  003A34                     __ptext15:
  1721                           	opt callstack 0
  1722  003A34                     _division:
  1723                           	opt callstack 0
  1724  003A34  FFFF               	dw	65535	; assembler added errata NOP
  1725                           
  1726                           ;incstack = 0
  1727                           ;division@oper_1 stored from wreg
  1728  003A36  6E58               	movwf	division@oper_1^0,c
  1729  003A38                     
  1730                           ;main.c: 174:     char result = oper_1 / oper_2;
  1731  003A38  C056  F052         	movff	division@oper_2,___lbdiv@divisor
  1732  003A3C  5058               	movf	division@oper_1^0,w,c
  1733  003A3E  EC35  F01E         	call	___lbdiv
  1734  003A42  6E59               	movwf	division@result^0,c
  1735  003A44                     
  1736                           ;main.c: 175:     return result;
  1737  003A44  C059  F056         	movff	division@result,?_division
  1738  003A48  6A57               	clrf	(?_division+1)^0,c
  1739  003A4A  0012               	return		;funcret
  1740  003A4C  FFFF               	dw	65535	; errata NOP
  1741  003A4E                     __end_of_division:
  1742                           	opt callstack 0
  1743                           
  1744 ;; *************** function ___lbdiv *****************
  1745 ;; Defined at:
  1746 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbdiv.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  dividend        1    wreg     unsigned char 
  1749 ;;  divisor         1    0[COMRAM] unsigned char 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  dividend        1    1[COMRAM] unsigned char 
  1752 ;;  quotient        1    3[COMRAM] unsigned char 
  1753 ;;  counter         1    2[COMRAM] unsigned char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      unsigned char 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2, status,0
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1763 ;;      Params:         1       0       0       0       0       0       0
  1764 ;;      Locals:         3       0       0       0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0       0       0
  1766 ;;      Totals:         4       0       0       0       0       0       0
  1767 ;;Total ram usage:        4 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_division
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text16
  1777  003C6A                     __ptext16:
  1778                           	opt callstack 0
  1779  003C6A                     ___lbdiv:
  1780                           	opt callstack 0
  1781  003C6A  FFFF               	dw	65535	; assembler added errata NOP
  1782                           
  1783                           ;incstack = 0
  1784                           ;___lbdiv@dividend stored from wreg
  1785  003C6C  6E53               	movwf	___lbdiv@dividend^0,c
  1786  003C6E  0E00               	movlw	0
  1787  003C70  6E55               	movwf	___lbdiv@quotient^0,c
  1788  003C72  5052               	movf	___lbdiv@divisor^0,w,c
  1789  003C74  B4D8               	btfsc	status,2,c
  1790  003C76  EF3F  F01E         	goto	u161
  1791  003C7A  EF42  F01E         	goto	u160
  1792  003C7E                     u161:
  1793  003C7E  FFFF               	dw	65535	; assembler added errata NOP
  1794  003C80  EF6C  F01E         	goto	l1120
  1795  003C84                     u160:
  1796  003C84  FFFF               	dw	65535	; assembler added errata NOP
  1797  003C86  0E01               	movlw	1
  1798  003C88  6E54               	movwf	___lbdiv@counter^0,c
  1799  003C8A  EF4B  F01E         	goto	l1108
  1800  003C8E                     l1104:
  1801  003C8E  FFFF               	dw	65535	; assembler added errata NOP
  1802  003C90  90D8               	bcf	status,0,c
  1803  003C92  3652               	rlcf	___lbdiv@divisor^0,f,c
  1804  003C94  2A54               	incf	___lbdiv@counter^0,f,c
  1805  003C96                     l1108:
  1806  003C96  FFFF               	dw	65535	; assembler added errata NOP
  1807  003C98  AE52               	btfss	___lbdiv@divisor^0,7,c
  1808  003C9A  EF51  F01E         	goto	u171
  1809  003C9E  EF54  F01E         	goto	u170
  1810  003CA2                     u171:
  1811  003CA2  FFFF               	dw	65535	; assembler added errata NOP
  1812  003CA4  EF47  F01E         	goto	l1104
  1813  003CA8                     u170:
  1814  003CA8  FFFF               	dw	65535	; assembler added errata NOP
  1815  003CAA                     l1110:
  1816  003CAA  FFFF               	dw	65535	; assembler added errata NOP
  1817  003CAC  90D8               	bcf	status,0,c
  1818  003CAE  3655               	rlcf	___lbdiv@quotient^0,f,c
  1819  003CB0  5052               	movf	___lbdiv@divisor^0,w,c
  1820  003CB2  5C53               	subwf	___lbdiv@dividend^0,w,c
  1821  003CB4  A0D8               	btfss	status,0,c
  1822  003CB6  EF5F  F01E         	goto	u181
  1823  003CBA  EF62  F01E         	goto	u180
  1824  003CBE                     u181:
  1825  003CBE  FFFF               	dw	65535	; assembler added errata NOP
  1826  003CC0  EF66  F01E         	goto	l1116
  1827  003CC4                     u180:
  1828  003CC4  FFFF               	dw	65535	; assembler added errata NOP
  1829  003CC6  5052               	movf	___lbdiv@divisor^0,w,c
  1830  003CC8  5E53               	subwf	___lbdiv@dividend^0,f,c
  1831  003CCA  8055               	bsf	___lbdiv@quotient^0,0,c
  1832  003CCC                     l1116:
  1833  003CCC  FFFF               	dw	65535	; assembler added errata NOP
  1834  003CCE  90D8               	bcf	status,0,c
  1835  003CD0  3252               	rrcf	___lbdiv@divisor^0,f,c
  1836  003CD2  2E54               	decfsz	___lbdiv@counter^0,f,c
  1837  003CD4  EF55  F01E         	goto	l1110
  1838  003CD8                     l1120:
  1839  003CD8  FFFF               	dw	65535	; assembler added errata NOP
  1840  003CDA  5055               	movf	___lbdiv@quotient^0,w,c
  1841  003CDC  0012               	return		;funcret
  1842  003CDE  FFFF               	dw	65535	; errata NOP
  1843  003CE0                     __end_of___lbdiv:
  1844                           	opt callstack 0
  1845                           
  1846 ;; *************** function _init_config *****************
  1847 ;; Defined at:
  1848 ;;		line 85 in file "main.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;		None
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;		None
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  1    wreg      void 
  1855 ;; Registers used:
  1856 ;;		wreg, status,2
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1862 ;;      Params:         0       0       0       0       0       0       0
  1863 ;;      Locals:         0       0       0       0       0       0       0
  1864 ;;      Temps:          0       0       0       0       0       0       0
  1865 ;;      Totals:         0       0       0       0       0       0       0
  1866 ;;Total ram usage:        0 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_main
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text17
  1876  003AAC                     __ptext17:
  1877                           	opt callstack 0
  1878  003AAC                     _init_config:
  1879                           	opt callstack 0
  1880  003AAC  FFFF               	dw	65535	; assembler added errata NOP
  1881  003AAE  0E06               	movlw	6
  1882  003AB0  6EC1               	movwf	193,c	;volatile
  1883  003AB2  0E00               	movlw	0
  1884  003AB4  6E93               	movwf	147,c	;volatile
  1885  003AB6  0E00               	movlw	0
  1886  003AB8  6E8A               	movwf	138,c	;volatile
  1887  003ABA  0E00               	movlw	0
  1888  003ABC  6E81               	movwf	129,c	;volatile
  1889  003ABE  0E00               	movlw	0
  1890  003AC0  6E94               	movwf	148,c	;volatile
  1891  003AC2  0E00               	movlw	0
  1892  003AC4  6E8B               	movwf	139,c	;volatile
  1893  003AC6  0E00               	movlw	0
  1894  003AC8  6E82               	movwf	130,c	;volatile
  1895  003ACA  6895               	setf	149,c	;volatile
  1896  003ACC  0E00               	movlw	0
  1897  003ACE  6E8C               	movwf	140,c	;volatile
  1898  003AD0  0E00               	movlw	0
  1899  003AD2  6E83               	movwf	131,c	;volatile
  1900  003AD4  6896               	setf	150,c	;volatile
  1901  003AD6  0E00               	movlw	0
  1902  003AD8  6E8D               	movwf	141,c	;volatile
  1903  003ADA  0E00               	movlw	0
  1904  003ADC  6E84               	movwf	132,c	;volatile
  1905  003ADE  0012               	return		;funcret
  1906  003AE0  FFFF               	dw	65535	; errata NOP
  1907  003AE2                     __end_of_init_config:
  1908                           	opt callstack 0
  1909  003AE2  FFFF               	dw	65535	; assembler added errata NOP
  1910                           
  1911                           	psect	rparam
  1912  0000                     tosu	equ	0xFFF
  1913                           tosh	equ	0xFFE
  1914                           tosl	equ	0xFFD
  1915                           stkptr	equ	0xFFC
  1916                           pclatu	equ	0xFFB
  1917                           pclath	equ	0xFFA
  1918                           pcl	equ	0xFF9
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           prodh	equ	0xFF4
  1924                           prodl	equ	0xFF3
  1925                           indf0	equ	0xFEF
  1926                           postinc0	equ	0xFEE
  1927                           postdec0	equ	0xFED
  1928                           preinc0	equ	0xFEC
  1929                           plusw0	equ	0xFEB
  1930                           fsr0h	equ	0xFEA
  1931                           fsr0l	equ	0xFE9
  1932                           wreg	equ	0xFE8
  1933                           indf1	equ	0xFE7
  1934                           postinc1	equ	0xFE6
  1935                           postdec1	equ	0xFE5
  1936                           preinc1	equ	0xFE4
  1937                           plusw1	equ	0xFE3
  1938                           fsr1h	equ	0xFE2
  1939                           fsr1l	equ	0xFE1
  1940                           bsr	equ	0xFE0
  1941                           indf2	equ	0xFDF
  1942                           postinc2	equ	0xFDE
  1943                           postdec2	equ	0xFDD
  1944                           preinc2	equ	0xFDC
  1945                           plusw2	equ	0xFDB
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        81
    BSS         0
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     30     116
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    visualizar@SoN	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_visualizar
    _visualizar->_tolower
    _tolower->_isupper
    _operar->_no_es_primo
    _no_es_primo->_module
    _module->___lbmod
    _nand->_and
    _division->___lbdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4966
                                             27 COMRAM     3     3      0
                        _init_config
                             _operar
                         _visualizar
 ---------------------------------------------------------------------------------
 (1) _visualizar                                          13     6      7    1852
                                             14 COMRAM    13     6      7
                            _tolower
 ---------------------------------------------------------------------------------
 (2) _tolower                                              8     6      2     412
                                              6 COMRAM     8     6      2
                            _isupper
 ---------------------------------------------------------------------------------
 (3) _isupper                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _operar                                               5     3      2    3112
                                             10 COMRAM     5     3      2
                                _and
                           _division
                             _module
                              _multi
                               _nand
                        _no_es_primo
                                 _or
                              _resta
                               _suma
                                _xor
 ---------------------------------------------------------------------------------
 (2) _xor                                                  4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _suma                                                 3     1      2     120
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resta                                                4     2      2     165
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _or                                                   4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _no_es_primo                                          2     0      2     529
                                              8 COMRAM     2     0      2
                             _module
 ---------------------------------------------------------------------------------
 (3) _module                                               4     2      2     431
                                              4 COMRAM     4     2      2
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     235
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _nand                                                 3     1      2     316
                                              4 COMRAM     3     1      2
                                _and
 ---------------------------------------------------------------------------------
 (3) _and                                                  4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _multi                                                3     1      2     120
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _division                                             4     2      2     381
                                              4 COMRAM     4     2      2
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     238
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_config
   _operar
     _and
     _division
       ___lbdiv
     _module
       ___lbmod
     _multi
     _nand
       _and
     _no_es_primo
       _module
         ___lbmod
     _or
     _resta
     _suma
     _xor
   _visualizar
     _tolower
       _isupper

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1E      74       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74      15        0.0%
DATA                 0      0      74       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Feb 24 08:36:03 2020

                                                               l82 3ADE  
                                                               l91 3D98  
                                                               l96 3FFA  
                                                               _or 39F8  
                                                      __CFG_OSC$XT 000000  
                                                              l111 39CC  
                                                              l120 3A4A  
                                                              l114 3A1C  
                                                              l123 3A7E  
                                                              l132 3A64  
                                                              l117 39E0  
                                                              l126 39F4  
                                                              l135 3A30  
                                                              l129 3A08  
                                                              l139 3B1C  
                                                              ?_or 0052  
                                                              l554 3B60  
                                                              l548 3CDC  
                                                              l823 3C64  
                                                              l818 3C5A  
                                                              l940 3ACA  
                                                              l829 3BA2  
                                                              l942 3AD4  
                                                              l938 3AAE  
                                                              u200 3B9C  
                                                              u210 3C2C  
                                                              u211 3C24  
                                                              u220 3C30  
                                                              u150 3B50  
                                                              u230 3C4A  
                                                              u151 3B4A  
                                                              u231 3C44  
                                                              u160 3C84  
                                                              u240 3B04  
                                                              u161 3C7E  
                                                              u241 3AFE  
                                                              u170 3CA8  
                                                              u250 3F76  
                                                              u171 3CA2  
                                                              u251 3F6E  
                                                              u307 3D78  
                                                              u180 3CC4  
                                                              u260 3F7A  
                                                              u181 3CBE  
                                                              u190 3B98  
                                                              u270 3D0A  
                                                              u191 3B90  
                                                              u271 3D04  
                                                              u280 3D96  
                                                              u281 3D90  
                                                              u297 3E52  
                                                     __CFG_BOR$OFF 000000  
                                                              _and 39E4  
                                                              _xor 3A20  
                                                              wreg 000FE8  
                                                      _tolower$633 005E  
                                                             ??_or 0054  
                                                     __CFG_LVP$OFF 000000  
                                                     __CFG_WDT$OFF 000000  
                                                             l1100 3C72  
                                                             l1110 3CAA  
                                                             l1102 3C86  
                                                             l1112 3CC6  
                                                             l1104 3C8E  
                                                             l1120 3CD8  
                                                             l1114 3CCA  
                                                             l1106 3C94  
                                                             l1210 3EE6  
                                                             l1116 3CCC  
                                                             l1108 3C96  
                                                             l1204 3ECE  
                                                             l1124 3B64  
                                                             l1132 3C36  
                                                             l1118 3CD2  
                                                             l1150 3A38  
                                                             l1142 3A10  
                                                             l1222 3F16  
                                                             l1134 3C4C  
                                                             l1152 3A44  
                                                             l1160 3A52  
                                                             l1080 3B3C  
                                                             l1240 3F5E  
                                                             l1216 3EFE  
                                                             l1128 3BFA  
                                                             l1146 39D4  
                                                             l1082 3B52  
                                                             l1074 3B26  
                                                             l1090 3A6C  
                                                             l1170 3B06  
                                                             l1138 39C2  
                                                             l1234 3F46  
                                                             l1084 3B56  
                                                             l1076 3B2E  
                                                             l1156 39FC  
                                                             l1164 3A24  
                                                             l1308 3F9A  
                                                             l1228 3F2E  
                                                             l1180 3E6E  
                                                             l1260 3CE6  
                                                             ?_and 0052  
                                                             l1094 39E8  
                                                             l1086 3B5E  
                                                             l1078 3B38  
                                                             l1174 3B12  
                                                             l1270 3D72  
                                                             l1262 3D0C  
                                                             l1254 3CE2  
                                                             l1168 3AE6  
                                                             l1192 3E9E  
                                                             l1248 3F84  
                                                             l1272 3D82  
                                                             l1264 3D3A  
                                                             l1280 3DA8  
                                                             l1098 3C6E  
                                                             l1186 3E86  
                                                             l1178 3E6A  
                                                             l1274 3D84  
                                                             l1266 3D66  
                                                             l1290 3DEC  
                                                             l1282 3DAE  
                                                             l1268 3D6C  
                                                             l1292 3E0C  
                                                             l1284 3DB4  
                                                             l1276 3D9C  
                                                             l1198 3EB6  
                                                             l1294 3E2C  
                                                             l1286 3DBA  
                                                             l1278 3DA2  
                                                             l1296 3E4C  
                                                             l1288 3DCC  
                                                             l1298 3E5E  
                                                             ?_xor 0052  
                                                             _LATB 000F8A  
                                                             _LATC 000F8B  
                                                             _LATD 000F8C  
                                                             _LATE 000F8D  
                                                     __CFG_PWRT$ON 000000  
                                                             _main 3D9C  
                                                             _nand 3A4E  
                                                             _oper 006F  
                                                             indf2 000FDF  
                                                             fsr1l 000FE1  
                                                             fsr2l 000FD9  
                                                             _suma 39BE  
                                                             prodh 000FF4  
                                                             prodl 000FF3  
                                                             start 0002  
                                                     ___param_bank 000000  
                                                            ??_and 0054  
                                                            ??_xor 0054  
                                                            ?_main 0052  
                                                            ?_nand 0056  
                                                  __end_of___lbdiv 3CE0  
                                                  __end_of___lbmod 3B64  
                                                            ?_suma 0052  
                                                     ?_init_config 0052  
                                                            _PORTB 000F81  
                                                            _PORTC 000F82  
                                                            _PORTD 000F83  
                                                            _PORTE 000F84  
                                                            _TRISB 000F93  
                                                            _TRISC 000F94  
                                                            _TRISD 000F95  
                                                            _TRISE 000F96  
                                                            _input 0072  
                                                            _resta 3A0C  
                                                            _multi 39D0  
                                                  __end_of_isupper 3BA6  
                                                            tablat 000FF5  
                                                            status 000FD8  
                                                  __end_of_tolower 3C6A  
                                                  ___lbdiv@divisor 0052  
                                                  ___lbdiv@counter 0054  
                                                     ?_no_es_primo 005A  
                                                  __initialization 3A82  
                                                     __end_of_main 3E66  
                                                     __end_of_nand 3A68  
                                                     __end_of_suma 39D0  
                                                           ??_main 006D  
                                                           ??_nand 0058  
                                                           ??_suma 0054  
                                                    __activetblptr 000002  
                                                           _ADCON1 000FC1  
                                                           ?_resta 0052  
                                                           ?_multi 0052  
                                                           _NUMERO 0001  
                                                 __end_of_division 3A4E  
                                                        ??___lbdiv 0053  
                                                        ??___lbmod 0053  
                                                           _oper_1 0071  
                                                           _oper_2 0070  
                                                           _module 3A68  
                                                           _operar 3E66  
                                                     __pdataCOMRAM 0001  
                                                           tblptrh 000FF7  
                                                        ??_isupper 0054  
                                                           tblptrl 000FF6  
                                                           tblptru 000FF8  
                                                        ??_tolower 005A  
                                                 ___lbdiv@dividend 0053  
                                                  ___lbmod@divisor 0052  
                                                       __accesstop 0080  
                                          __end_of__initialization 3AA2  
                                                  ___lbmod@counter 0054  
                                                    ___rparam_used 000001  
                                                   __pcstackCOMRAM 0052  
                                                    __end_of_resta 3A20  
                                                    __end_of_multi 39E4  
                                                 ___lbdiv@quotient 0055  
                                                       __end_of_or 3A0C  
                                             __size_of_init_config 0036  
                                               visualizar@position 0062  
                                                          ??_resta 0054  
                                                          ??_multi 0054  
                                                       __pnvCOMRAM 006E  
                                             __size_of_no_es_primo 003E  
                                                          ?_module 0056  
                                                          ?_operar 005C  
                                                   no_es_primo@num 005A  
                                                          _SIMBOLO 0031  
                                                        ?_division 0056  
                                                   visualizar@from 0063  
                                                          __Hparam 0000  
                                                          __Lparam 0000  
                                                          ___lbdiv 3C6A  
                                                          ___lbmod 3B22  
                                                          __pcinit 3A82  
                                                   _visualizar$149 006A  
                                                          __ramtop 0600  
                                                  __size_of_module 001A  
                                                  __size_of_operar 019A  
                                                          __ptext0 3D9C  
                                                          __ptext1 3CE0  
                                                          __ptext2 3BF8  
                                                          __ptext3 3B64  
                                                          __ptext4 3E66  
                                                          __ptext5 3A20  
                                                          __ptext6 39BE  
                                                          __ptext7 3A0C  
                                                          __ptext8 39F8  
                                                          __ptext9 3AE4  
                                                      resta@oper_1 0055  
                                                      resta@oper_2 0052  
                                                     __size_of_and 0014  
                                                     __size_of_xor 0014  
                                                          _isupper 3B64  
                                                          _tolower 3BF8  
                                             end_of_initialization 3AA2  
                                                       ??_division 0058  
                                                    __Lmediumconst 0000  
                                                          postdec1 000FE5  
                                                          postinc0 000FEE  
                                                      multi@oper_1 0054  
                                                      multi@oper_2 0052  
                                                 ___lbmod@dividend 0053  
                                                      ___lbmod@rem 0055  
                                                       _visualizar 3CE0  
                                                       nand@oper_1 0058  
                                                       nand@oper_2 0056  
                                                    __pidataCOMRAM 3BA7  
                                                   __end_of_module 3A82  
                                                   __end_of_operar 4000  
                                              start_initialization 3A82  
                                                 visualizar@enable 0065  
                                                   division@oper_1 0058  
                                                   division@oper_2 0056  
                                                      __end_of_and 39F8  
                                                      __end_of_xor 3A34  
                                                   division@result 0059  
                                                         ??_module 0058  
                                                         ??_operar 005E  
                                                    ??_init_config 0052  
                                                __size_of_division 001A  
                                                      ?_visualizar 0060  
                                                    ??_no_es_primo 005C  
                                                         ?___lbdiv 0052  
                                                         ?___lbmod 0052  
                                                      visualizar@x 006C  
                                                     module@oper_1 0059  
                                                     module@oper_2 0056  
                                                        and@oper_1 0055  
                                                        and@oper_2 0052  
                                                    visualizar@SoN 0060  
                                                         ?_isupper 0052  
                                                       operar@oper 0060  
                                                         ?_tolower 0058  
                                              __end_of_init_config 3AE2  
                                                   __size_of_resta 0014  
                                                   __size_of_multi 0014  
                                                      __size_of_or 0014  
                                                        _resultado 006E  
                                              __end_of_no_es_primo 3B22  
                                              __size_of_visualizar 00BC  
                                                        copy_data0 3A96  
                                                       suma@oper_1 0054  
                                                       suma@oper_2 0052  
                                                         __Hrparam 0000  
                                                         __Lrparam 0000  
                                                 __size_of___lbdiv 0076  
                                                 __size_of___lbmod 0042  
                                                     operar@oper_1 005C  
                                                     operar@oper_2 005D  
                                                      _init_config 3AAC  
                                                         __ptext10 3A68  
                                                         __ptext11 3B22  
                                                         __ptext12 3A4E  
                                                         __ptext13 39E4  
                                                         __ptext14 39D0  
                                                         __ptext15 3A34  
                                                         __ptext16 3C6A  
                                                         __ptext17 3AAC  
                                                 __size_of_isupper 0042  
                                                         _division 3A34  
                                                 __size_of_tolower 0072  
                                                    __size_of_main 00CA  
                                                    __size_of_nand 001A  
                                                    __size_of_suma 0012  
                                                      _no_es_primo 3AE4  
                                                         or@oper_1 0055  
                                                         or@oper_2 0052  
                                                        xor@oper_1 0055  
                                                        xor@oper_2 0052  
                                                     ??_visualizar 0067  
                                                         isupper@c 0052  
                                                         tolower@c 0058  
                                               __end_of_visualizar 3D9C  
