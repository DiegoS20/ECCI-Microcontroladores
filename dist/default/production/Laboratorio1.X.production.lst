

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Feb 24 08:25:13 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 2.10
    31                           ; Generated 31/07/2019 GMT
    32                           ; 
    33                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F452 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  003BBF                     __pidataCOMRAM:
    67                           	opt callstack 0
    68                           
    69                           ;initializer for _NUMERO
    70  003BBF  F8                 	db	248
    71  003BC0  88                 	db	136
    72  003BC1  F8                 	db	248
    73  003BC2  40                 	db	64
    74  003BC3  F8                 	db	248
    75  003BC4  00                 	db	0
    76  003BC5  B8                 	db	184
    77  003BC6  A8                 	db	168
    78  003BC7  E8                 	db	232
    79  003BC8  A8                 	db	168
    80  003BC9  A8                 	db	168
    81  003BCA  F8                 	db	248
    82  003BCB  E0                 	db	224
    83  003BCC  20                 	db	32
    84  003BCD  F8                 	db	248
    85  003BCE  E8                 	db	232
    86  003BCF  A8                 	db	168
    87  003BD0  B8                 	db	184
    88  003BD1  F8                 	db	248
    89  003BD2  A8                 	db	168
    90  003BD3  B8                 	db	184
    91  003BD4  80                 	db	128
    92  003BD5  80                 	db	128
    93  003BD6  F8                 	db	248
    94  003BD7  F8                 	db	248
    95  003BD8  A8                 	db	168
    96  003BD9  F8                 	db	248
    97  003BDA  E0                 	db	224
    98  003BDB  A0                 	db	160
    99  003BDC  F8                 	db	248
   100  003BDD  F8                 	db	248
   101  003BDE  A0                 	db	160
   102  003BDF  F8                 	db	248
   103  003BE0  F8                 	db	248
   104  003BE1  28                 	db	40
   105  003BE2  38                 	db	56
   106  003BE3  F8                 	db	248
   107  003BE4  88                 	db	136
   108  003BE5  88                 	db	136
   109  003BE6  38                 	db	56
   110  003BE7  28                 	db	40
   111  003BE8  F8                 	db	248
   112  003BE9  F8                 	db	248
   113  003BEA  A8                 	db	168
   114  003BEB  A8                 	db	168
   115  003BEC  F8                 	db	248
   116  003BED  A0                 	db	160
   117  003BEE  A0                 	db	160
   118                           
   119                           ;initializer for _SIMBOLO
   120  003BEF  20                 	db	32
   121  003BF0  70                 	db	112
   122  003BF1  20                 	db	32
   123  003BF2  20                 	db	32
   124  003BF3  20                 	db	32
   125  003BF4  20                 	db	32
   126  003BF5  50                 	db	80
   127  003BF6  20                 	db	32
   128  003BF7  50                 	db	80
   129  003BF8  10                 	db	16
   130  003BF9  20                 	db	32
   131  003BFA  40                 	db	64
   132  003BFB  70                 	db	112
   133  003BFC  20                 	db	32
   134  003BFD  70                 	db	112
   135  003BFE  20                 	db	32
   136  003BFF  40                 	db	64
   137  003C00  20                 	db	32
   138  003C01  40                 	db	64
   139  003C02  20                 	db	32
   140  003C03  40                 	db	64
   141  003C04  50                 	db	80
   142  003C05  60                 	db	96
   143  003C06  50                 	db	80
   144  003C07  60                 	db	96
   145  003C08  50                 	db	80
   146  003C09  60                 	db	96
   147  003C0A  80                 	db	128
   148  003C0B  F8                 	db	248
   149  003C0C  80                 	db	128
   150  003C0D  50                 	db	80
   151  003C0E  50                 	db	80
   152  003C0F  50                 	db	80
   153                           
   154                           	psect	nvCOMRAM
   155  00006E                     __pnvCOMRAM:
   156                           	opt callstack 0
   157  00006E                     _resultado:
   158                           	opt callstack 0
   159  00006E                     	ds	1
   160  00006F                     _oper:
   161                           	opt callstack 0
   162  00006F                     	ds	1
   163  000070                     _oper_2:
   164                           	opt callstack 0
   165  000070                     	ds	1
   166  000071                     _oper_1:
   167                           	opt callstack 0
   168  000071                     	ds	1
   169  000072                     _input:
   170                           	opt callstack 0
   171  000072                     	ds	1
   172  0000                     _PORTE	set	3972
   173  0000                     _LATE	set	3981
   174  0000                     _TRISE	set	3990
   175  0000                     _PORTD	set	3971
   176  0000                     _LATD	set	3980
   177  0000                     _TRISD	set	3989
   178  0000                     _LATC	set	3979
   179  0000                     _TRISC	set	3988
   180  0000                     _LATB	set	3978
   181  0000                     _TRISB	set	3987
   182  0000                     _ADCON1	set	4033
   183  0000                     _PORTC	set	3970
   184  0000                     _PORTB	set	3969
   185                           
   186                           ; #config settings
   187  0000                     
   188                           	psect	cinit
   189  003AD8                     __pcinit:
   190                           	opt callstack 0
   191  003AD8                     start_initialization:
   192                           	opt callstack 0
   193  003AD8                     __initialization:
   194                           	opt callstack 0
   195                           
   196                           ; Initialize objects allocated to COMRAM (81 bytes)
   197                           ; load TBLPTR registers with __pidataCOMRAM
   198  003AD8  0EBF               	movlw	low __pidataCOMRAM
   199  003ADA  6EF6               	movwf	tblptrl,c
   200  003ADC  0E3B               	movlw	high __pidataCOMRAM
   201  003ADE  6EF7               	movwf	tblptrh,c
   202  003AE0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   203  003AE2  6EF8               	movwf	tblptru,c
   204  003AE4  EE00  F001         	lfsr	0,__pdataCOMRAM
   205  003AE8  EE10 F051          	lfsr	1,81
   206  003AEC                     copy_data0:
   207  003AEC  0009               	tblrd		*+
   208  003AEE  CFF5 FFEE          	movff	tablat,postinc0
   209  003AF2  50E5               	movf	postdec1,w,c
   210  003AF4  50E1               	movf	fsr1l,w,c
   211  003AF6  E1FA               	bnz	copy_data0
   212  003AF8                     end_of_initialization:
   213                           	opt callstack 0
   214  003AF8                     __end_of__initialization:
   215                           	opt callstack 0
   216  003AF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   217  003AFA  6EF8               	movwf	tblptru,c
   218  003AFC  0100               	movlb	0
   219  003AFE  EFDA  F01E         	goto	_main	;jump to C main() function
   220                           
   221                           	psect	dataCOMRAM
   222  000001                     __pdataCOMRAM:
   223                           	opt callstack 0
   224  000001                     _NUMERO:
   225                           	opt callstack 0
   226  000001                     	ds	48
   227  000031                     _SIMBOLO:
   228                           	opt callstack 0
   229  000031                     	ds	33
   230                           
   231                           	psect	cstackCOMRAM
   232  000052                     __pcstackCOMRAM:
   233                           	opt callstack 0
   234  000052                     ?_suma:
   235                           	opt callstack 0
   236  000052                     ?_resta:
   237                           	opt callstack 0
   238  000052                     ?_multi:
   239                           	opt callstack 0
   240  000052                     ?_and:
   241                           	opt callstack 0
   242  000052                     ?_or:
   243                           	opt callstack 0
   244  000052                     ?_xor:
   245                           	opt callstack 0
   246  000052                     ?_isupper:
   247                           	opt callstack 0
   248  000052                     suma@oper_2:
   249                           	opt callstack 0
   250  000052                     resta@oper_2:
   251                           	opt callstack 0
   252  000052                     multi@oper_2:
   253                           	opt callstack 0
   254  000052                     and@oper_2:
   255                           	opt callstack 0
   256  000052                     or@oper_2:
   257                           	opt callstack 0
   258  000052                     xor@oper_2:
   259                           	opt callstack 0
   260  000052                     ___lbdiv@divisor:
   261                           	opt callstack 0
   262  000052                     ___lbmod@divisor:
   263                           	opt callstack 0
   264  000052                     isupper@c:
   265                           	opt callstack 0
   266                           
   267                           ; 2 bytes @ 0x0
   268  000052                     	ds	1
   269  000053                     ___lbdiv@dividend:
   270                           	opt callstack 0
   271  000053                     ___lbmod@dividend:
   272                           	opt callstack 0
   273                           
   274                           ; 1 bytes @ 0x1
   275  000053                     	ds	1
   276  000054                     ??_and:
   277  000054                     ??_or:
   278  000054                     ??_xor:
   279  000054                     ??_isupper:
   280  000054                     suma@oper_1:
   281                           	opt callstack 0
   282  000054                     multi@oper_1:
   283                           	opt callstack 0
   284  000054                     ___lbdiv@counter:
   285                           	opt callstack 0
   286  000054                     ___lbmod@counter:
   287                           	opt callstack 0
   288                           
   289                           ; 1 bytes @ 0x2
   290  000054                     	ds	1
   291  000055                     resta@oper_1:
   292                           	opt callstack 0
   293  000055                     and@oper_1:
   294                           	opt callstack 0
   295  000055                     or@oper_1:
   296                           	opt callstack 0
   297  000055                     xor@oper_1:
   298                           	opt callstack 0
   299  000055                     ___lbdiv@quotient:
   300                           	opt callstack 0
   301  000055                     ___lbmod@rem:
   302                           	opt callstack 0
   303                           
   304                           ; 1 bytes @ 0x3
   305  000055                     	ds	1
   306  000056                     ?_division:
   307                           	opt callstack 0
   308  000056                     ?_module:
   309                           	opt callstack 0
   310  000056                     ?_nand:
   311                           	opt callstack 0
   312  000056                     division@oper_2:
   313                           	opt callstack 0
   314  000056                     module@oper_2:
   315                           	opt callstack 0
   316  000056                     nand@oper_2:
   317                           	opt callstack 0
   318                           
   319                           ; 1 bytes @ 0x4
   320  000056                     	ds	2
   321  000058                     ??_module:
   322  000058                     ?_tolower:
   323                           	opt callstack 0
   324  000058                     division@oper_1:
   325                           	opt callstack 0
   326  000058                     nand@oper_1:
   327                           	opt callstack 0
   328  000058                     tolower@c:
   329                           	opt callstack 0
   330                           
   331                           ; 2 bytes @ 0x6
   332  000058                     	ds	1
   333  000059                     division@result:
   334                           	opt callstack 0
   335  000059                     module@oper_1:
   336                           	opt callstack 0
   337                           
   338                           ; 1 bytes @ 0x7
   339  000059                     	ds	1
   340  00005A                     ??_tolower:
   341  00005A                     ?_operar:
   342                           	opt callstack 0
   343  00005A                     operar@oper_1:
   344                           	opt callstack 0
   345                           
   346                           ; 1 bytes @ 0x8
   347  00005A                     	ds	1
   348  00005B                     operar@oper_2:
   349                           	opt callstack 0
   350                           
   351                           ; 1 bytes @ 0x9
   352  00005B                     	ds	1
   353  00005C                     ??_operar:
   354                           
   355                           ; 1 bytes @ 0xA
   356  00005C                     	ds	2
   357  00005E                     operar@oper:
   358                           	opt callstack 0
   359  00005E                     _tolower$626:
   360                           	opt callstack 0
   361                           
   362                           ; 2 bytes @ 0xC
   363  00005E                     	ds	2
   364  000060                     visualizar@SoN:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0xE
   368  000060                     	ds	2
   369  000062                     visualizar@position:
   370                           	opt callstack 0
   371                           
   372                           ; 1 bytes @ 0x10
   373  000062                     	ds	1
   374  000063                     visualizar@from:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0x11
   378  000063                     	ds	2
   379  000065                     visualizar@enable:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0x13
   383  000065                     	ds	2
   384  000067                     ??_visualizar:
   385                           
   386                           ; 1 bytes @ 0x15
   387  000067                     	ds	3
   388  00006A                     _visualizar$144:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x18
   392  00006A                     	ds	2
   393  00006C                     visualizar@x:
   394                           	opt callstack 0
   395                           
   396                           ; 1 bytes @ 0x1A
   397  00006C                     	ds	1
   398  00006D                     ??_main:
   399                           
   400                           ; 1 bytes @ 0x1B
   401  00006D                     	ds	1
   402                           
   403 ;;
   404 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   405 ;;
   406 ;; *************** function _main *****************
   407 ;; Defined at:
   408 ;;		line 63 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  es_menos        2    0        int 
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1    wreg      void 
   415 ;; Registers used:
   416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   417 ;; Tracked objects:
   418 ;;		On entry : 0/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   422 ;;      Params:         0       0       0       0       0       0       0
   423 ;;      Locals:         2       0       0       0       0       0       0
   424 ;;      Temps:          1       0       0       0       0       0       0
   425 ;;      Totals:         3       0       0       0       0       0       0
   426 ;;Total ram usage:        3 bytes
   427 ;; Hardware stack levels required when called:    3
   428 ;; This function calls:
   429 ;;		_init_config
   430 ;;		_operar
   431 ;;		_visualizar
   432 ;; This function is called by:
   433 ;;		Startup code after reset
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           	psect	text0
   438  003DB4                     __ptext0:
   439                           	opt callstack 0
   440  003DB4                     _main:
   441                           	opt callstack 28
   442  003DB4  FFFF               	dw	65535	; assembler added errata NOP
   443                           
   444                           ;main.c: 65: void init_config(void) {
   445  003DB6  EC81  F01D         	call	_init_config	;wreg free
   446  003DBA                     l1240:
   447  003DBA  FFFF               	dw	65535	; assembler added errata NOP
   448                           
   449                           ;main.c: 67:     TRISB = 0B00000000;
   450  003DBC  CF81 F072          	movff	3969,_input	;volatile
   451  003DC0                     
   452                           ;main.c: 68:     LATB = 0;
   453  003DC0  3872               	swapf	_input^0,w,c
   454  003DC2  0B0F               	andlw	15
   455  003DC4  6E71               	movwf	_oper_1^0,c
   456  003DC6                     
   457                           ;main.c: 69:     PORTB = 0;
   458  003DC6  5072               	movf	_input^0,w,c
   459  003DC8  0B0F               	andlw	15
   460  003DCA  6E70               	movwf	_oper_2^0,c
   461  003DCC                     
   462                           ;main.c: 70:     TRISC = 0B00000000;
   463  003DCC  5082               	movf	130,w,c	;volatile
   464  003DCE  0B0F               	andlw	15
   465  003DD0  6E6F               	movwf	_oper^0,c
   466  003DD2                     
   467                           ;main.c: 71:     LATC = 0;
   468  003DD2  C071  F05A         	movff	_oper_1,operar@oper_1
   469  003DD6  C070  F05B         	movff	_oper_2,operar@oper_2
   470  003DDA  506F               	movf	_oper^0,w,c
   471  003DDC  EC3F  F01F         	call	_operar
   472  003DE0  505A               	movf	?_operar^0,w,c
   473  003DE2  6E6E               	movwf	_resultado^0,c
   474  003DE4                     
   475                           ;main.c: 72:     PORTC = 0;
   476  003DE4  0E6E               	movlw	110
   477  003DE6  6E60               	movwf	visualizar@SoN^0,c
   478  003DE8  0E00               	movlw	0
   479  003DEA  6E61               	movwf	(visualizar@SoN+1)^0,c
   480  003DEC  C071  F062         	movff	_oper_1,visualizar@position
   481  003DF0  0E00               	movlw	0
   482  003DF2  6E64               	movwf	(visualizar@from+1)^0,c
   483  003DF4  0E00               	movlw	0
   484  003DF6  6E63               	movwf	visualizar@from^0,c
   485  003DF8  0E00               	movlw	0
   486  003DFA  6E66               	movwf	(visualizar@enable+1)^0,c
   487  003DFC  0E01               	movlw	1
   488  003DFE  6E65               	movwf	visualizar@enable^0,c
   489  003E00  EC7C  F01E         	call	_visualizar	;wreg free
   490  003E04                     
   491                           ;main.c: 73:     TRISD = 0B11111111;
   492  003E04  0E73               	movlw	115
   493  003E06  6E60               	movwf	visualizar@SoN^0,c
   494  003E08  0E00               	movlw	0
   495  003E0A  6E61               	movwf	(visualizar@SoN+1)^0,c
   496  003E0C  C06F  F062         	movff	_oper,visualizar@position
   497  003E10  0E00               	movlw	0
   498  003E12  6E64               	movwf	(visualizar@from+1)^0,c
   499  003E14  0E04               	movlw	4
   500  003E16  6E63               	movwf	visualizar@from^0,c
   501  003E18  0E00               	movlw	0
   502  003E1A  6E66               	movwf	(visualizar@enable+1)^0,c
   503  003E1C  0E01               	movlw	1
   504  003E1E  6E65               	movwf	visualizar@enable^0,c
   505  003E20  EC7C  F01E         	call	_visualizar	;wreg free
   506  003E24                     
   507                           ;main.c: 74:     LATD = 0;
   508  003E24  0E6E               	movlw	110
   509  003E26  6E60               	movwf	visualizar@SoN^0,c
   510  003E28  0E00               	movlw	0
   511  003E2A  6E61               	movwf	(visualizar@SoN+1)^0,c
   512  003E2C  C070  F062         	movff	_oper_2,visualizar@position
   513  003E30  0E00               	movlw	0
   514  003E32  6E64               	movwf	(visualizar@from+1)^0,c
   515  003E34  0E00               	movlw	0
   516  003E36  6E63               	movwf	visualizar@from^0,c
   517  003E38  0E00               	movlw	0
   518  003E3A  6E66               	movwf	(visualizar@enable+1)^0,c
   519  003E3C  0E02               	movlw	2
   520  003E3E  6E65               	movwf	visualizar@enable^0,c
   521  003E40  EC7C  F01E         	call	_visualizar	;wreg free
   522  003E44                     
   523                           ;main.c: 75:     PORTD = 0;
   524  003E44  0E73               	movlw	115
   525  003E46  6E60               	movwf	visualizar@SoN^0,c
   526  003E48  0E00               	movlw	0
   527  003E4A  6E61               	movwf	(visualizar@SoN+1)^0,c
   528  003E4C  0E0B               	movlw	11
   529  003E4E  6E62               	movwf	visualizar@position^0,c
   530  003E50  0E00               	movlw	0
   531  003E52  6E64               	movwf	(visualizar@from+1)^0,c
   532  003E54  0E04               	movlw	4
   533  003E56  6E63               	movwf	visualizar@from^0,c
   534  003E58  0E00               	movlw	0
   535  003E5A  6E66               	movwf	(visualizar@enable+1)^0,c
   536  003E5C  0E02               	movlw	2
   537  003E5E  6E65               	movwf	visualizar@enable^0,c
   538  003E60  EC7C  F01E         	call	_visualizar	;wreg free
   539  003E64                     
   540                           ;main.c: 76:     TRISE = 0B11111111;
   541  003E64  0E0A               	movlw	10
   542  003E66  6E6D               	movwf	??_main^0,c
   543  003E68  0EBE               	movlw	190
   544  003E6A                     u277:
   545  003E6A  FFFF               	dw	65535	; errata NOP
   546  003E6C  2EE8               	decfsz	wreg,f,c
   547  003E6E  D7FD               	bra	u277
   548  003E70  2E6D               	decfsz	??_main^0,f,c
   549  003E72  D7FB               	bra	u277
   550  003E74  D000               	nop2	
   551  003E76                     
   552                           ;main.c: 78:     PORTE = 0;
   553  003E76  EFDD  F01E         	goto	l1240
   554  003E7A  EF01  F000         	goto	start
   555  003E7E                     __end_of_main:
   556                           	opt callstack 0
   557                           
   558 ;; *************** function _visualizar *****************
   559 ;; Defined at:
   560 ;;		line 108 in file "main.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;  SoN             2   14[COMRAM] PTR unsigned char 
   563 ;;		 -> RAM(1535), 
   564 ;;  position        1   16[COMRAM] unsigned char 
   565 ;;  from            2   17[COMRAM] int 
   566 ;;  enable          2   19[COMRAM] int 
   567 ;; Auto vars:     Size  Location     Type
   568 ;;  x               1   26[COMRAM] unsigned char 
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   578 ;;      Params:         7       0       0       0       0       0       0
   579 ;;      Locals:         3       0       0       0       0       0       0
   580 ;;      Temps:          3       0       0       0       0       0       0
   581 ;;      Totals:        13       0       0       0       0       0       0
   582 ;;Total ram usage:       13 bytes
   583 ;; Hardware stack levels used:    1
   584 ;; Hardware stack levels required when called:    2
   585 ;; This function calls:
   586 ;;		_tolower
   587 ;; This function is called by:
   588 ;;		_main
   589 ;; This function uses a non-reentrant model
   590 ;;
   591                           
   592                           	psect	text1
   593  003CF8                     __ptext1:
   594                           	opt callstack 0
   595  003CF8                     _visualizar:
   596                           	opt callstack 0
   597  003CF8  FFFF               	dw	65535	; assembler added errata NOP
   598  003CFA                     
   599                           ;main.c: 110:     for (char x = 0; x < 3; x++) {
   600  003CFA  0E00               	movlw	0
   601  003CFC  6E6C               	movwf	visualizar@x^0,c
   602  003CFE                     l1222:
   603  003CFE  FFFF               	dw	65535	; assembler added errata NOP
   604                           
   605                           ;main.c: 111:         LATD = tolower((int)SoN) == 's' ? SIMBOLO[position][x] : NUMERO[po
      +                          sition][x];
   606  003D00  C060  F058         	movff	visualizar@SoN,tolower@c
   607  003D04  C061  F059         	movff	visualizar@SoN+1,tolower@c+1
   608  003D08  EC08  F01E         	call	_tolower	;wreg free
   609  003D0C  0E73               	movlw	115
   610  003D0E  1858               	xorwf	?_tolower^0,w,c
   611  003D10  1059               	iorwf	(?_tolower+1)^0,w,c
   612  003D12  B4D8               	btfsc	status,2,c
   613  003D14  EF8E  F01E         	goto	u251
   614  003D18  EF91  F01E         	goto	u250
   615  003D1C                     u251:
   616  003D1C  FFFF               	dw	65535	; assembler added errata NOP
   617  003D1E  EFA9  F01E         	goto	l1226
   618  003D22                     u250:
   619  003D22  FFFF               	dw	65535	; assembler added errata NOP
   620  003D24  5062               	movf	visualizar@position^0,w,c
   621  003D26  0D03               	mullw	3
   622  003D28  0E01               	movlw	low _NUMERO
   623  003D2A  6E67               	movwf	??_visualizar^0,c
   624  003D2C  0E00               	movlw	high _NUMERO
   625  003D2E  6E68               	movwf	(??_visualizar+1)^0,c
   626  003D30  50F3               	movf	243,w,c
   627  003D32  2667               	addwf	??_visualizar^0,f,c
   628  003D34  50F4               	movf	244,w,c
   629  003D36  2268               	addwfc	(??_visualizar+1)^0,f,c
   630  003D38  506C               	movf	visualizar@x^0,w,c
   631  003D3A  2467               	addwf	??_visualizar^0,w,c
   632  003D3C  6ED9               	movwf	fsr2l,c
   633  003D3E  0E00               	movlw	0
   634  003D40  2068               	addwfc	(??_visualizar+1)^0,w,c
   635  003D42  6EDA               	movwf	fsr2h,c
   636  003D44  50DF               	movf	indf2,w,c
   637  003D46  6E69               	movwf	(??_visualizar+2)^0,c
   638  003D48  5069               	movf	(??_visualizar+2)^0,w,c
   639  003D4A  6E6A               	movwf	_visualizar$144^0,c
   640  003D4C  6A6B               	clrf	(_visualizar$144+1)^0,c
   641  003D4E  EFBF  F01E         	goto	l1228
   642  003D52                     l1226:
   643  003D52  FFFF               	dw	65535	; assembler added errata NOP
   644  003D54  5062               	movf	visualizar@position^0,w,c
   645  003D56  0D03               	mullw	3
   646  003D58  0E31               	movlw	low _SIMBOLO
   647  003D5A  6E67               	movwf	??_visualizar^0,c
   648  003D5C  0E00               	movlw	high _SIMBOLO
   649  003D5E  6E68               	movwf	(??_visualizar+1)^0,c
   650  003D60  50F3               	movf	243,w,c
   651  003D62  2667               	addwf	??_visualizar^0,f,c
   652  003D64  50F4               	movf	244,w,c
   653  003D66  2268               	addwfc	(??_visualizar+1)^0,f,c
   654  003D68  506C               	movf	visualizar@x^0,w,c
   655  003D6A  2467               	addwf	??_visualizar^0,w,c
   656  003D6C  6ED9               	movwf	fsr2l,c
   657  003D6E  0E00               	movlw	0
   658  003D70  2068               	addwfc	(??_visualizar+1)^0,w,c
   659  003D72  6EDA               	movwf	fsr2h,c
   660  003D74  50DF               	movf	indf2,w,c
   661  003D76  6E69               	movwf	(??_visualizar+2)^0,c
   662  003D78  5069               	movf	(??_visualizar+2)^0,w,c
   663  003D7A  6E6A               	movwf	_visualizar$144^0,c
   664  003D7C  6A6B               	clrf	(_visualizar$144+1)^0,c
   665  003D7E                     l1228:
   666  003D7E  FFFF               	dw	65535	; assembler added errata NOP
   667  003D80  C06A  FF8C         	movff	_visualizar$144,3980	;volatile
   668  003D84                     
   669                           ;main.c: 112:         LATE = x + from;
   670  003D84  506C               	movf	visualizar@x^0,w,c
   671  003D86  2463               	addwf	visualizar@from^0,w,c
   672  003D88  6E8D               	movwf	141,c	;volatile
   673  003D8A                     
   674                           ;main.c: 113:         _delay((unsigned long)((5)*(4000000/4000.0)));
   675  003D8A  0E05               	movlw	5
   676  003D8C  6E67               	movwf	??_visualizar^0,c
   677  003D8E  0EDF               	movlw	223
   678  003D90                     u287:
   679  003D90  FFFF               	dw	65535	; errata NOP
   680  003D92  2EE8               	decfsz	wreg,f,c
   681  003D94  D7FD               	bra	u287
   682  003D96  2E67               	decfsz	??_visualizar^0,f,c
   683  003D98  D7FB               	bra	u287
   684  003D9A                     
   685                           ;main.c: 114:     }
   686  003D9A  2A6C               	incf	visualizar@x^0,f,c
   687  003D9C  0E02               	movlw	2
   688  003D9E  646C               	cpfsgt	visualizar@x^0,c
   689  003DA0  EFD4  F01E         	goto	u261
   690  003DA4  EFD7  F01E         	goto	u260
   691  003DA8                     u261:
   692  003DA8  FFFF               	dw	65535	; assembler added errata NOP
   693  003DAA  EF7F  F01E         	goto	l1222
   694  003DAE                     u260:
   695  003DAE  FFFF               	dw	65535	; assembler added errata NOP
   696  003DB0  0012               	return		;funcret
   697  003DB2  FFFF               	dw	65535	; errata NOP
   698  003DB4                     __end_of_visualizar:
   699                           	opt callstack 0
   700                           
   701 ;; *************** function _tolower *****************
   702 ;; Defined at:
   703 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\tolower.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;  c               2    6[COMRAM] int 
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  2    6[COMRAM] int 
   710 ;; Registers used:
   711 ;;		wreg, status,2, status,0
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   717 ;;      Params:         2       0       0       0       0       0       0
   718 ;;      Locals:         2       0       0       0       0       0       0
   719 ;;      Temps:          4       0       0       0       0       0       0
   720 ;;      Totals:         8       0       0       0       0       0       0
   721 ;;Total ram usage:        8 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; Hardware stack levels required when called:    1
   724 ;; This function calls:
   725 ;;		_isupper
   726 ;; This function is called by:
   727 ;;		_visualizar
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text2
   732  003C10                     __ptext2:
   733                           	opt callstack 0
   734  003C10                     _tolower:
   735                           	opt callstack 0
   736  003C10  FFFF               	dw	65535	; assembler added errata NOP
   737  003C12  0EBF               	movlw	191
   738  003C14  6E5A               	movwf	??_tolower^0,c
   739  003C16  0EFF               	movlw	255
   740  003C18  6E5B               	movwf	(??_tolower+1)^0,c
   741  003C1A  C058  F05C         	movff	tolower@c,??_tolower+2
   742  003C1E  C059  F05D         	movff	tolower@c+1,??_tolower+3
   743  003C22  505A               	movf	??_tolower^0,w,c
   744  003C24  265C               	addwf	(??_tolower+2)^0,f,c
   745  003C26  505B               	movf	(??_tolower+1)^0,w,c
   746  003C28  225D               	addwfc	(??_tolower+3)^0,f,c
   747  003C2A  505D               	movf	(??_tolower+3)^0,w,c
   748  003C2C  E10B               	bnz	u200
   749  003C2E  0E1A               	movlw	26
   750  003C30  5C5C               	subwf	(??_tolower+2)^0,w,c
   751  003C32  A0D8               	btfss	status,0,c
   752  003C34  EF1E  F01E         	goto	u201
   753  003C38  EF22  F01E         	goto	u200
   754  003C3C                     u201:
   755  003C3C  FFFF               	dw	65535	; assembler added errata NOP
   756  003C3E  0E01               	movlw	1
   757  003C40  EF24  F01E         	goto	u210
   758  003C44                     u200:
   759  003C44  FFFF               	dw	65535	; assembler added errata NOP
   760  003C46  0E00               	movlw	0
   761  003C48                     u210:
   762  003C48  FFFF               	dw	65535	; assembler added errata NOP
   763  003C4A  6E5E               	movwf	_tolower$626^0,c
   764  003C4C  6A5F               	clrf	(_tolower$626+1)^0,c
   765  003C4E  505E               	movf	_tolower$626^0,w,c
   766  003C50  105F               	iorwf	(_tolower$626+1)^0,w,c
   767  003C52  B4D8               	btfsc	status,2,c
   768  003C54  EF2E  F01E         	goto	u221
   769  003C58  EF31  F01E         	goto	u220
   770  003C5C                     u221:
   771  003C5C  FFFF               	dw	65535	; assembler added errata NOP
   772  003C5E  EF39  F01E         	goto	l812
   773  003C62                     u220:
   774  003C62  FFFF               	dw	65535	; assembler added errata NOP
   775  003C64  0E20               	movlw	32
   776  003C66  1058               	iorwf	tolower@c^0,w,c
   777  003C68  6E58               	movwf	?_tolower^0,c
   778  003C6A  5059               	movf	(tolower@c+1)^0,w,c
   779  003C6C  6E59               	movwf	(?_tolower+1)^0,c
   780  003C6E  EF3E  F01E         	goto	l817
   781  003C72                     l812:
   782  003C72  FFFF               	dw	65535	; assembler added errata NOP
   783  003C74  C058  F058         	movff	tolower@c,?_tolower
   784  003C78  C059  F059         	movff	tolower@c+1,?_tolower+1
   785  003C7C                     l817:
   786  003C7C  FFFF               	dw	65535	; assembler added errata NOP
   787  003C7E  0012               	return		;funcret
   788  003C80  FFFF               	dw	65535	; errata NOP
   789  003C82                     __end_of_tolower:
   790                           	opt callstack 0
   791                           
   792 ;; *************** function _isupper *****************
   793 ;; Defined at:
   794 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isupper.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  c               2    0[COMRAM] int 
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;                  2    0[COMRAM] int 
   801 ;; Registers used:
   802 ;;		wreg, status,2, status,0
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   808 ;;      Params:         2       0       0       0       0       0       0
   809 ;;      Locals:         0       0       0       0       0       0       0
   810 ;;      Temps:          4       0       0       0       0       0       0
   811 ;;      Totals:         6       0       0       0       0       0       0
   812 ;;Total ram usage:        6 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_tolower
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text3
   822  003B7C                     __ptext3:
   823                           	opt callstack 0
   824  003B7C                     _isupper:
   825                           	opt callstack 28
   826  003B7C  FFFF               	dw	65535	; assembler added errata NOP
   827  003B7E  0EBF               	movlw	191
   828  003B80  6E54               	movwf	??_isupper^0,c
   829  003B82  0EFF               	movlw	255
   830  003B84  6E55               	movwf	(??_isupper+1)^0,c
   831  003B86  C052  F056         	movff	isupper@c,??_isupper+2
   832  003B8A  C053  F057         	movff	isupper@c+1,??_isupper+3
   833  003B8E  5054               	movf	??_isupper^0,w,c
   834  003B90  2656               	addwf	(??_isupper+2)^0,f,c
   835  003B92  5055               	movf	(??_isupper+1)^0,w,c
   836  003B94  2257               	addwfc	(??_isupper+3)^0,f,c
   837  003B96  5057               	movf	(??_isupper+3)^0,w,c
   838  003B98  E10B               	bnz	u180
   839  003B9A  0E1A               	movlw	26
   840  003B9C  5C56               	subwf	(??_isupper+2)^0,w,c
   841  003B9E  A0D8               	btfss	status,0,c
   842  003BA0  EFD4  F01D         	goto	u181
   843  003BA4  EFD8  F01D         	goto	u180
   844  003BA8                     u181:
   845  003BA8  FFFF               	dw	65535	; assembler added errata NOP
   846  003BAA  0E01               	movlw	1
   847  003BAC  EFDA  F01D         	goto	u190
   848  003BB0                     u180:
   849  003BB0  FFFF               	dw	65535	; assembler added errata NOP
   850  003BB2  0E00               	movlw	0
   851  003BB4                     u190:
   852  003BB4  FFFF               	dw	65535	; assembler added errata NOP
   853  003BB6  6E52               	movwf	?_isupper^0,c
   854  003BB8  6A53               	clrf	(?_isupper+1)^0,c
   855  003BBA  0012               	return		;funcret
   856  003BBC  FFFF               	dw	65535	; errata NOP
   857  003BBE                     __end_of_isupper:
   858                           	opt callstack 0
   859                           
   860 ;; *************** function _operar *****************
   861 ;; Defined at:
   862 ;;		line 117 in file "main.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;  oper            1    wreg     unsigned char 
   865 ;;  oper_1          1    8[COMRAM] unsigned char 
   866 ;;  oper_2          1    9[COMRAM] unsigned char 
   867 ;; Auto vars:     Size  Location     Type
   868 ;;  oper            1   12[COMRAM] unsigned char 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  2    8[COMRAM] int 
   871 ;; Registers used:
   872 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   878 ;;      Params:         2       0       0       0       0       0       0
   879 ;;      Locals:         1       0       0       0       0       0       0
   880 ;;      Temps:          2       0       0       0       0       0       0
   881 ;;      Totals:         5       0       0       0       0       0       0
   882 ;;Total ram usage:        5 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; Hardware stack levels required when called:    2
   885 ;; This function calls:
   886 ;;		_and
   887 ;;		_division
   888 ;;		_module
   889 ;;		_multi
   890 ;;		_nand
   891 ;;		_or
   892 ;;		_resta
   893 ;;		_suma
   894 ;;		_xor
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text4
   901  003E7E                     __ptext4:
   902                           	opt callstack 0
   903  003E7E                     _operar:
   904                           	opt callstack 0
   905  003E7E  FFFF               	dw	65535	; assembler added errata NOP
   906                           
   907                           ;incstack = 0
   908                           ;operar@oper stored from wreg
   909  003E80  6E5E               	movwf	operar@oper^0,c
   910  003E82                     
   911                           ;main.c: 118:     switch (oper) {
   912  003E82  EFC2  F01F         	goto	l1210
   913  003E86                     l1148:
   914  003E86  FFFF               	dw	65535	; assembler added errata NOP
   915                           
   916                           ;main.c: 120:             return suma(oper_1, oper_2);
   917  003E88  C05B  F052         	movff	operar@oper_2,suma@oper_2
   918  003E8C  505A               	movf	operar@oper_1^0,w,c
   919  003E8E  EC0A  F01D         	call	_suma
   920  003E92  C052  F05A         	movff	?_suma,?_operar
   921  003E96  C053  F05B         	movff	?_suma+1,?_operar+1
   922  003E9A  EFFD  F01F         	goto	l94
   923  003E9E                     l1154:
   924  003E9E  FFFF               	dw	65535	; assembler added errata NOP
   925                           
   926                           ;main.c: 123:             return resta(oper_1, oper_2);
   927  003EA0  C05B  F052         	movff	operar@oper_2,resta@oper_2
   928  003EA4  505A               	movf	operar@oper_1^0,w,c
   929  003EA6  EC31  F01D         	call	_resta
   930  003EAA  C052  F05A         	movff	?_resta,?_operar
   931  003EAE  C053  F05B         	movff	?_resta+1,?_operar+1
   932  003EB2  EFFD  F01F         	goto	l94
   933  003EB6                     l1160:
   934  003EB6  FFFF               	dw	65535	; assembler added errata NOP
   935                           
   936                           ;main.c: 126:             return multi(oper_1, oper_2);
   937  003EB8  C05B  F052         	movff	operar@oper_2,multi@oper_2
   938  003EBC  505A               	movf	operar@oper_1^0,w,c
   939  003EBE  EC13  F01D         	call	_multi
   940  003EC2  C052  F05A         	movff	?_multi,?_operar
   941  003EC6  C053  F05B         	movff	?_multi+1,?_operar+1
   942  003ECA  EFFD  F01F         	goto	l94
   943  003ECE                     l1166:
   944  003ECE  FFFF               	dw	65535	; assembler added errata NOP
   945                           
   946                           ;main.c: 129:             return division(oper_1, oper_2);
   947  003ED0  C05B  F056         	movff	operar@oper_2,division@oper_2
   948  003ED4  505A               	movf	operar@oper_1^0,w,c
   949  003ED6  EC45  F01D         	call	_division
   950  003EDA  C056  F05A         	movff	?_division,?_operar
   951  003EDE  C057  F05B         	movff	?_division+1,?_operar+1
   952  003EE2  EFFD  F01F         	goto	l94
   953  003EE6                     l1172:
   954  003EE6  FFFF               	dw	65535	; assembler added errata NOP
   955                           
   956                           ;main.c: 132:             return module(oper_1, oper_2);
   957  003EE8  C05B  F056         	movff	operar@oper_2,module@oper_2
   958  003EEC  505A               	movf	operar@oper_1^0,w,c
   959  003EEE  EC52  F01D         	call	_module
   960  003EF2  C056  F05A         	movff	?_module,?_operar
   961  003EF6  C057  F05B         	movff	?_module+1,?_operar+1
   962  003EFA  EFFD  F01F         	goto	l94
   963  003EFE                     l1178:
   964  003EFE  FFFF               	dw	65535	; assembler added errata NOP
   965                           
   966                           ;main.c: 135:             return and(oper_1, oper_2);
   967  003F00  C05B  F052         	movff	operar@oper_2,and@oper_2
   968  003F04  505A               	movf	operar@oper_1^0,w,c
   969  003F06  EC1D  F01D         	call	_and
   970  003F0A  C052  F05A         	movff	?_and,?_operar
   971  003F0E  C053  F05B         	movff	?_and+1,?_operar+1
   972  003F12  EFFD  F01F         	goto	l94
   973  003F16                     l1184:
   974  003F16  FFFF               	dw	65535	; assembler added errata NOP
   975                           
   976                           ;main.c: 138:             return or(oper_1, oper_2);
   977  003F18  C05B  F052         	movff	operar@oper_2,or@oper_2
   978  003F1C  505A               	movf	operar@oper_1^0,w,c
   979  003F1E  EC27  F01D         	call	_or
   980  003F22  C052  F05A         	movff	?_or,?_operar
   981  003F26  C053  F05B         	movff	?_or+1,?_operar+1
   982  003F2A  EFFD  F01F         	goto	l94
   983  003F2E                     l1190:
   984  003F2E  FFFF               	dw	65535	; assembler added errata NOP
   985                           
   986                           ;main.c: 141:             return nand(oper_1, oper_2);
   987  003F30  C05B  F056         	movff	operar@oper_2,nand@oper_2
   988  003F34  505A               	movf	operar@oper_1^0,w,c
   989  003F36  EC5F  F01D         	call	_nand
   990  003F3A  C056  F05A         	movff	?_nand,?_operar
   991  003F3E  C057  F05B         	movff	?_nand+1,?_operar+1
   992  003F42  EFFD  F01F         	goto	l94
   993  003F46                     l1196:
   994  003F46  FFFF               	dw	65535	; assembler added errata NOP
   995                           
   996                           ;main.c: 144:             return xor(oper_1, oper_2);
   997  003F48  C05B  F052         	movff	operar@oper_2,xor@oper_2
   998  003F4C  505A               	movf	operar@oper_1^0,w,c
   999  003F4E  EC3B  F01D         	call	_xor
  1000  003F52  C052  F05A         	movff	?_xor,?_operar
  1001  003F56  C053  F05B         	movff	?_xor+1,?_operar+1
  1002  003F5A  EFFD  F01F         	goto	l94
  1003  003F5E                     l1202:
  1004  003F5E  FFFF               	dw	65535	; assembler added errata NOP
  1005                           
  1006                           ;main.c: 149:             return oper_1 == 2;
  1007  003F60  0E02               	movlw	2
  1008  003F62  185A               	xorwf	operar@oper_1^0,w,c
  1009  003F64  B4D8               	btfsc	status,2,c
  1010  003F66  EFB7  F01F         	goto	u231
  1011  003F6A  EFBB  F01F         	goto	u230
  1012  003F6E                     u231:
  1013  003F6E  FFFF               	dw	65535	; assembler added errata NOP
  1014  003F70  0E01               	movlw	1
  1015  003F72  EFBD  F01F         	goto	u240
  1016  003F76                     u230:
  1017  003F76  FFFF               	dw	65535	; assembler added errata NOP
  1018  003F78  0E00               	movlw	0
  1019  003F7A                     u240:
  1020  003F7A  FFFF               	dw	65535	; assembler added errata NOP
  1021  003F7C  6E5A               	movwf	?_operar^0,c
  1022  003F7E  6A5B               	clrf	(?_operar+1)^0,c
  1023  003F80  EFFD  F01F         	goto	l94
  1024  003F84                     l1210:
  1025  003F84  FFFF               	dw	65535	; assembler added errata NOP
  1026  003F86  505E               	movf	operar@oper^0,w,c
  1027  003F88  6E5C               	movwf	??_operar^0,c
  1028  003F8A  6A5D               	clrf	(??_operar+1)^0,c
  1029                           
  1030                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1031                           ; Switch size 1, requested type "simple"
  1032                           ; Number of cases is 1, Range of values is 0 to 0
  1033                           ; switch strategies available:
  1034                           ; Name         Instructions Cycles
  1035                           ; simple_byte            4     3 (average)
  1036                           ;	Chosen strategy is simple_byte
  1037  003F8C  505D               	movf	(??_operar+1)^0,w,c
  1038  003F8E  0A00               	xorlw	0	; case 0
  1039  003F90  B4D8               	btfsc	status,2,c
  1040  003F92  EFCD  F01F         	goto	l1270
  1041  003F96  EFFD  F01F         	goto	l94
  1042  003F9A                     l1270:
  1043  003F9A  FFFF               	dw	65535	; assembler added errata NOP
  1044                           
  1045                           ; Switch size 1, requested type "simple"
  1046                           ; Number of cases is 11, Range of values is 0 to 10
  1047                           ; switch strategies available:
  1048                           ; Name         Instructions Cycles
  1049                           ; simple_byte           34    18 (average)
  1050                           ;	Chosen strategy is simple_byte
  1051  003F9C  505C               	movf	??_operar^0,w,c
  1052  003F9E  0A00               	xorlw	0	; case 0
  1053  003FA0  B4D8               	btfsc	status,2,c
  1054  003FA2  EF43  F01F         	goto	l1148
  1055  003FA6  0A01               	xorlw	1	; case 1
  1056  003FA8  B4D8               	btfsc	status,2,c
  1057  003FAA  EF4F  F01F         	goto	l1154
  1058  003FAE  0A03               	xorlw	3	; case 2
  1059  003FB0  B4D8               	btfsc	status,2,c
  1060  003FB2  EF5B  F01F         	goto	l1160
  1061  003FB6  0A01               	xorlw	1	; case 3
  1062  003FB8  B4D8               	btfsc	status,2,c
  1063  003FBA  EF67  F01F         	goto	l1166
  1064  003FBE  0A07               	xorlw	7	; case 4
  1065  003FC0  B4D8               	btfsc	status,2,c
  1066  003FC2  EF73  F01F         	goto	l1172
  1067  003FC6  0A01               	xorlw	1	; case 5
  1068  003FC8  B4D8               	btfsc	status,2,c
  1069  003FCA  EF7F  F01F         	goto	l1178
  1070  003FCE  0A03               	xorlw	3	; case 6
  1071  003FD0  B4D8               	btfsc	status,2,c
  1072  003FD2  EF8B  F01F         	goto	l1184
  1073  003FD6  0A01               	xorlw	1	; case 7
  1074  003FD8  B4D8               	btfsc	status,2,c
  1075  003FDA  EF97  F01F         	goto	l1190
  1076  003FDE  0A0F               	xorlw	15	; case 8
  1077  003FE0  B4D8               	btfsc	status,2,c
  1078  003FE2  EFA3  F01F         	goto	l1196
  1079  003FE6  0A01               	xorlw	1	; case 9
  1080  003FE8  B4D8               	btfsc	status,2,c
  1081  003FEA  EFFD  F01F         	goto	l94
  1082  003FEE  0A03               	xorlw	3	; case 10
  1083  003FF0  B4D8               	btfsc	status,2,c
  1084  003FF2  EFAF  F01F         	goto	l1202
  1085  003FF6  EFFD  F01F         	goto	l94
  1086  003FFA                     l94:
  1087  003FFA  FFFF               	dw	65535	; assembler added errata NOP
  1088  003FFC  0012               	return		;funcret
  1089  003FFE  FFFF               	dw	65535	; errata NOP
  1090  004000                     __end_of_operar:
  1091                           	opt callstack 0
  1092                           
  1093 ;; *************** function _xor *****************
  1094 ;; Defined at:
  1095 ;;		line 193 in file "main.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  oper_1          1    wreg     unsigned char 
  1098 ;;  oper_2          1    0[COMRAM] unsigned char 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  oper_1          1    3[COMRAM] unsigned char 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  2    0[COMRAM] int 
  1103 ;; Registers used:
  1104 ;;		wreg, status,2, status,0
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1110 ;;      Params:         2       0       0       0       0       0       0
  1111 ;;      Locals:         1       0       0       0       0       0       0
  1112 ;;      Temps:          1       0       0       0       0       0       0
  1113 ;;      Totals:         4       0       0       0       0       0       0
  1114 ;;Total ram usage:        4 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_operar
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           	psect	text5
  1124  003A76                     __ptext5:
  1125                           	opt callstack 0
  1126  003A76                     _xor:
  1127                           	opt callstack 0
  1128  003A76  FFFF               	dw	65535	; assembler added errata NOP
  1129                           
  1130                           ;incstack = 0
  1131                           ;xor@oper_1 stored from wreg
  1132  003A78  6E55               	movwf	xor@oper_1^0,c
  1133  003A7A                     
  1134                           ;main.c: 194:     return oper_1 ^ oper_2;
  1135  003A7A  5055               	movf	xor@oper_1^0,w,c
  1136  003A7C  1852               	xorwf	xor@oper_2^0,w,c
  1137  003A7E  6E54               	movwf	??_xor^0,c
  1138  003A80  5054               	movf	??_xor^0,w,c
  1139  003A82  6E52               	movwf	?_xor^0,c
  1140  003A84  6A53               	clrf	(?_xor+1)^0,c
  1141  003A86  0012               	return		;funcret
  1142  003A88  FFFF               	dw	65535	; errata NOP
  1143  003A8A                     __end_of_xor:
  1144                           	opt callstack 0
  1145                           
  1146 ;; *************** function _suma *****************
  1147 ;; Defined at:
  1148 ;;		line 156 in file "main.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  oper_1          1    wreg     unsigned char 
  1151 ;;  oper_2          1    0[COMRAM] unsigned char 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  oper_1          1    2[COMRAM] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  2    0[COMRAM] int 
  1156 ;; Registers used:
  1157 ;;		wreg, status,2, status,0
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1163 ;;      Params:         2       0       0       0       0       0       0
  1164 ;;      Locals:         1       0       0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0       0       0
  1166 ;;      Totals:         3       0       0       0       0       0       0
  1167 ;;Total ram usage:        3 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; This function calls:
  1170 ;;		Nothing
  1171 ;; This function is called by:
  1172 ;;		_operar
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text6
  1177  003A14                     __ptext6:
  1178                           	opt callstack 0
  1179  003A14                     _suma:
  1180                           	opt callstack 0
  1181  003A14  FFFF               	dw	65535	; assembler added errata NOP
  1182                           
  1183                           ;incstack = 0
  1184                           ;suma@oper_1 stored from wreg
  1185  003A16  6E54               	movwf	suma@oper_1^0,c
  1186  003A18                     
  1187                           ;main.c: 157:     return oper_1 + oper_2;
  1188  003A18  5054               	movf	suma@oper_1^0,w,c
  1189  003A1A  2452               	addwf	suma@oper_2^0,w,c
  1190  003A1C  6E52               	movwf	?_suma^0,c
  1191  003A1E  6A53               	clrf	(?_suma+1)^0,c
  1192  003A20  3653               	rlcf	(?_suma+1)^0,f,c
  1193  003A22  0012               	return		;funcret
  1194  003A24  FFFF               	dw	65535	; errata NOP
  1195  003A26                     __end_of_suma:
  1196                           	opt callstack 0
  1197                           
  1198 ;; *************** function _resta *****************
  1199 ;; Defined at:
  1200 ;;		line 160 in file "main.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  oper_1          1    wreg     unsigned char 
  1203 ;;  oper_2          1    0[COMRAM] unsigned char 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  oper_1          1    3[COMRAM] unsigned char 
  1206 ;;  result          1    0        unsigned char 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  2    0[COMRAM] int 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1216 ;;      Params:         2       0       0       0       0       0       0
  1217 ;;      Locals:         2       0       0       0       0       0       0
  1218 ;;      Temps:          0       0       0       0       0       0       0
  1219 ;;      Totals:         4       0       0       0       0       0       0
  1220 ;;Total ram usage:        4 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; This function calls:
  1223 ;;		Nothing
  1224 ;; This function is called by:
  1225 ;;		_operar
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text7
  1230  003A62                     __ptext7:
  1231                           	opt callstack 0
  1232  003A62                     _resta:
  1233                           	opt callstack 0
  1234  003A62  FFFF               	dw	65535	; assembler added errata NOP
  1235                           
  1236                           ;incstack = 0
  1237                           ;resta@oper_1 stored from wreg
  1238  003A64  6E55               	movwf	resta@oper_1^0,c
  1239  003A66                     
  1240                           ;main.c: 165:     return oper_1 - oper_2;
  1241  003A66  5052               	movf	resta@oper_2^0,w,c
  1242  003A68  5C55               	subwf	resta@oper_1^0,w,c
  1243  003A6A  6E52               	movwf	?_resta^0,c
  1244  003A6C  6A53               	clrf	(?_resta+1)^0,c
  1245  003A6E  A0D8               	btfss	status,0,c
  1246  003A70  0653               	decf	(?_resta+1)^0,f,c
  1247  003A72  0012               	return		;funcret
  1248  003A74  FFFF               	dw	65535	; errata NOP
  1249  003A76                     __end_of_resta:
  1250                           	opt callstack 0
  1251                           
  1252 ;; *************** function _or *****************
  1253 ;; Defined at:
  1254 ;;		line 185 in file "main.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  oper_1          1    wreg     unsigned char 
  1257 ;;  oper_2          1    0[COMRAM] unsigned char 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  oper_1          1    3[COMRAM] unsigned char 
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  2    0[COMRAM] int 
  1262 ;; Registers used:
  1263 ;;		wreg, status,2, status,0
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1269 ;;      Params:         2       0       0       0       0       0       0
  1270 ;;      Locals:         1       0       0       0       0       0       0
  1271 ;;      Temps:          1       0       0       0       0       0       0
  1272 ;;      Totals:         4       0       0       0       0       0       0
  1273 ;;Total ram usage:        4 bytes
  1274 ;; Hardware stack levels used:    1
  1275 ;; This function calls:
  1276 ;;		Nothing
  1277 ;; This function is called by:
  1278 ;;		_operar
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text8
  1283  003A4E                     __ptext8:
  1284                           	opt callstack 0
  1285  003A4E                     _or:
  1286                           	opt callstack 0
  1287  003A4E  FFFF               	dw	65535	; assembler added errata NOP
  1288                           
  1289                           ;incstack = 0
  1290                           ;or@oper_1 stored from wreg
  1291  003A50  6E55               	movwf	or@oper_1^0,c
  1292  003A52                     
  1293                           ;main.c: 186:     return oper_1 | oper_2;
  1294  003A52  5055               	movf	or@oper_1^0,w,c
  1295  003A54  1052               	iorwf	or@oper_2^0,w,c
  1296  003A56  6E54               	movwf	??_or^0,c
  1297  003A58  5054               	movf	??_or^0,w,c
  1298  003A5A  6E52               	movwf	?_or^0,c
  1299  003A5C  6A53               	clrf	(?_or+1)^0,c
  1300  003A5E  0012               	return		;funcret
  1301  003A60  FFFF               	dw	65535	; errata NOP
  1302  003A62                     __end_of_or:
  1303                           	opt callstack 0
  1304                           
  1305 ;; *************** function _nand *****************
  1306 ;; Defined at:
  1307 ;;		line 189 in file "main.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  oper_1          1    wreg     unsigned char 
  1310 ;;  oper_2          1    4[COMRAM] unsigned char 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;  oper_1          1    6[COMRAM] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  2    4[COMRAM] int 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1322 ;;      Params:         2       0       0       0       0       0       0
  1323 ;;      Locals:         1       0       0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0
  1325 ;;      Totals:         3       0       0       0       0       0       0
  1326 ;;Total ram usage:        3 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    1
  1329 ;; This function calls:
  1330 ;;		_and
  1331 ;; This function is called by:
  1332 ;;		_operar
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text9
  1337  003ABE                     __ptext9:
  1338                           	opt callstack 0
  1339  003ABE                     _nand:
  1340                           	opt callstack 0
  1341  003ABE  FFFF               	dw	65535	; assembler added errata NOP
  1342                           
  1343                           ;incstack = 0
  1344                           ;nand@oper_1 stored from wreg
  1345  003AC0  6E58               	movwf	nand@oper_1^0,c
  1346  003AC2                     
  1347                           ;main.c: 190:     return ~(and(oper_1, oper_2));
  1348  003AC2  C056  F052         	movff	nand@oper_2,and@oper_2
  1349  003AC6  5058               	movf	nand@oper_1^0,w,c
  1350  003AC8  EC1D  F01D         	call	_and
  1351  003ACC  1C52               	comf	?_and^0,w,c
  1352  003ACE  6E56               	movwf	?_nand^0,c
  1353  003AD0  1C53               	comf	(?_and+1)^0,w,c
  1354  003AD2  6E57               	movwf	(?_nand+1)^0,c
  1355  003AD4  0012               	return		;funcret
  1356  003AD6  FFFF               	dw	65535	; errata NOP
  1357  003AD8                     __end_of_nand:
  1358                           	opt callstack 0
  1359                           
  1360 ;; *************** function _and *****************
  1361 ;; Defined at:
  1362 ;;		line 181 in file "main.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  oper_1          1    wreg     unsigned char 
  1365 ;;  oper_2          1    0[COMRAM] unsigned char 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  oper_1          1    3[COMRAM] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  2    0[COMRAM] int 
  1370 ;; Registers used:
  1371 ;;		wreg, status,2, status,0
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1377 ;;      Params:         2       0       0       0       0       0       0
  1378 ;;      Locals:         1       0       0       0       0       0       0
  1379 ;;      Temps:          1       0       0       0       0       0       0
  1380 ;;      Totals:         4       0       0       0       0       0       0
  1381 ;;Total ram usage:        4 bytes
  1382 ;; Hardware stack levels used:    1
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_operar
  1387 ;;		_nand
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text10
  1392  003A3A                     __ptext10:
  1393                           	opt callstack 0
  1394  003A3A                     _and:
  1395                           	opt callstack 0
  1396  003A3A  FFFF               	dw	65535	; assembler added errata NOP
  1397                           
  1398                           ;incstack = 0
  1399                           ;and@oper_1 stored from wreg
  1400  003A3C  6E55               	movwf	and@oper_1^0,c
  1401  003A3E                     
  1402                           ;main.c: 182:     return oper_1 & oper_2;
  1403  003A3E  5055               	movf	and@oper_1^0,w,c
  1404  003A40  1452               	andwf	and@oper_2^0,w,c
  1405  003A42  6E54               	movwf	??_and^0,c
  1406  003A44  5054               	movf	??_and^0,w,c
  1407  003A46  6E52               	movwf	?_and^0,c
  1408  003A48  6A53               	clrf	(?_and+1)^0,c
  1409  003A4A  0012               	return		;funcret
  1410  003A4C  FFFF               	dw	65535	; errata NOP
  1411  003A4E                     __end_of_and:
  1412                           	opt callstack 0
  1413                           
  1414 ;; *************** function _multi *****************
  1415 ;; Defined at:
  1416 ;;		line 168 in file "main.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  oper_1          1    wreg     unsigned char 
  1419 ;;  oper_2          1    0[COMRAM] unsigned char 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  oper_1          1    2[COMRAM] unsigned char 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  2    0[COMRAM] int 
  1424 ;; Registers used:
  1425 ;;		wreg, status,2, status,0, prodl, prodh
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1431 ;;      Params:         2       0       0       0       0       0       0
  1432 ;;      Locals:         1       0       0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0       0       0
  1434 ;;      Totals:         3       0       0       0       0       0       0
  1435 ;;Total ram usage:        3 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_operar
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text11
  1445  003A26                     __ptext11:
  1446                           	opt callstack 0
  1447  003A26                     _multi:
  1448                           	opt callstack 0
  1449  003A26  FFFF               	dw	65535	; assembler added errata NOP
  1450                           
  1451                           ;incstack = 0
  1452                           ;multi@oper_1 stored from wreg
  1453  003A28  6E54               	movwf	multi@oper_1^0,c
  1454  003A2A                     
  1455                           ;main.c: 169:     return oper_1 * oper_2;
  1456  003A2A  5054               	movf	multi@oper_1^0,w,c
  1457  003A2C  0252               	mulwf	multi@oper_2^0,c
  1458  003A2E  CFF3 F052          	movff	prodl,?_multi
  1459  003A32  CFF4 F053          	movff	prodh,?_multi+1
  1460  003A36  0012               	return		;funcret
  1461  003A38  FFFF               	dw	65535	; errata NOP
  1462  003A3A                     __end_of_multi:
  1463                           	opt callstack 0
  1464                           
  1465 ;; *************** function _module *****************
  1466 ;; Defined at:
  1467 ;;		line 177 in file "main.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  oper_1          1    wreg     unsigned char 
  1470 ;;  oper_2          1    4[COMRAM] unsigned char 
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  oper_1          1    7[COMRAM] unsigned char 
  1473 ;; Return value:  Size  Location     Type
  1474 ;;                  2    4[COMRAM] int 
  1475 ;; Registers used:
  1476 ;;		wreg, status,2, status,0, cstack
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1482 ;;      Params:         2       0       0       0       0       0       0
  1483 ;;      Locals:         1       0       0       0       0       0       0
  1484 ;;      Temps:          1       0       0       0       0       0       0
  1485 ;;      Totals:         4       0       0       0       0       0       0
  1486 ;;Total ram usage:        4 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; Hardware stack levels required when called:    1
  1489 ;; This function calls:
  1490 ;;		___lbmod
  1491 ;; This function is called by:
  1492 ;;		_operar
  1493 ;; This function uses a non-reentrant model
  1494 ;;
  1495                           
  1496                           	psect	text12
  1497  003AA4                     __ptext12:
  1498                           	opt callstack 0
  1499  003AA4                     _module:
  1500                           	opt callstack 0
  1501  003AA4  FFFF               	dw	65535	; assembler added errata NOP
  1502                           
  1503                           ;incstack = 0
  1504                           ;module@oper_1 stored from wreg
  1505  003AA6  6E59               	movwf	module@oper_1^0,c
  1506  003AA8                     
  1507                           ;main.c: 178:     return oper_1 % oper_2;
  1508  003AA8  C056  F052         	movff	module@oper_2,___lbmod@divisor
  1509  003AAC  5059               	movf	module@oper_1^0,w,c
  1510  003AAE  EC9D  F01D         	call	___lbmod
  1511  003AB2  6E58               	movwf	??_module^0,c
  1512  003AB4  5058               	movf	??_module^0,w,c
  1513  003AB6  6E56               	movwf	?_module^0,c
  1514  003AB8  6A57               	clrf	(?_module+1)^0,c
  1515  003ABA  0012               	return		;funcret
  1516  003ABC  FFFF               	dw	65535	; errata NOP
  1517  003ABE                     __end_of_module:
  1518                           	opt callstack 0
  1519                           
  1520 ;; *************** function ___lbmod *****************
  1521 ;; Defined at:
  1522 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbmod.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  dividend        1    wreg     unsigned char 
  1525 ;;  divisor         1    0[COMRAM] unsigned char 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  dividend        1    1[COMRAM] unsigned char 
  1528 ;;  rem             1    3[COMRAM] unsigned char 
  1529 ;;  counter         1    2[COMRAM] unsigned char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      unsigned char 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2, status,0
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1539 ;;      Params:         1       0       0       0       0       0       0
  1540 ;;      Locals:         3       0       0       0       0       0       0
  1541 ;;      Temps:          0       0       0       0       0       0       0
  1542 ;;      Totals:         4       0       0       0       0       0       0
  1543 ;;Total ram usage:        4 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; This function calls:
  1546 ;;		Nothing
  1547 ;; This function is called by:
  1548 ;;		_module
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text13
  1553  003B3A                     __ptext13:
  1554                           	opt callstack 0
  1555  003B3A                     ___lbmod:
  1556                           	opt callstack 0
  1557  003B3A  FFFF               	dw	65535	; assembler added errata NOP
  1558                           
  1559                           ;incstack = 0
  1560                           ;___lbmod@dividend stored from wreg
  1561  003B3C  6E53               	movwf	___lbmod@dividend^0,c
  1562  003B3E  0E08               	movlw	8
  1563  003B40  6E54               	movwf	___lbmod@counter^0,c
  1564  003B42  0E00               	movlw	0
  1565  003B44  6E55               	movwf	___lbmod@rem^0,c
  1566  003B46                     l1084:
  1567  003B46  FFFF               	dw	65535	; assembler added errata NOP
  1568  003B48  90D8               	bcf	status,0,c
  1569  003B4A  3453               	rlcf	___lbmod@dividend^0,w,c
  1570  003B4C  3455               	rlcf	___lbmod@rem^0,w,c
  1571  003B4E  6E55               	movwf	___lbmod@rem^0,c
  1572  003B50  90D8               	bcf	status,0,c
  1573  003B52  3653               	rlcf	___lbmod@dividend^0,f,c
  1574  003B54  5052               	movf	___lbmod@divisor^0,w,c
  1575  003B56  5C55               	subwf	___lbmod@rem^0,w,c
  1576  003B58  A0D8               	btfss	status,0,c
  1577  003B5A  EFB1  F01D         	goto	u171
  1578  003B5E  EFB4  F01D         	goto	u170
  1579  003B62                     u171:
  1580  003B62  FFFF               	dw	65535	; assembler added errata NOP
  1581  003B64  EFB7  F01D         	goto	l1092
  1582  003B68                     u170:
  1583  003B68  FFFF               	dw	65535	; assembler added errata NOP
  1584  003B6A  5052               	movf	___lbmod@divisor^0,w,c
  1585  003B6C  5E55               	subwf	___lbmod@rem^0,f,c
  1586  003B6E                     l1092:
  1587  003B6E  FFFF               	dw	65535	; assembler added errata NOP
  1588  003B70  2E54               	decfsz	___lbmod@counter^0,f,c
  1589  003B72  EFA3  F01D         	goto	l1084
  1590  003B76  5055               	movf	___lbmod@rem^0,w,c
  1591  003B78  0012               	return		;funcret
  1592  003B7A  FFFF               	dw	65535	; errata NOP
  1593  003B7C                     __end_of___lbmod:
  1594                           	opt callstack 0
  1595                           
  1596 ;; *************** function _division *****************
  1597 ;; Defined at:
  1598 ;;		line 172 in file "main.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  oper_1          1    wreg     unsigned char 
  1601 ;;  oper_2          1    4[COMRAM] unsigned char 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;  oper_1          1    6[COMRAM] unsigned char 
  1604 ;;  result          1    7[COMRAM] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  2    4[COMRAM] int 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1614 ;;      Params:         2       0       0       0       0       0       0
  1615 ;;      Locals:         2       0       0       0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0       0       0
  1617 ;;      Totals:         4       0       0       0       0       0       0
  1618 ;;Total ram usage:        4 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    1
  1621 ;; This function calls:
  1622 ;;		___lbdiv
  1623 ;; This function is called by:
  1624 ;;		_operar
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text14
  1629  003A8A                     __ptext14:
  1630                           	opt callstack 0
  1631  003A8A                     _division:
  1632                           	opt callstack 0
  1633  003A8A  FFFF               	dw	65535	; assembler added errata NOP
  1634                           
  1635                           ;incstack = 0
  1636                           ;division@oper_1 stored from wreg
  1637  003A8C  6E58               	movwf	division@oper_1^0,c
  1638  003A8E                     
  1639                           ;main.c: 173:     char result = oper_1 / oper_2;
  1640  003A8E  C056  F052         	movff	division@oper_2,___lbdiv@divisor
  1641  003A92  5058               	movf	division@oper_1^0,w,c
  1642  003A94  EC41  F01E         	call	___lbdiv
  1643  003A98  6E59               	movwf	division@result^0,c
  1644  003A9A                     
  1645                           ;main.c: 174:     return result;
  1646  003A9A  C059  F056         	movff	division@result,?_division
  1647  003A9E  6A57               	clrf	(?_division+1)^0,c
  1648  003AA0  0012               	return		;funcret
  1649  003AA2  FFFF               	dw	65535	; errata NOP
  1650  003AA4                     __end_of_division:
  1651                           	opt callstack 0
  1652                           
  1653 ;; *************** function ___lbdiv *****************
  1654 ;; Defined at:
  1655 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbdiv.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  dividend        1    wreg     unsigned char 
  1658 ;;  divisor         1    0[COMRAM] unsigned char 
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  dividend        1    1[COMRAM] unsigned char 
  1661 ;;  quotient        1    3[COMRAM] unsigned char 
  1662 ;;  counter         1    2[COMRAM] unsigned char 
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      unsigned char 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1672 ;;      Params:         1       0       0       0       0       0       0
  1673 ;;      Locals:         3       0       0       0       0       0       0
  1674 ;;      Temps:          0       0       0       0       0       0       0
  1675 ;;      Totals:         4       0       0       0       0       0       0
  1676 ;;Total ram usage:        4 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_division
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text15
  1686  003C82                     __ptext15:
  1687                           	opt callstack 0
  1688  003C82                     ___lbdiv:
  1689                           	opt callstack 0
  1690  003C82  FFFF               	dw	65535	; assembler added errata NOP
  1691                           
  1692                           ;incstack = 0
  1693                           ;___lbdiv@dividend stored from wreg
  1694  003C84  6E53               	movwf	___lbdiv@dividend^0,c
  1695  003C86  0E00               	movlw	0
  1696  003C88  6E55               	movwf	___lbdiv@quotient^0,c
  1697  003C8A  5052               	movf	___lbdiv@divisor^0,w,c
  1698  003C8C  B4D8               	btfsc	status,2,c
  1699  003C8E  EF4B  F01E         	goto	u141
  1700  003C92  EF4E  F01E         	goto	u140
  1701  003C96                     u141:
  1702  003C96  FFFF               	dw	65535	; assembler added errata NOP
  1703  003C98  EF78  F01E         	goto	l1078
  1704  003C9C                     u140:
  1705  003C9C  FFFF               	dw	65535	; assembler added errata NOP
  1706  003C9E  0E01               	movlw	1
  1707  003CA0  6E54               	movwf	___lbdiv@counter^0,c
  1708  003CA2  EF57  F01E         	goto	l1066
  1709  003CA6                     l1062:
  1710  003CA6  FFFF               	dw	65535	; assembler added errata NOP
  1711  003CA8  90D8               	bcf	status,0,c
  1712  003CAA  3652               	rlcf	___lbdiv@divisor^0,f,c
  1713  003CAC  2A54               	incf	___lbdiv@counter^0,f,c
  1714  003CAE                     l1066:
  1715  003CAE  FFFF               	dw	65535	; assembler added errata NOP
  1716  003CB0  AE52               	btfss	___lbdiv@divisor^0,7,c
  1717  003CB2  EF5D  F01E         	goto	u151
  1718  003CB6  EF60  F01E         	goto	u150
  1719  003CBA                     u151:
  1720  003CBA  FFFF               	dw	65535	; assembler added errata NOP
  1721  003CBC  EF53  F01E         	goto	l1062
  1722  003CC0                     u150:
  1723  003CC0  FFFF               	dw	65535	; assembler added errata NOP
  1724  003CC2                     l1068:
  1725  003CC2  FFFF               	dw	65535	; assembler added errata NOP
  1726  003CC4  90D8               	bcf	status,0,c
  1727  003CC6  3655               	rlcf	___lbdiv@quotient^0,f,c
  1728  003CC8  5052               	movf	___lbdiv@divisor^0,w,c
  1729  003CCA  5C53               	subwf	___lbdiv@dividend^0,w,c
  1730  003CCC  A0D8               	btfss	status,0,c
  1731  003CCE  EF6B  F01E         	goto	u161
  1732  003CD2  EF6E  F01E         	goto	u160
  1733  003CD6                     u161:
  1734  003CD6  FFFF               	dw	65535	; assembler added errata NOP
  1735  003CD8  EF72  F01E         	goto	l1074
  1736  003CDC                     u160:
  1737  003CDC  FFFF               	dw	65535	; assembler added errata NOP
  1738  003CDE  5052               	movf	___lbdiv@divisor^0,w,c
  1739  003CE0  5E53               	subwf	___lbdiv@dividend^0,f,c
  1740  003CE2  8055               	bsf	___lbdiv@quotient^0,0,c
  1741  003CE4                     l1074:
  1742  003CE4  FFFF               	dw	65535	; assembler added errata NOP
  1743  003CE6  90D8               	bcf	status,0,c
  1744  003CE8  3252               	rrcf	___lbdiv@divisor^0,f,c
  1745  003CEA  2E54               	decfsz	___lbdiv@counter^0,f,c
  1746  003CEC  EF61  F01E         	goto	l1068
  1747  003CF0                     l1078:
  1748  003CF0  FFFF               	dw	65535	; assembler added errata NOP
  1749  003CF2  5055               	movf	___lbdiv@quotient^0,w,c
  1750  003CF4  0012               	return		;funcret
  1751  003CF6  FFFF               	dw	65535	; errata NOP
  1752  003CF8                     __end_of___lbdiv:
  1753                           	opt callstack 0
  1754                           
  1755 ;; *************** function _init_config *****************
  1756 ;; Defined at:
  1757 ;;		line 85 in file "main.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1771 ;;      Params:         0       0       0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0
  1774 ;;      Totals:         0       0       0       0       0       0       0
  1775 ;;Total ram usage:        0 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text16
  1785  003B02                     __ptext16:
  1786                           	opt callstack 0
  1787  003B02                     _init_config:
  1788                           	opt callstack 0
  1789  003B02  FFFF               	dw	65535	; assembler added errata NOP
  1790  003B04  0E06               	movlw	6
  1791  003B06  6EC1               	movwf	193,c	;volatile
  1792  003B08  0E00               	movlw	0
  1793  003B0A  6E93               	movwf	147,c	;volatile
  1794  003B0C  0E00               	movlw	0
  1795  003B0E  6E8A               	movwf	138,c	;volatile
  1796  003B10  0E00               	movlw	0
  1797  003B12  6E81               	movwf	129,c	;volatile
  1798  003B14  0E00               	movlw	0
  1799  003B16  6E94               	movwf	148,c	;volatile
  1800  003B18  0E00               	movlw	0
  1801  003B1A  6E8B               	movwf	139,c	;volatile
  1802  003B1C  0E00               	movlw	0
  1803  003B1E  6E82               	movwf	130,c	;volatile
  1804  003B20  6895               	setf	149,c	;volatile
  1805  003B22  0E00               	movlw	0
  1806  003B24  6E8C               	movwf	140,c	;volatile
  1807  003B26  0E00               	movlw	0
  1808  003B28  6E83               	movwf	131,c	;volatile
  1809  003B2A  6896               	setf	150,c	;volatile
  1810  003B2C  0E00               	movlw	0
  1811  003B2E  6E8D               	movwf	141,c	;volatile
  1812  003B30  0E00               	movlw	0
  1813  003B32  6E84               	movwf	132,c	;volatile
  1814  003B34  0012               	return		;funcret
  1815  003B36  FFFF               	dw	65535	; errata NOP
  1816  003B38                     __end_of_init_config:
  1817                           	opt callstack 0
  1818  003B38  FFFF               	dw	65535	; assembler added errata NOP
  1819                           
  1820                           	psect	rparam
  1821  0000                     tosu	equ	0xFFF
  1822                           tosh	equ	0xFFE
  1823                           tosl	equ	0xFFD
  1824                           stkptr	equ	0xFFC
  1825                           pclatu	equ	0xFFB
  1826                           pclath	equ	0xFFA
  1827                           pcl	equ	0xFF9
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           indf0	equ	0xFEF
  1835                           postinc0	equ	0xFEE
  1836                           postdec0	equ	0xFED
  1837                           preinc0	equ	0xFEC
  1838                           plusw0	equ	0xFEB
  1839                           fsr0h	equ	0xFEA
  1840                           fsr0l	equ	0xFE9
  1841                           wreg	equ	0xFE8
  1842                           indf1	equ	0xFE7
  1843                           postinc1	equ	0xFE6
  1844                           postdec1	equ	0xFE5
  1845                           preinc1	equ	0xFE4
  1846                           plusw1	equ	0xFE3
  1847                           fsr1h	equ	0xFE2
  1848                           fsr1l	equ	0xFE1
  1849                           bsr	equ	0xFE0
  1850                           indf2	equ	0xFDF
  1851                           postinc2	equ	0xFDE
  1852                           postdec2	equ	0xFDD
  1853                           preinc2	equ	0xFDC
  1854                           plusw2	equ	0xFDB
  1855                           fsr2h	equ	0xFDA
  1856                           fsr2l	equ	0xFD9
  1857                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        81
    BSS         0
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     30     116
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    visualizar@SoN	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    _main->_visualizar
    _visualizar->_tolower
    _tolower->_isupper
    _operar->_division
    _operar->_module
    _nand->_and
    _module->___lbmod
    _division->___lbdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4339
                                             27 COMRAM     3     3      0
                        _init_config
                             _operar
                         _visualizar
 ---------------------------------------------------------------------------------
 (1) _visualizar                                          13     6      7    1852
                                             14 COMRAM    13     6      7
                            _tolower
 ---------------------------------------------------------------------------------
 (2) _tolower                                              8     6      2     412
                                              6 COMRAM     8     6      2
                            _isupper
 ---------------------------------------------------------------------------------
 (3) _isupper                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _operar                                               5     3      2    2485
                                              8 COMRAM     5     3      2
                                _and
                           _division
                             _module
                              _multi
                               _nand
                                 _or
                              _resta
                               _suma
                                _xor
 ---------------------------------------------------------------------------------
 (2) _xor                                                  4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _suma                                                 3     1      2     120
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _resta                                                4     2      2     165
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _or                                                   4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _nand                                                 3     1      2     316
                                              4 COMRAM     3     1      2
                                _and
 ---------------------------------------------------------------------------------
 (3) _and                                                  4     2      2     196
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _multi                                                3     1      2     120
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _module                                               4     2      2     355
                                              4 COMRAM     4     2      2
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     235
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _division                                             4     2      2     381
                                              4 COMRAM     4     2      2
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     238
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_config
   _operar
     _and
     _division
       ___lbdiv
     _module
       ___lbmod
     _multi
     _nand
       _and
     _or
     _resta
     _suma
     _xor
   _visualizar
     _tolower
       _isupper

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1E      74       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74      15        0.0%
DATA                 0      0      74       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Feb 24 08:25:13 2020

                                                               l80 3B34  
                                                               l94 3FFA  
                                                               l89 3DB0  
                                                               _or 3A4E  
                                                      __CFG_OSC$XT 000000  
                                                              l112 3A72  
                                                              l121 3ABA  
                                                              l130 3AD4  
                                                              l115 3A36  
                                                              l124 3A4A  
                                                              l109 3A22  
                                                              l133 3A86  
                                                              l118 3AA0  
                                                              l127 3A5E  
                                                              ?_or 0052  
                                                              l542 3CF4  
                                                              l548 3B78  
                                                              l812 3C72  
                                                              l823 3BBA  
                                                              l817 3C7C  
                                                              l922 3B04  
                                                              l924 3B20  
                                                              l926 3B2A  
                                                              u200 3C44  
                                                              u201 3C3C  
                                                              u210 3C48  
                                                              u140 3C9C  
                                                              u220 3C62  
                                                              u141 3C96  
                                                              u221 3C5C  
                                                              u150 3CC0  
                                                              u230 3F76  
                                                              u151 3CBA  
                                                              u231 3F6E  
                                                              u160 3CDC  
                                                              u240 3F7A  
                                                              u161 3CD6  
                                                              u170 3B68  
                                                              u250 3D22  
                                                              u171 3B62  
                                                              u251 3D1C  
                                                              u180 3BB0  
                                                              u260 3DAE  
                                                              u181 3BA8  
                                                              u261 3DA8  
                                                              u190 3BB4  
                                                              u277 3E6A  
                                                              u287 3D90  
                                                     __CFG_BOR$OFF 000000  
                                                              _and 3A3A  
                                                              _xor 3A76  
                                                              wreg 000FE8  
                                                      _tolower$626 005E  
                                                             ??_or 0054  
                                                     __CFG_LVP$OFF 000000  
                                                     __CFG_WDT$OFF 000000  
                                                             l1102 3C12  
                                                             l1120 3A2A  
                                                             l1112 3A18  
                                                             l1130 3AA8  
                                                             l1202 3F5E  
                                                             l1210 3F84  
                                                             l1106 3C4E  
                                                             l1060 3C9E  
                                                             l1124 3A8E  
                                                             l1052 3A3E  
                                                             l1116 3A66  
                                                             l1108 3C64  
                                                             l1070 3CDE  
                                                             l1062 3CA6  
                                                             l1126 3A9A  
                                                             l1134 3A52  
                                                             l1142 3A7A  
                                                             l1230 3D84  
                                                             l1222 3CFE  
                                                             l1072 3CE2  
                                                             l1064 3CAC  
                                                             l1056 3C86  
                                                             l1160 3EB6  
                                                             l1232 3D8A  
                                                             l1224 3D24  
                                                             l1216 3CFA  
                                                             l1240 3DBA  
                                                             l1074 3CE4  
                                                             l1066 3CAE  
                                                             l1058 3C8A  
                                                             l1090 3B6A  
                                                             l1082 3B3E  
                                                             l1138 3AC2  
                                                             l1154 3E9E  
                                                             l1146 3E82  
                                                             l1234 3D9A  
                                                             l1226 3D52  
                                                             l1250 3DE4  
                                                             l1242 3DC0  
                                                             l1076 3CEA  
                                                             l1068 3CC2  
                                                             l1092 3B6E  
                                                             l1084 3B46  
                                                             l1172 3EE6  
                                                             l1148 3E86  
                                                             l1236 3D9C  
                                                             l1228 3D7E  
                                                             l1260 3E76  
                                                             l1252 3E04  
                                                             l1244 3DC6  
                                                             ?_and 0052  
                                                             l1078 3CF0  
                                                             l1094 3B76  
                                                             l1086 3B50  
                                                             l1270 3F9A  
                                                             l1190 3F2E  
                                                             l1166 3ECE  
                                                             l1254 3E24  
                                                             l1246 3DCC  
                                                             l1238 3DB4  
                                                             l1088 3B54  
                                                             l1184 3F16  
                                                             l1256 3E44  
                                                             l1248 3DD2  
                                                             l1178 3EFE  
                                                             l1098 3B7C  
                                                             l1258 3E64  
                                                             l1196 3F46  
                                                             ?_xor 0052  
                                                             _LATB 000F8A  
                                                             _LATC 000F8B  
                                                             _LATD 000F8C  
                                                             _LATE 000F8D  
                                                     __CFG_PWRT$ON 000000  
                                                             _main 3DB4  
                                                             _nand 3ABE  
                                                             _oper 006F  
                                                             indf2 000FDF  
                                                             fsr1l 000FE1  
                                                             fsr2l 000FD9  
                                                             _suma 3A14  
                                                             prodh 000FF4  
                                                             prodl 000FF3  
                                                             start 0002  
                                                     ___param_bank 000000  
                                                            ??_and 0054  
                                                            ??_xor 0054  
                                                            ?_main 0052  
                                                            ?_nand 0056  
                                                  __end_of___lbdiv 3CF8  
                                                  __end_of___lbmod 3B7C  
                                                            ?_suma 0052  
                                                     ?_init_config 0052  
                                                            _PORTB 000F81  
                                                            _PORTC 000F82  
                                                            _PORTD 000F83  
                                                            _PORTE 000F84  
                                                            _TRISB 000F93  
                                                            _TRISC 000F94  
                                                            _TRISD 000F95  
                                                            _TRISE 000F96  
                                                            _input 0072  
                                                            _resta 3A62  
                                                            _multi 3A26  
                                                  __end_of_isupper 3BBE  
                                                            tablat 000FF5  
                                                            status 000FD8  
                                                  __end_of_tolower 3C82  
                                                  ___lbdiv@divisor 0052  
                                                  ___lbdiv@counter 0054  
                                                  __initialization 3AD8  
                                                     __end_of_main 3E7E  
                                                     __end_of_nand 3AD8  
                                                     __end_of_suma 3A26  
                                                           ??_main 006D  
                                                           ??_nand 0058  
                                                           ??_suma 0054  
                                                    __activetblptr 000002  
                                                           _ADCON1 000FC1  
                                                           ?_resta 0052  
                                                           ?_multi 0052  
                                                           _NUMERO 0001  
                                                 __end_of_division 3AA4  
                                                        ??___lbdiv 0053  
                                                        ??___lbmod 0053  
                                                           _oper_1 0071  
                                                           _oper_2 0070  
                                                           _module 3AA4  
                                                           _operar 3E7E  
                                                     __pdataCOMRAM 0001  
                                                           tblptrh 000FF7  
                                                        ??_isupper 0054  
                                                           tblptrl 000FF6  
                                                           tblptru 000FF8  
                                                        ??_tolower 005A  
                                                 ___lbdiv@dividend 0053  
                                                  ___lbmod@divisor 0052  
                                                       __accesstop 0080  
                                          __end_of__initialization 3AF8  
                                                  ___lbmod@counter 0054  
                                                    ___rparam_used 000001  
                                                   __pcstackCOMRAM 0052  
                                                    __end_of_resta 3A76  
                                                    __end_of_multi 3A3A  
                                                 ___lbdiv@quotient 0055  
                                                       __end_of_or 3A62  
                                             __size_of_init_config 0036  
                                               visualizar@position 0062  
                                                          ??_resta 0054  
                                                          ??_multi 0054  
                                                       __pnvCOMRAM 006E  
                                                          ?_module 0056  
                                                          ?_operar 005A  
                                                          _SIMBOLO 0031  
                                                        ?_division 0056  
                                                   visualizar@from 0063  
                                                          __Hparam 0000  
                                                          __Lparam 0000  
                                                          ___lbdiv 3C82  
                                                          ___lbmod 3B3A  
                                                          __pcinit 3AD8  
                                                   _visualizar$144 006A  
                                                          __ramtop 0600  
                                                  __size_of_module 001A  
                                                  __size_of_operar 0182  
                                                          __ptext0 3DB4  
                                                          __ptext1 3CF8  
                                                          __ptext2 3C10  
                                                          __ptext3 3B7C  
                                                          __ptext4 3E7E  
                                                          __ptext5 3A76  
                                                          __ptext6 3A14  
                                                          __ptext7 3A62  
                                                          __ptext8 3A4E  
                                                          __ptext9 3ABE  
                                                      resta@oper_1 0055  
                                                      resta@oper_2 0052  
                                                     __size_of_and 0014  
                                                     __size_of_xor 0014  
                                                          _isupper 3B7C  
                                                          _tolower 3C10  
                                             end_of_initialization 3AF8  
                                                       ??_division 0058  
                                                    __Lmediumconst 0000  
                                                          postdec1 000FE5  
                                                          postinc0 000FEE  
                                                      multi@oper_1 0054  
                                                      multi@oper_2 0052  
                                                 ___lbmod@dividend 0053  
                                                      ___lbmod@rem 0055  
                                                       _visualizar 3CF8  
                                                       nand@oper_1 0058  
                                                       nand@oper_2 0056  
                                                    __pidataCOMRAM 3BBF  
                                                   __end_of_module 3ABE  
                                                   __end_of_operar 4000  
                                              start_initialization 3AD8  
                                                 visualizar@enable 0065  
                                                   division@oper_1 0058  
                                                   division@oper_2 0056  
                                                      __end_of_and 3A4E  
                                                      __end_of_xor 3A8A  
                                                   division@result 0059  
                                                         ??_module 0058  
                                                         ??_operar 005C  
                                                    ??_init_config 0052  
                                                __size_of_division 001A  
                                                      ?_visualizar 0060  
                                                         ?___lbdiv 0052  
                                                         ?___lbmod 0052  
                                                      visualizar@x 006C  
                                                     module@oper_1 0059  
                                                     module@oper_2 0056  
                                                        and@oper_1 0055  
                                                        and@oper_2 0052  
                                                    visualizar@SoN 0060  
                                                         ?_isupper 0052  
                                                       operar@oper 005E  
                                                         ?_tolower 0058  
                                              __end_of_init_config 3B38  
                                                   __size_of_resta 0014  
                                                   __size_of_multi 0014  
                                                      __size_of_or 0014  
                                                        _resultado 006E  
                                              __size_of_visualizar 00BC  
                                                        copy_data0 3AEC  
                                                       suma@oper_1 0054  
                                                       suma@oper_2 0052  
                                                         __Hrparam 0000  
                                                         __Lrparam 0000  
                                                 __size_of___lbdiv 0076  
                                                 __size_of___lbmod 0042  
                                                     operar@oper_1 005A  
                                                     operar@oper_2 005B  
                                                      _init_config 3B02  
                                                         __ptext10 3A3A  
                                                         __ptext11 3A26  
                                                         __ptext12 3AA4  
                                                         __ptext13 3B3A  
                                                         __ptext14 3A8A  
                                                         __ptext15 3C82  
                                                         __ptext16 3B02  
                                                 __size_of_isupper 0042  
                                                         _division 3A8A  
                                                 __size_of_tolower 0072  
                                                    __size_of_main 00CA  
                                                    __size_of_nand 001A  
                                                    __size_of_suma 0012  
                                                         or@oper_1 0055  
                                                         or@oper_2 0052  
                                                        xor@oper_1 0055  
                                                        xor@oper_2 0052  
                                                     ??_visualizar 0067  
                                                         isupper@c 0052  
                                                         tolower@c 0058  
                                               __end_of_visualizar 3DB4  
